[   0.013][v][cplayer] mpv 0.34.0-362-g8557ba76e2 Copyright Â© 2000-2022 mpv/MPlayer/mplayer2 projects
[   0.013][v][cplayer]  built on Thu Jun 30 12:33:56 2022
[   0.013][v][cplayer] FFmpeg library versions:
[   0.013][v][cplayer]    libavutil       57.27.100
[   0.013][v][cplayer]    libavcodec      59.34.100
[   0.013][v][cplayer]    libavformat     59.25.100
[   0.013][v][cplayer]    libswscale      6.6.100
[   0.013][v][cplayer]    libavfilter     8.41.100
[   0.013][v][cplayer]    libswresample   4.6.100
[   0.013][v][cplayer] FFmpeg version: git-2022-06-29-be4d1caa
[   0.013][v][cplayer] 
[   0.013][v][cplayer] Configuration: meson build -Dprefix=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build64/install/mingw
[   0.013][v][cplayer] List of enabled features: av-channel-layout build-date cplayer cuda-hwaccel cuda-interop d3d11 d3d9_hwaccel d3d_hwaccel direct3d dvdnav egl-angle egl-angle-win32 egl-helpers ffmpeg ffnvcodec gl gl-dxinterop gl-dxinterop-d3d9 gl-win32 glob glob_win32 iconv javascript jpeg lcms2 libarchive libass libavdevice libbluray libm libmpv-shared libplacebo libplacebo-next luajit manpage-build noexecstack openal optimize pdf-build plain-gl rubberband sdl2 sdl2-audio sdl2-gamepad sdl2-video shaderc_combined spirv-cross stdatomic threads uchardet vapoursynth vector vulkan wasapi win32 win32-desktop win32-executable win32-internal-pthreads zimg zlib
[   0.013][v][cplayer] Built with NDEBUG.
[   0.013][d][osc] Loading lua script @osc.lua...
[   0.013][d][ytdl_hook] Loading lua script @ytdl_hook.lua...
[   0.013][d][stats] Loading lua script @stats.lua...
[   0.013][d][ytdl_hook] loading mp.defaults
[   0.013][d][osc] loading mp.defaults
[   0.013][d][console] Loading lua script @console.lua...
[   0.013][d][auto_profiles] Loading lua script @auto_profiles.lua...
[   0.013][d][stats] loading mp.defaults
[   0.014][d][auto_profiles] loading mp.defaults
[   0.014][d][ytdl_hook] loading @ytdl_hook.lua
[   0.014][d][osc] loading @osc.lua
[   0.014][d][global] config path: 'scripts' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/scripts'
[   0.014][d][global] config path: 'scripts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/scripts'
[   0.014][d][global] config path: 'scripts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/scripts'
[   0.014][v][cplayer] Waiting for scripts...
[   0.014][d][console] loading mp.defaults
[   0.014][d][stats] loading @stats.lua
[   0.014][d][auto_profiles] loading @auto_profiles.lua
[   0.015][d][ytdl_hook] reading options for ytdl_hook 
[   0.015][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/script-opts/ytdl_hook.conf'
[   0.015][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/script-opts/ytdl_hook.conf'
[   0.015][d][auto_profiles] Exiting...
[   0.015][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/script-opts/ytdl_hook.conf'
[   0.015][d][ytdl_hook] script-opts/ytdl_hook.conf not found. 
[   0.015][d][console] loading @console.lua
[   0.015][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/lua-settings/ytdl_hook.conf'
[   0.015][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/lua-settings/ytdl_hook.conf'
[   0.015][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/lua-settings/ytdl_hook.conf'
[   0.015][d][ytdl_hook] lua-settings/ytdl_hook.conf not found. 
[   0.016][d][stats] reading options for stats 
[   0.016][d][global] config path: 'script-opts/stats.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/script-opts/stats.conf'
[   0.016][d][global] config path: 'script-opts/stats.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/script-opts/stats.conf'
[   0.016][d][global] config path: 'script-opts/stats.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/script-opts/stats.conf'
[   0.016][d][stats] script-opts/stats.conf not found. 
[   0.016][d][console] reading options for console 
[   0.016][d][osc] reading options for osc 
[   0.016][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/lua-settings/stats.conf'
[   0.016][d][global] config path: 'lua-settings/stats.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/lua-settings/stats.conf'
[   0.016][d][global] config path: 'lua-settings/stats.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/lua-settings/stats.conf'
[   0.016][d][stats] lua-settings/stats.conf not found. 
[   0.016][d][global] config path: 'script-opts/osc.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/script-opts/osc.conf'
[   0.017][d][global] config path: 'script-opts/osc.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/script-opts/osc.conf'
[   0.017][d][global] config path: 'script-opts/osc.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/script-opts/osc.conf'
[   0.017][d][osc] script-opts/osc.conf not found. 
[   0.017][d][global] config path: 'script-opts/console.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/script-opts/console.conf'
[   0.017][d][global] config path: 'script-opts/console.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/script-opts/console.conf'
[   0.017][d][global] config path: 'script-opts/console.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/script-opts/console.conf'
[   0.017][d][console] script-opts/console.conf not found. 
[   0.017][d][global] config path: 'lua-settings/osc.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/lua-settings/osc.conf'
[   0.017][d][global] config path: 'lua-settings/osc.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/lua-settings/osc.conf'
[   0.017][d][global] config path: 'lua-settings/osc.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/lua-settings/osc.conf'
[   0.017][d][osc] lua-settings/osc.conf not found. 
[   0.017][d][global] config path: 'lua-settings/console.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/lua-settings/console.conf'
[   0.017][d][global] config path: 'lua-settings/console.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/lua-settings/console.conf'
[   0.017][d][global] config path: 'lua-settings/console.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/lua-settings/console.conf'
[   0.017][d][console] lua-settings/console.conf not found. 
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_stats", contents="", flags="default"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_stats", contents="", flags="force"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][global] config path: 'fonts' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts'
[   0.018][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts'
[   0.018][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts'
[   0.018][d][osd/libass] ASS library version: 0x1600000 (runtime 0x1600000)
[   0.018][v][osd/libass] libass API version: 0x1600000
[   0.018][v][osd/libass] libass source: commit: a2b39cde4ecb74d5e6fccab4a5f7d8ad52b2b1a4
[   0.020][v][osd/libass] Shaper: FriBidi 1.0.12 (SIMPLE) HarfBuzz-ng 4.4.1 (COMPLEX)
[   0.020][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/subfont.ttf'
[   0.020][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/subfont.ttf'
[   0.020][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/subfont.ttf'
[   0.021][d][global] config path: 'fonts.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts.conf'
[   0.021][d][global] config path: 'fonts.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts.conf'
[   0.021][d][global] config path: 'fonts.conf' -> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts.conf'
[   0.021][v][osd/libass] Setting up fonts...
[   0.022][v][osd/libass] Using font provider directwrite (with GDI)
[   0.022][v][osd/libass] Done.
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="showhide", contents="mouse_move script-binding osc/__keybinding1\nmouse_leave script-binding osc/__keybinding2\n", flags="force"]
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="showhide_wc", contents="mouse_move script-binding osc/__keybinding3\nmouse_leave script-binding osc/__keybinding4\n", flags="force"]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide_wc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="input_console", contents="", flags="default"]
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="input", contents="mbtn_left script-binding osc/__keybinding5\nshift+mbtn_left script-binding osc/__keybinding6\nmbtn_right script-binding osc/__keybinding7\nmbtn_mid script-binding osc/__keybinding8\nwheel_up script-binding osc/__keybinding9\nwheel_down script-binding osc/__keybinding10\nmbtn_left_dbl ignore\nshift+mbtn_left_dbl ignore\nmbtn_right_dbl ignore\n", flags="force"]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="input_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_console", contents="", flags="force"]
[   0.023][d][cplayer] Run command: define-section, flags=64, args=[name="window-controls", contents="mbtn_left script-binding osc/__keybinding11\n", flags="force"]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="window-controls", flags=""]
[   0.023][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.023][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-visibility=auto"]
[   0.023][v][cplayer] Set property: shared-script-properties -> 1
[   0.023][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.023][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.023][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.023][v][cplayer] Set property: shared-script-properties -> 1
[   0.023][v][cplayer] Done loading scripts.
[   0.024][d][global] config path: 'watch_later' -> 'C:\Users\khaosmaou\AppData\Roaming/mpv/watch_later'
[   0.024][v][cplayer] Running hook: ytdl_hook/on_load
[   0.024][v][ytdl_hook] ytdl:// hook 
[   0.024][v][ytdl_hook] not a ytdl:// url 
[   0.024][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.024][v][cplayer] Set property: shared-script-properties -> 1
[   0.024][v][ifo_dvdnav] Opening D:\Downloads\qBittorrent\TV\Star.Trek.Strange.New.Worlds.S01E03.1080p.WEB.H264-CAKES[rarbg]\star.trek.strange.new.worlds.s01e03.1080p.web.h264-cakes.mkv
[   0.024][d][osc] osc_init 
[   0.024][v][bdmv/bluray] Opening D:\Downloads\qBittorrent\TV\Star.Trek.Strange.New.Worlds.S01E03.1080p.WEB.H264-CAKES[rarbg]\star.trek.strange.new.worlds.s01e03.1080p.web.h264-cakes.mkv
[   0.024][v][file] Opening D:\Downloads\qBittorrent\TV\Star.Trek.Strange.New.Worlds.S01E03.1080p.WEB.H264-CAKES[rarbg]\star.trek.strange.new.worlds.s01e03.1080p.web.h264-cakes.mkv
[   0.025][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.025][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.025][d][file] Stream opened successfully.
[   0.025][v][demux] Trying demuxers for level=normal.
[   0.025][v][cplayer] Set property: shared-script-properties -> 1
[   0.025][d][demux] Trying demuxer: disc (force-level: normal)
[   0.025][d][demux] Trying demuxer: edl (force-level: normal)
[   0.025][d][demux] Trying demuxer: cue (force-level: normal)
[   0.025][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.025][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.025][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.025][d][mkv] Found the head...
[   0.025][d][mkv] + a segment...
[   0.025][d][mkv] Parsing seek head...
[   0.025][d][mkv] |+ segment information...
[   0.025][d][mkv] float 2745760.000000
[   0.025][d][mkv] | + muxing app: libebml v1.4.0 + libmatroska v1.6.1
[   0.025][d][mkv] | + writing app: mkvmerge v49.0.0 ('Sick Of Losing Soulmates') 64-bit
[   0.025][d][mkv] | + timecode scale: 1000000
[   0.025][d][mkv] | + duration: 2745.760s
[   0.025][d][mkv] | + segment uid db e0 42 4e 87 9d 1c e3 5b e9 95 a9 34 fd 35 61
[   0.025][d][mkv] |+ segment tracks...
[   0.025][d][global] config path: 'fonts' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts'
[   0.025][d][mkv] float 48000.000000
[   0.025][d][mkv] | + a track...
[   0.025][d][mkv] |  + Track number: 1
[   0.025][d][mkv] |  + Track type: Video
[   0.025][d][mkv] |  + Video track
[   0.025][d][mkv] |   + Display width: 1920
[   0.025][d][mkv] |   + Display height: 800
[   0.025][d][mkv] |   + Pixel width: 1920
[   0.025][d][mkv] |   + Pixel height: 800
[   0.025][d][mkv] |  + Codec ID: V_MPEG4/ISO/AVC
[   0.025][d][mkv] |  + CodecPrivate, length 58
[   0.025][d][mkv] |  + Language: und
[   0.025][d][mkv] |  + Default duration: 41.667ms ( = 24.000 fps)
[   0.025][d][mkv] | + a track...
[   0.025][d][mkv] |  + Track number: 2
[   0.025][d][mkv] |  + Track type: Audio
[   0.025][d][mkv] |  + Audio track
[   0.025][d][mkv] |   + Sampling frequency: 48000.000000
[   0.025][d][mkv] |   + Channels: 6
[   0.025][d][mkv] |  + Codec ID: A_EAC3
[   0.025][d][mkv] |  + Default duration: 32.000ms ( = 31.250 fps)
[   0.025][d][mkv] | + a track...
[   0.025][d][mkv] |  + Track number: 3
[   0.025][d][mkv] |  + Name: English
[   0.025][d][mkv] |  + Track type: Subtitle
[   0.025][d][mkv] |  + Codec ID: S_TEXT/UTF8
[   0.025][d][mkv] |  + Default flag: 0
[   0.025][d][mkv] | + a track...
[   0.025][d][mkv] |  + Track number: 4
[   0.025][d][mkv] |  + Name: English [SDH]
[   0.025][d][mkv] |  + Track type: Subtitle
[   0.025][d][mkv] |  + Codec ID: S_TEXT/UTF8
[   0.025][d][mkv] |  + Default flag: 0
[   0.025][d][mkv] |+ found cluster
[   0.025][v][mkv] Deferring reading cues.
[   0.025][v][mkv] All headers are parsed!
[   0.025][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts'
[   0.025][v][demux] Detected file format: Matroska
[   0.025][v][cplayer] Opening done: D:\Downloads\qBittorrent\TV\Star.Trek.Strange.New.Worlds.S01E03.1080p.WEB.H264-CAKES[rarbg]\star.trek.strange.new.worlds.s01e03.1080p.web.h264-cakes.mkv
[   0.025][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts'
[   0.026][d][osd/libass] ASS library version: 0x1600000 (runtime 0x1600000)
[   0.026][v][osd/libass] libass API version: 0x1600000
[   0.026][v][osd/libass] libass source: commit: a2b39cde4ecb74d5e6fccab4a5f7d8ad52b2b1a4
[   0.027][v][osd/libass] Shaper: FriBidi 1.0.12 (SIMPLE) HarfBuzz-ng 4.4.1 (COMPLEX)
[   0.027][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/subfont.ttf'
[   0.028][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/subfont.ttf'
[   0.028][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/subfont.ttf'
[   0.028][d][global] config path: 'fonts.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts.conf'
[   0.028][d][global] config path: 'fonts.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts.conf'
[   0.028][d][global] config path: 'fonts.conf' -> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts.conf'
[   0.028][v][osd/libass] Setting up fonts...
[   0.028][v][osd/libass] Using font provider directwrite (with GDI)
[   0.028][v][osd/libass] Done.
[   0.029][d][cplayer] Run command: define-section, flags=64, args=[name="input_osc", contents="", flags="default"]
[   0.029][d][cplayer] Run command: enable-section, flags=64, args=[name="input_osc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.029][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_osc", contents="", flags="force"]
[   0.029][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_osc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.029][v][find_files] Loading external files in D:\Downloads\qBittorrent\TV\Star.Trek.Strange.New.Worlds.S01E03.1080p.WEB.H264-CAKES[rarbg]\
[   0.030][d][global] config path: 'sub' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/sub'
[   0.030][d][global] config path: 'sub' -/-> 'D:/ProgramFiles/git/mpv-x86_64/sub'
[   0.030][d][global] config path: 'sub' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/sub'
[   0.030][v][cplayer] Running hook: ytdl_hook/on_preloaded
[   0.030][v][mkv] select track 0
[   0.030][v][mkv] select track 1
[   0.030][v][mkv] select track 2
[   0.030][i][cplayer]  (+) Video --vid=1 (*) (h264 1920x800 24.000fps)
[   0.030][i][cplayer]  (+) Audio --aid=1 --alang=eng (*) (eac3 6ch 48000Hz)
[   0.030][i][cplayer]  (+) Subs  --sid=1 --slang=eng 'English' (subrip)
[   0.030][i][cplayer]      Subs  --sid=2 --slang=eng 'English [SDH]' (subrip)
[   0.031][v][vo/gpu] Probing for best GPU context.
[   0.031][v][vo/gpu/d3d11] Initializing GPU context 'd3d11'
[   0.125][v][vo/gpu/d3d11] Using Direct3D 11 feature level 12_1
[   0.125][v][vo/gpu/d3d11] Device Name: NVIDIA GeForce GTX 1080
[   0.125][v][vo/gpu/d3d11] Device ID: 10de:1b80 (rev a1)
[   0.125][v][vo/gpu/d3d11] Subsystem ID: 1458:3717
[   0.125][v][vo/gpu/d3d11] LUID: 0000000000011c7a
[   0.125][v][vo/gpu/d3d11] Initializing SPIR-V compiler 'shaderc'
[   0.125][v][vo/gpu/d3d11] Using Direct3D 11.1 runtime
[   0.125][v][vo/gpu/d3d11] Maximum Texture2D size: 16384x16384
[   0.127][v][vo/gpu/d3d11] D3DCompiler version: 10.0.22621.160
[   0.148][v][vo/gpu/d3d11] Using DXGI 1.2+
[   0.148][v][vo/gpu/d3d11] Queried output: \\.\DISPLAY1, 1920x1080 @ 8 bits, colorspace: RGB_FULL_G22_NONE_P709 (0)
[   0.148][v][vo/gpu/d3d11] Selected swapchain format R8G8B8A8_UNORM (28), attempting to utilize it.
[   0.149][v][vo/gpu/d3d11] Selected swapchain color space RGB_FULL_G22_NONE_P709 (0), attempting to utilize it.
[   0.149][v][vo/gpu/d3d11] Swapchain capabilities for color space RGB_FULL_G22_NONE_P709 (0): normal: yes, overlay: no
[   0.149][v][vo/gpu/d3d11] Swapchain successfully configured to color space RGB_FULL_G22_NONE_P709 (0)!
[   0.149][v][vo/gpu/d3d11] Using flip-model presentation
[   0.150][d][vo/gpu/d3d11] Texture formats:
[   0.150][d][vo/gpu/d3d11]   NAME       COMP*TYPE SIZE           DEPTH PER COMP.
[   0.150][d][vo/gpu/d3d11]   r8         1*unorm   1B    LF CR ST {8}
[   0.150][d][vo/gpu/d3d11]   rg8        2*unorm   2B    LF CR ST {8 8}
[   0.150][d][vo/gpu/d3d11]   rgba8      4*unorm   4B    LF CR ST {8 8 8 8}
[   0.150][d][vo/gpu/d3d11]   r16        1*unorm   2B    LF CR ST {16}
[   0.150][d][vo/gpu/d3d11]   rg16       2*unorm   4B    LF CR ST {16 16}
[   0.150][d][vo/gpu/d3d11]   rgba16     4*unorm   8B    LF CR ST {16 16 16 16}
[   0.150][d][vo/gpu/d3d11]   r32ui      1*uint    4B          ST {32}
[   0.150][d][vo/gpu/d3d11]   rg32ui     2*uint    8B          ST {32 32}
[   0.150][d][vo/gpu/d3d11]   rgb32ui    3*uint   12B             {32 32 32}
[   0.150][d][vo/gpu/d3d11]   rgba32ui   4*uint   16B          ST {32 32 32 32}
[   0.150][d][vo/gpu/d3d11]   r16hf      1*float   2B    LF CR ST {16}
[   0.150][d][vo/gpu/d3d11]   rg16hf     2*float   4B    LF CR ST {16 16}
[   0.150][d][vo/gpu/d3d11]   rgba16hf   4*float   8B    LF CR ST {16 16 16 16}
[   0.150][d][vo/gpu/d3d11]   r32f       1*float   4B    LF CR ST {32}
[   0.150][d][vo/gpu/d3d11]   rg32f      2*float   8B    LF CR ST {32 32}
[   0.150][d][vo/gpu/d3d11]   rgb32f     3*float  12B             {32 32 32}
[   0.150][d][vo/gpu/d3d11]   rgba32f    4*float  16B    LF CR ST {32 32 32 32}
[   0.150][d][vo/gpu/d3d11]   rgb10_a2   4*unorm   4B    LF CR ST {10 10 10 2}
[   0.150][d][vo/gpu/d3d11]   bgra8      4*unorm   4B    LF CR ST {8 8 8 8}
[   0.150][d][vo/gpu/d3d11]   bgrx8      3*unorm   4B    LF CR    {8 8 8}
[   0.150][d][vo/gpu/d3d11]  LA = LUMINANCE_ALPHA hack format
[   0.150][d][vo/gpu/d3d11]  LF = linear filterable
[   0.150][d][vo/gpu/d3d11]  CR = can be used for render targets
[   0.150][d][vo/gpu/d3d11]  ST = can be used for storable images
[   0.150][d][vo/gpu/d3d11] Image formats:
[   0.150][d][vo/gpu/d3d11]   yuv444p => 3 planes 1x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv420p => 3 planes 2x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   gray => 1 planes 1x1 8/0 [r8] (r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gray16 => 1 planes 1x1 16/0 [r16] (r) [unorm]
[   0.150][d][vo/gpu/d3d11]   uyvy422
[   0.150][d][vo/gpu/d3d11]   nv12 => 2 planes 2x2 8/0 [r8/rg8] (r/gb) [unorm]
[   0.150][d][vo/gpu/d3d11]   p010 => 2 planes 2x2 16/6 [r16/rg16] (r/gb) [unorm]
[   0.150][d][vo/gpu/d3d11]   argb => 1 planes 1x1 8/0 [rgba8] (argb) [unorm]
[   0.150][d][vo/gpu/d3d11]   bgra => 1 planes 1x1 8/0 [rgba8] (bgra) [unorm]
[   0.150][d][vo/gpu/d3d11]   abgr => 1 planes 1x1 8/0 [rgba8] (abgr) [unorm]
[   0.150][d][vo/gpu/d3d11]   rgba => 1 planes 1x1 8/0 [rgba8] (rgba) [unorm]
[   0.150][d][vo/gpu/d3d11]   bgr24
[   0.150][d][vo/gpu/d3d11]   rgb24
[   0.150][d][vo/gpu/d3d11]   0rgb => 1 planes 1x1 8/0 [rgba8] (_rgb) [unorm]
[   0.150][d][vo/gpu/d3d11]   bgr0 => 1 planes 1x1 8/0 [rgba8] (bgr) [unorm]
[   0.150][d][vo/gpu/d3d11]   0bgr => 1 planes 1x1 8/0 [rgba8] (_bgr) [unorm]
[   0.150][d][vo/gpu/d3d11]   rgb0 => 1 planes 1x1 8/0 [rgba8] (rgb) [unorm]
[   0.150][d][vo/gpu/d3d11]   rgba64 => 1 planes 1x1 16/0 [rgba16] (rgba) [unorm]
[   0.150][d][vo/gpu/d3d11]   rgb565
[   0.150][d][vo/gpu/d3d11]   pal8
[   0.150][d][vo/gpu/d3d11]   vdpau
[   0.150][d][vo/gpu/d3d11]   d3d11
[   0.150][d][vo/gpu/d3d11]   dxva2_vld
[   0.150][d][vo/gpu/d3d11]   mmal
[   0.150][d][vo/gpu/d3d11]   mediacodec
[   0.150][d][vo/gpu/d3d11]   drm_prime
[   0.150][d][vo/gpu/d3d11]   cuda
[   0.150][d][vo/gpu/d3d11]   yap8 => 2 planes 1x1 8/0 [r8/r8] (r/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yap16 => 2 planes 1x1 16/0 [r16/r16] (r/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   grayaf32 => 2 planes 1x1 32/0 [r32f/r32f] (r/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv444pf => 3 planes 1x1 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva444pf => 4 planes 1x1 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv420pf => 3 planes 2x2 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva420pf => 4 planes 2x2 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv422pf => 3 planes 2x1 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva422pf => 4 planes 2x1 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv440pf => 3 planes 1x2 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva440pf => 4 planes 1x2 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv410pf => 3 planes 4x4 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva410pf => 4 planes 4x4 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   yuv411pf => 3 planes 4x1 32/0 [r32f/r32f/r32f] (r/g/b) [float]
[   0.150][d][vo/gpu/d3d11]   yuva411pf => 4 planes 4x1 32/0 [r32f/r32f/r32f/r32f] (r/g/b/a) [float]
[   0.150][d][vo/gpu/d3d11]   rgb30
[   0.150][d][vo/gpu/d3d11]   y1 => 1 planes 1x1 8/-7 [r8] (r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp1 => 3 planes 1x1 8/-7 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp2 => 3 planes 1x1 8/-6 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp3 => 3 planes 1x1 8/-5 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp4 => 3 planes 1x1 8/-4 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp5 => 3 planes 1x1 8/-3 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp6 => 3 planes 1x1 8/-2 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   vdpau_output
[   0.150][d][vo/gpu/d3d11]   vaapi
[   0.150][d][vo/gpu/d3d11]   videotoolbox
[   0.150][d][vo/gpu/d3d11]   yuyv422
[   0.150][d][vo/gpu/d3d11]   yuv422p => 3 planes 2x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv410p => 3 planes 4x4 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv411p => 3 planes 4x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   monow
[   0.150][d][vo/gpu/d3d11]   monob
[   0.150][d][vo/gpu/d3d11]   yuvj422p => 3 planes 2x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   uyyvyy411
[   0.150][d][vo/gpu/d3d11]   bgr8
[   0.150][d][vo/gpu/d3d11]   bgr4
[   0.150][d][vo/gpu/d3d11]   bgr4_byte
[   0.150][d][vo/gpu/d3d11]   rgb8
[   0.150][d][vo/gpu/d3d11]   rgb4
[   0.150][d][vo/gpu/d3d11]   rgb4_byte
[   0.150][d][vo/gpu/d3d11]   nv21 => 2 planes 2x2 8/0 [r8/rg8] (r/bg) [unorm]
[   0.150][d][vo/gpu/d3d11]   gray16be
[   0.150][d][vo/gpu/d3d11]   yuv440p => 3 planes 1x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuvj440p => 3 planes 1x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva420p => 4 planes 2x2 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   rgb48be
[   0.150][d][vo/gpu/d3d11]   rgb48
[   0.150][d][vo/gpu/d3d11]   rgb565be
[   0.150][d][vo/gpu/d3d11]   rgb555be
[   0.150][d][vo/gpu/d3d11]   rgb555
[   0.150][d][vo/gpu/d3d11]   bgr565be
[   0.150][d][vo/gpu/d3d11]   bgr565
[   0.150][d][vo/gpu/d3d11]   bgr555be
[   0.150][d][vo/gpu/d3d11]   bgr555
[   0.150][d][vo/gpu/d3d11]   yuv420p16 => 3 planes 2x2 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv420p16be
[   0.150][d][vo/gpu/d3d11]   yuv422p16 => 3 planes 2x1 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv422p16be
[   0.150][d][vo/gpu/d3d11]   yuv444p16 => 3 planes 1x1 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv444p16be
[   0.150][d][vo/gpu/d3d11]   rgb444
[   0.150][d][vo/gpu/d3d11]   rgb444be
[   0.150][d][vo/gpu/d3d11]   bgr444
[   0.150][d][vo/gpu/d3d11]   bgr444be
[   0.150][d][vo/gpu/d3d11]   ya8 => 1 planes 1x1 8/0 [rg8] (ra) [unorm]
[   0.150][d][vo/gpu/d3d11]   bgr48be
[   0.150][d][vo/gpu/d3d11]   bgr48
[   0.150][d][vo/gpu/d3d11]   yuv420p9be
[   0.150][d][vo/gpu/d3d11]   yuv420p9 => 3 planes 2x2 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv420p10be
[   0.150][d][vo/gpu/d3d11]   yuv420p10 => 3 planes 2x2 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv422p10be
[   0.150][d][vo/gpu/d3d11]   yuv422p10 => 3 planes 2x1 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv444p9be
[   0.150][d][vo/gpu/d3d11]   yuv444p9 => 3 planes 1x1 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv444p10be
[   0.150][d][vo/gpu/d3d11]   yuv444p10 => 3 planes 1x1 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuv422p9be
[   0.150][d][vo/gpu/d3d11]   yuv422p9 => 3 planes 2x1 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp => 3 planes 1x1 8/0 [r8/r8/r8] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp9be
[   0.150][d][vo/gpu/d3d11]   gbrp9 => 3 planes 1x1 16/-7 [r16/r16/r16] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp10be
[   0.150][d][vo/gpu/d3d11]   gbrp10 => 3 planes 1x1 16/-6 [r16/r16/r16] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   gbrp16be
[   0.150][d][vo/gpu/d3d11]   gbrp16 => 3 planes 1x1 16/0 [r16/r16/r16] (g/b/r) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva422p => 4 planes 2x1 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva444p => 4 planes 1x1 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva420p9be
[   0.150][d][vo/gpu/d3d11]   yuva420p9 => 4 planes 2x2 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva422p9be
[   0.150][d][vo/gpu/d3d11]   yuva422p9 => 4 planes 2x1 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva444p9be
[   0.150][d][vo/gpu/d3d11]   yuva444p9 => 4 planes 1x1 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva420p10be
[   0.150][d][vo/gpu/d3d11]   yuva420p10 => 4 planes 2x2 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva422p10be
[   0.150][d][vo/gpu/d3d11]   yuva422p10 => 4 planes 2x1 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva444p10be
[   0.150][d][vo/gpu/d3d11]   yuva444p10 => 4 planes 1x1 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva420p16be
[   0.150][d][vo/gpu/d3d11]   yuva420p16 => 4 planes 2x2 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva422p16be
[   0.150][d][vo/gpu/d3d11]   yuva422p16 => 4 planes 2x1 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   yuva444p16be
[   0.150][d][vo/gpu/d3d11]   yuva444p16 => 4 planes 1x1 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.150][d][vo/gpu/d3d11]   xyz12
[   0.150][d][vo/gpu/d3d11]   xyz12be
[   0.150][d][vo/gpu/d3d11]   nv16 => 2 planes 2x1 8/0 [r8/rg8] (r/gb) [unorm]
[   0.150][d][vo/gpu/d3d11]   nv20 => 2 planes 2x1 16/-6 [r16/rg16] (r/gb) [unorm]
[   0.150][d][vo/gpu/d3d11]   nv20be
[   0.150][d][vo/gpu/d3d11]   rgba64be
[   0.150][d][vo/gpu/d3d11]   bgra64be
[   0.150][d][vo/gpu/d3d11]   bgra64 => 1 planes 1x1 16/0 [rgba16] (bgra) [unorm]
[   0.151][d][vo/gpu/d3d11]   yvyu422
[   0.151][d][vo/gpu/d3d11]   ya16be
[   0.151][d][vo/gpu/d3d11]   ya16 => 1 planes 1x1 16/0 [rg16] (ra) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrap => 4 planes 1x1 8/0 [r8/r8/r8/r8] (g/b/r/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrap16be
[   0.151][d][vo/gpu/d3d11]   gbrap16 => 4 planes 1x1 16/0 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   qsv
[   0.151][d][vo/gpu/d3d11]   d3d11va_vld
[   0.151][d][vo/gpu/d3d11]   yuv420p12be
[   0.151][d][vo/gpu/d3d11]   yuv420p12 => 3 planes 2x2 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv420p14be
[   0.151][d][vo/gpu/d3d11]   yuv420p14 => 3 planes 2x2 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv422p12be
[   0.151][d][vo/gpu/d3d11]   yuv422p12 => 3 planes 2x1 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv422p14be
[   0.151][d][vo/gpu/d3d11]   yuv422p14 => 3 planes 2x1 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv444p12be
[   0.151][d][vo/gpu/d3d11]   yuv444p12 => 3 planes 1x1 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv444p14be
[   0.151][d][vo/gpu/d3d11]   yuv444p14 => 3 planes 1x1 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrp12be
[   0.151][d][vo/gpu/d3d11]   gbrp12 => 3 planes 1x1 16/-4 [r16/r16/r16] (g/b/r) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrp14be
[   0.151][d][vo/gpu/d3d11]   gbrp14 => 3 planes 1x1 16/-2 [r16/r16/r16] (g/b/r) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuvj411p => 3 planes 4x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   bayer_bggr8
[   0.151][d][vo/gpu/d3d11]   bayer_rggb8
[   0.151][d][vo/gpu/d3d11]   bayer_gbrg8
[   0.151][d][vo/gpu/d3d11]   bayer_grbg8
[   0.151][d][vo/gpu/d3d11]   bayer_bggr16
[   0.151][d][vo/gpu/d3d11]   bayer_bggr16be
[   0.151][d][vo/gpu/d3d11]   bayer_rggb16
[   0.151][d][vo/gpu/d3d11]   bayer_rggb16be
[   0.151][d][vo/gpu/d3d11]   bayer_gbrg16
[   0.151][d][vo/gpu/d3d11]   bayer_gbrg16be
[   0.151][d][vo/gpu/d3d11]   bayer_grbg16
[   0.151][d][vo/gpu/d3d11]   bayer_grbg16be
[   0.151][d][vo/gpu/d3d11]   xvmc
[   0.151][d][vo/gpu/d3d11]   yuv440p10 => 3 planes 1x2 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv440p10be
[   0.151][d][vo/gpu/d3d11]   yuv440p12 => 3 planes 1x2 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuv440p12be
[   0.151][d][vo/gpu/d3d11]   ayuv64 => 1 planes 1x1 16/0 [rgba16] (argb) [unorm]
[   0.151][d][vo/gpu/d3d11]   ayuv64be
[   0.151][d][vo/gpu/d3d11]   p010be
[   0.151][d][vo/gpu/d3d11]   gbrap12be
[   0.151][d][vo/gpu/d3d11]   gbrap12 => 4 planes 1x1 16/-4 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrap10be
[   0.151][d][vo/gpu/d3d11]   gbrap10 => 4 planes 1x1 16/-6 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   gray12be
[   0.151][d][vo/gpu/d3d11]   gray12 => 1 planes 1x1 16/-4 [r16] (r) [unorm]
[   0.151][d][vo/gpu/d3d11]   gray10be
[   0.151][d][vo/gpu/d3d11]   gray10 => 1 planes 1x1 16/-6 [r16] (r) [unorm]
[   0.151][d][vo/gpu/d3d11]   p016 => 2 planes 2x2 16/0 [r16/rg16] (r/gb) [unorm]
[   0.151][d][vo/gpu/d3d11]   p016be
[   0.151][d][vo/gpu/d3d11]   gray9be
[   0.151][d][vo/gpu/d3d11]   gray9 => 1 planes 1x1 16/-7 [r16] (r) [unorm]
[   0.151][d][vo/gpu/d3d11]   gbrpf32be
[   0.151][d][vo/gpu/d3d11]   gbrpf32 => 3 planes 1x1 32/0 [r32f/r32f/r32f] (g/b/r) [float]
[   0.151][d][vo/gpu/d3d11]   gbrapf32be
[   0.151][d][vo/gpu/d3d11]   gbrapf32 => 4 planes 1x1 32/0 [r32f/r32f/r32f/r32f] (g/b/r/a) [float]
[   0.151][d][vo/gpu/d3d11]   opencl
[   0.151][d][vo/gpu/d3d11]   gray14be
[   0.151][d][vo/gpu/d3d11]   gray14 => 1 planes 1x1 16/-2 [r16] (r) [unorm]
[   0.151][d][vo/gpu/d3d11]   grayf32be
[   0.151][d][vo/gpu/d3d11]   grayf32 => 1 planes 1x1 32/0 [r32f] (r) [float]
[   0.151][d][vo/gpu/d3d11]   yuva422p12be
[   0.151][d][vo/gpu/d3d11]   yuva422p12 => 4 planes 2x1 16/-4 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   yuva444p12be
[   0.151][d][vo/gpu/d3d11]   yuva444p12 => 4 planes 1x1 16/-4 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.151][d][vo/gpu/d3d11]   nv24 => 2 planes 1x1 8/0 [r8/rg8] (r/gb) [unorm]
[   0.151][d][vo/gpu/d3d11]   nv42 => 2 planes 1x1 8/0 [r8/rg8] (r/bg) [unorm]
[   0.151][d][vo/gpu/d3d11]   vulkan
[   0.151][d][vo/gpu/d3d11]   y210be
[   0.151][d][vo/gpu/d3d11]   y210
[   0.151][d][vo/gpu/d3d11]   x2rgb10be
[   0.151][d][vo/gpu/d3d11]   x2bgr10
[   0.151][d][vo/gpu/d3d11]   x2bgr10be
[   0.151][d][vo/gpu/d3d11]   p210be
[   0.151][d][vo/gpu/d3d11]   p210 => 2 planes 2x1 16/6 [r16/rg16] (r/gb) [unorm]
[   0.151][d][vo/gpu/d3d11]   p410be
[   0.151][d][vo/gpu/d3d11]   p410 => 2 planes 1x1 16/6 [r16/rg16] (r/gb) [unorm]
[   0.151][d][vo/gpu/d3d11]   p216be
[   0.151][d][vo/gpu/d3d11]   p216 => 2 planes 2x1 16/0 [r16/rg16] (r/gb) [unorm]
[   0.151][d][vo/gpu/d3d11]   p416be
[   0.151][d][vo/gpu/d3d11]   p416 => 2 planes 1x1 16/0 [r16/rg16] (r/gb) [unorm]
[   0.151][v][vo/gpu] Testing FBO format rgba16hf
[   0.151][d][vo/gpu] Resizing texture: 16x16
[   0.151][v][vo/gpu] Using FBO format rgba16hf.
[   0.151][d][global] config path: 'shaders/Anime4K_Clamp_Highlights.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_Clamp_Highlights.glsl'
[   0.151][d][global] config path: 'shaders/Anime4K_Clamp_Highlights.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Clamp_Highlights.glsl'
[   0.151][d][global] user path: '~~/shaders/Anime4K_Clamp_Highlights.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Clamp_Highlights.glsl'
[   0.152][d][global] config path: 'shaders/Anime4K_Restore_CNN_VL.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_Restore_CNN_VL.glsl'
[   0.152][d][global] config path: 'shaders/Anime4K_Restore_CNN_VL.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Restore_CNN_VL.glsl'
[   0.152][d][global] user path: '~~/shaders/Anime4K_Restore_CNN_VL.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Restore_CNN_VL.glsl'
[   0.153][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_VL.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_VL.glsl'
[   0.153][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_VL.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Upscale_CNN_x2_VL.glsl'
[   0.153][d][global] user path: '~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Upscale_CNN_x2_VL.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x2.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x2.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x2.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_AutoDownscalePre_x2.glsl'
[   0.154][d][global] user path: '~~/shaders/Anime4K_AutoDownscalePre_x2.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_AutoDownscalePre_x2.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x4.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x4.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x4.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_AutoDownscalePre_x4.glsl'
[   0.154][d][global] user path: '~~/shaders/Anime4K_AutoDownscalePre_x4.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_AutoDownscalePre_x4.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_M.glsl' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_M.glsl'
[   0.154][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_M.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Upscale_CNN_x2_M.glsl'
[   0.154][d][global] user path: '~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl' -> 'D:/ProgramFiles/git/mpv-x86_64/shaders/Anime4K_Upscale_CNN_x2_M.glsl'
[   0.155][v][vo/gpu/win32] DPI detected from the new API: 96
[   0.155][v][vo/gpu/win32] display-fps: 60.000000
[   0.157][v][vo/gpu/win32] color-profile: C:\WINDOWS\system32\spool\drivers\color\sRGB Color Space Profile.icm
[   0.157][v][vo/gpu] Assuming 60.000000 FPS for display sync.
[   0.157][v][vd] Container reported FPS: 24.000000
[   0.159][v][vd] Codec list:
[   0.159][v][vd]     h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.159][v][vd]     h264_qsv (h264) - H264 video (Intel Quick Sync Video acceleration)
[   0.159][v][vd]     h264_cuvid (h264) - Nvidia CUVID H264 decoder
[   0.159][v][vd] Opening decoder h264
[   0.159][w][vd] Unsupported hwdec: nvdec=copy
[   0.159][v][vd] No hardware decoding available for this codec.
[   0.159][v][vd] Using software decoding.
[   0.159][v][vd] Detected 8 logical cores.
[   0.159][v][vd] Requesting 9 threads for decoding.
[   0.164][d][ffmpeg/video] h264: Reinit context to 1920x800, pix_fmt: yuv420p
[   0.164][d][vd] DR parameter change to 1920x802 yuv420p align=64
[   0.164][d][vd] Allocating new DR image...
[   0.164][d][vd] ...failed..
[   0.164][v][vd] DR failed - disabling.
[   0.167][v][vd] Selected codec: h264 (H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10)
[   0.167][v][user_filter_wrapper] Setting option 'file' = '~~/smoothing.vpy' (flags = 0)
[   0.167][v][user_filter_wrapper] Setting option 'buffered-frames' = '4' (flags = 0)
[   0.167][v][user_filter_wrapper] Setting option 'concurrent-frames' = '32' (flags = 0)
[   0.167][d][global] config path: 'smoothing.vpy' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/smoothing.vpy'
[   0.167][d][global] config path: 'smoothing.vpy' -> 'D:/ProgramFiles/git/mpv-x86_64/smoothing.vpy'
[   0.167][d][global] user path: '~~/smoothing.vpy' -> 'D:/ProgramFiles/git/mpv-x86_64/smoothing.vpy'
[   0.167][v][vapoursynth] using 32 concurrent requests.
[   0.238][v][vf] User filter list:
[   0.238][v][vf]   vapoursynth (vapoursynth.00)
[   0.239][v][ad] Codec list:
[   0.239][v][ad]     eac3 - ATSC A/52B (AC-3, E-AC-3)
[   0.239][v][ad] Opening decoder eac3
[   0.239][v][ad] Requesting 1 threads for decoding.
[   0.239][v][ad] Selected codec: eac3 (ATSC A/52B (AC-3, E-AC-3))
[   0.239][v][af] User filter list:
[   0.239][v][af]   (empty)
[   0.240][d][global] config path: 'fonts' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts'
[   0.240][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts'
[   0.240][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts'
[   0.240][d][sub/ass] ASS library version: 0x1600000 (runtime 0x1600000)
[   0.240][v][sub/ass] libass API version: 0x1600000
[   0.240][v][sub/ass] libass source: commit: a2b39cde4ecb74d5e6fccab4a5f7d8ad52b2b1a4
[   0.241][v][sub/ass] Shaper: FriBidi 1.0.12 (SIMPLE) HarfBuzz-ng 4.4.1 (COMPLEX)
[   0.241][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/subfont.ttf'
[   0.242][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/subfont.ttf'
[   0.242][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/subfont.ttf'
[   0.242][d][global] config path: 'fonts.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts.conf'
[   0.242][d][global] config path: 'fonts.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts.conf'
[   0.242][d][global] config path: 'fonts.conf' -> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts.conf'
[   0.242][v][sub/ass] Setting up fonts...
[   0.243][v][sub/ass] Using font provider directwrite (with GDI)
[   0.243][v][sub/ass] Done.
[   0.243][v][cplayer] Starting playback...
[   0.243][d][ffmpeg/video] h264: Reinit context to 1920x800, pix_fmt: yuv420p
[   0.243][d][mkv] stream 1: resize index to 128
[   0.243][d][osc] osc_init 
[   0.251][d][mkv] stream 0: resize index to 128
[   0.259][v][vd] Using software decoding.
[   0.259][v][vd] Decoder format: 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/auto CL=mpeg2/4/h264
[   0.259][v][vd] Using container aspect ratio.
[   0.259][v][vf] [in] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.259][v][vf] [userdeint] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.259][v][vf] [userdeint] (disabled)
[   0.259][v][vf] [vapoursynth] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.260][d][vapoursynth] initializing...
[   0.268][w][vapoursynth] Frame requested during init! This is unsupported.
[   0.268][w][vapoursynth] Returning black dummy frame with 0 duration.
[   0.277][w][vapoursynth] Frame requested during init! This is unsupported.
[   0.277][w][vapoursynth] Returning black dummy frame with 0 duration.
[   0.285][d][vapoursynth] initialized.
[   0.289][v][vf] [autorotate] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.290][v][vf] [autorotate] (disabled)
[   0.290][v][vf] [convert] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.290][v][vf] [convert] (disabled)
[   0.290][v][vf] [out] 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.373][d][mkv] stream 2: resize index to 128
[   0.561][i][cplayer] VO: [gpu] 1920x800 yuv420p
[   0.561][v][cplayer] VO: Description: Shader-based GPU Renderer
[   0.561][v][vo/gpu] reconfig to 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.561][d][vo/gpu] max content size: 1904x993
[   0.561][d][vo/gpu] monitor size: 1920x1080
[   0.561][v][vo/gpu/win32] save window bounds: 0:127:1920:800
[   0.561][v][vo/gpu/win32] reset window bounds: 0:0:1920:1080
[   0.561][d][vo/gpu/win32] move window: 0:0
[   0.561][v][vo/gpu/win32] resize window: 1920:1080
[   0.668][v][vo/gpu/win32] resize window: 1920:1080
[   0.668][d][vo/gpu/win32] move window: 0:0
[   0.677][v][vo/gpu] Resize: 1920x800
[   0.677][v][vo/gpu] Window size: 1920x800 (Borders: l=0 t=0 r=0 b=0)
[   0.677][v][vo/gpu] Video source: 1920x800 (1:1)
[   0.677][v][vo/gpu] Video display: (0, 0) 1920x800 -> (0, 0) 1920x800
[   0.677][v][vo/gpu] Video scale: 1.000000/1.000000
[   0.677][v][vo/gpu] OSD borders: l=0 t=0 r=0 b=0
[   0.677][v][vo/gpu] Video borders: l=0 t=0 r=0 b=0
[   0.677][v][vo/gpu] Reported display depth: 8
[   0.677][v][vo/gpu] Texture for plane 0: 1920x800
[   0.677][v][vo/gpu] Texture for plane 1: 960x400
[   0.677][v][vo/gpu] Texture for plane 2: 960x400
[   0.678][v][vo/gpu] Testing FBO format rgba16hf
[   0.678][d][vo/gpu] Resizing texture: 16x16
[   0.678][v][vo/gpu] Using FBO format rgba16hf.
[   0.685][v][vo/gpu] Resize: 1920x1080
[   0.686][v][vo/gpu] Window size: 1920x1080 (Borders: l=0 t=0 r=0 b=0)
[   0.686][v][vo/gpu] Video source: 1920x800 (1:1)
[   0.686][v][vo/gpu] Video display: (0, 0) 1920x800 -> (0, 140) 1920x800
[   0.686][v][vo/gpu] Video scale: 1.000000/1.000000
[   0.686][v][vo/gpu] OSD borders: l=0 t=140 r=0 b=140
[   0.686][v][vo/gpu] Video borders: l=0 t=140 r=0 b=140
[   0.686][v][vo/gpu] Reported display depth: 8
[   0.688][d][vo/gpu] Resizing texture: 960x400
[   0.853][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.853][d][mkv] stream 1: resize index to 256
[   0.856][v][vo/gpu/d3d11] Compiled a vertex shader in 166756us
[   0.856][v][vo/gpu/d3d11] shaderc: 163495us, SPIRV-Cross: 731us, D3DCompile: 2530us
[   0.856][d][vo/gpu/d3d11] GLSL source:
[   0.856][d][vo/gpu/d3d11] [  1] #version 450
[   0.856][d][vo/gpu/d3d11] [  2] #define tex1D texture
[   0.856][d][vo/gpu/d3d11] [  3] #define tex3D texture
[   0.856][d][vo/gpu/d3d11] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.856][d][vo/gpu/d3d11] [  5] layout(location=0) in vec2 vertex_position;
[   0.856][d][vo/gpu/d3d11] [  6] layout(location=1) in vec2 vertex_texcoord0;
[   0.856][d][vo/gpu/d3d11] [  7] layout(location=1) out vec2 texcoord0;
[   0.856][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 vertex_texcoord1;
[   0.856][d][vo/gpu/d3d11] [  9] layout(location=2) out vec2 texcoord1;
[   0.856][d][vo/gpu/d3d11] [ 10] void main() {
[   0.856][d][vo/gpu/d3d11] [ 11] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.856][d][vo/gpu/d3d11] [ 12] texcoord0 = vertex_texcoord0;
[   0.856][d][vo/gpu/d3d11] [ 13] texcoord1 = vertex_texcoord1;
[   0.856][d][vo/gpu/d3d11] [ 14] }
[   0.856][d][vo/gpu/d3d11] HLSL source:
[   0.856][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   0.856][d][vo/gpu/d3d11] [  2] static float2 _18;
[   0.856][d][vo/gpu/d3d11] [  3] static float2 _27;
[   0.856][d][vo/gpu/d3d11] [  4] static float2 _28;
[   0.856][d][vo/gpu/d3d11] [  5] static float2 _30;
[   0.856][d][vo/gpu/d3d11] [  6] static float2 _31;
[   0.856][d][vo/gpu/d3d11] [  7] 
[   0.856][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   0.856][d][vo/gpu/d3d11] [  9] {
[   0.856][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   0.856][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   0.856][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   0.856][d][vo/gpu/d3d11] [ 13] };
[   0.856][d][vo/gpu/d3d11] [ 14] 
[   0.856][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   0.856][d][vo/gpu/d3d11] [ 16] {
[   0.856][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   0.856][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   0.856][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   0.856][d][vo/gpu/d3d11] [ 20] };
[   0.856][d][vo/gpu/d3d11] [ 21] 
[   0.856][d][vo/gpu/d3d11] [ 22] void vert_main()
[   0.856][d][vo/gpu/d3d11] [ 23] {
[   0.856][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   0.856][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   0.856][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   0.856][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   0.856][d][vo/gpu/d3d11] [ 28] }
[   0.856][d][vo/gpu/d3d11] [ 29] 
[   0.856][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.856][d][vo/gpu/d3d11] [ 31] {
[   0.856][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   0.856][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   0.856][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   0.856][d][vo/gpu/d3d11] [ 35]     vert_main();
[   0.856][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   0.856][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   0.856][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   0.856][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   0.856][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   0.856][d][vo/gpu/d3d11] [ 41] }
[   0.860][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.864][v][vo/gpu/d3d11] Compiled a fragment shader in 7298us
[   0.864][v][vo/gpu/d3d11] shaderc: 4313us, SPIRV-Cross: 222us, D3DCompile: 2763us
[   0.864][d][vo/gpu/d3d11] GLSL source:
[   0.864][d][vo/gpu/d3d11] [  1] #version 450
[   0.864][d][vo/gpu/d3d11] [  2] #define tex1D texture
[   0.864][d][vo/gpu/d3d11] [  3] #define tex3D texture
[   0.864][d][vo/gpu/d3d11] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.864][d][vo/gpu/d3d11] [  5] layout(location=0) out vec4 out_color;
[   0.864][d][vo/gpu/d3d11] [  6] layout(location=1) in vec2 texcoord0;
[   0.864][d][vo/gpu/d3d11] [  7] layout(location=2) in vec2 texcoord1;
[   0.864][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   0.864][d][vo/gpu/d3d11] [  9] layout(offset=0) vec2 texture_size0;
[   0.864][d][vo/gpu/d3d11] [ 10] layout(offset=16) mat2 texture_rot0;
[   0.864][d][vo/gpu/d3d11] [ 11] layout(offset=48) vec2 texture_off0;
[   0.864][d][vo/gpu/d3d11] [ 12] layout(offset=56) vec2 pixel_size0;
[   0.864][d][vo/gpu/d3d11] [ 13] layout(offset=64) vec2 texture_size1;
[   0.864][d][vo/gpu/d3d11] [ 14] layout(offset=80) mat2 texture_rot1;
[   0.864][d][vo/gpu/d3d11] [ 15] layout(offset=112) vec2 texture_off1;
[   0.864][d][vo/gpu/d3d11] [ 16] layout(offset=120) vec2 pixel_size1;
[   0.864][d][vo/gpu/d3d11] [ 17] };
[   0.864][d][vo/gpu/d3d11] [ 18] layout(binding=0) uniform sampler2D texture0;
[   0.864][d][vo/gpu/d3d11] [ 19] layout(binding=1) uniform sampler2D texture1;
[   0.864][d][vo/gpu/d3d11] [ 20] void main() {
[   0.864][d][vo/gpu/d3d11] [ 21] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.864][d][vo/gpu/d3d11] [ 22] // merging plane 1 ...
[   0.864][d][vo/gpu/d3d11] [ 23] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   0.864][d][vo/gpu/d3d11] [ 24] // merging plane 2 ... into 1
[   0.864][d][vo/gpu/d3d11] [ 25] color.g = 1.000000 * vec4(texture(texture1, texcoord1)).r;
[   0.864][d][vo/gpu/d3d11] [ 26] out_color = color;
[   0.864][d][vo/gpu/d3d11] [ 27] }
[   0.864][d][vo/gpu/d3d11] HLSL source:
[   0.864][d][vo/gpu/d3d11] [  1] Texture2D<float4> _16 : register(t0);
[   0.864][d][vo/gpu/d3d11] [  2] SamplerState __16_sampler : register(s0);
[   0.864][d][vo/gpu/d3d11] [  3] Texture2D<float4> _34 : register(t1);
[   0.864][d][vo/gpu/d3d11] [  4] SamplerState __34_sampler : register(s1);
[   0.864][d][vo/gpu/d3d11] [  5] 
[   0.864][d][vo/gpu/d3d11] [  6] static float2 _20;
[   0.864][d][vo/gpu/d3d11] [  7] static float2 _36;
[   0.864][d][vo/gpu/d3d11] [  8] static float4 _49;
[   0.864][d][vo/gpu/d3d11] [  9] 
[   0.864][d][vo/gpu/d3d11] [ 10] struct SPIRV_Cross_Input
[   0.864][d][vo/gpu/d3d11] [ 11] {
[   0.864][d][vo/gpu/d3d11] [ 12]     float2 _20 : TEXCOORD1;
[   0.864][d][vo/gpu/d3d11] [ 13]     float2 _36 : TEXCOORD2;
[   0.864][d][vo/gpu/d3d11] [ 14] };
[   0.864][d][vo/gpu/d3d11] [ 15] 
[   0.864][d][vo/gpu/d3d11] [ 16] struct SPIRV_Cross_Output
[   0.864][d][vo/gpu/d3d11] [ 17] {
[   0.864][d][vo/gpu/d3d11] [ 18]     float4 _49 : SV_Target0;
[   0.864][d][vo/gpu/d3d11] [ 19] };
[   0.864][d][vo/gpu/d3d11] [ 20] 
[   0.864][d][vo/gpu/d3d11] [ 21] void frag_main()
[   0.864][d][vo/gpu/d3d11] [ 22] {
[   0.864][d][vo/gpu/d3d11] [ 23]     float4 _56 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   0.864][d][vo/gpu/d3d11] [ 24]     _56.x = _16.Sample(__16_sampler, _20).x;
[   0.864][d][vo/gpu/d3d11] [ 25]     _56.y = _34.Sample(__34_sampler, _36).x;
[   0.864][d][vo/gpu/d3d11] [ 26]     _49 = _56;
[   0.864][d][vo/gpu/d3d11] [ 27] }
[   0.864][d][vo/gpu/d3d11] [ 28] 
[   0.864][d][vo/gpu/d3d11] [ 29] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.864][d][vo/gpu/d3d11] [ 30] {
[   0.864][d][vo/gpu/d3d11] [ 31]     _20 = stage_input._20;
[   0.864][d][vo/gpu/d3d11] [ 32]     _36 = stage_input._36;
[   0.864][d][vo/gpu/d3d11] [ 33]     frag_main();
[   0.864][d][vo/gpu/d3d11] [ 34]     SPIRV_Cross_Output stage_output;
[   0.864][d][vo/gpu/d3d11] [ 35]     stage_output._49 = _49;
[   0.864][d][vo/gpu/d3d11] [ 36]     return stage_output;
[   0.864][d][vo/gpu/d3d11] [ 37] }
[   0.865][d][vo/gpu] Resizing texture: 1920x800
[   0.952][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.169][v][vo/gpu/d3d11] Compiled a compute shader in 302692us
[   1.169][v][vo/gpu/d3d11] shaderc: 85779us, SPIRV-Cross: 6312us, D3DCompile: 210601us
[   1.169][d][vo/gpu/d3d11] GLSL source:
[   1.169][d][vo/gpu/d3d11] [  1] #version 450
[   1.169][d][vo/gpu/d3d11] [  2] #extension GL_ARB_compute_shader : enable
[   1.169][d][vo/gpu/d3d11] [  3] #extension GL_ARB_shader_image_load_store : enable
[   1.169][d][vo/gpu/d3d11] [  4] #define tex1D texture
[   1.169][d][vo/gpu/d3d11] [  5] #define tex3D texture
[   1.169][d][vo/gpu/d3d11] [  6] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.169][d][vo/gpu/d3d11] [  7] layout(std140, binding=0) uniform UBO {
[   1.169][d][vo/gpu/d3d11] [  8] layout(offset=0) vec2 texture_size0;
[   1.169][d][vo/gpu/d3d11] [  9] layout(offset=16) mat2 texture_rot0;
[   1.169][d][vo/gpu/d3d11] [ 10] layout(offset=48) vec2 texture_off0;
[   1.169][d][vo/gpu/d3d11] [ 11] layout(offset=56) vec2 pixel_size0;
[   1.169][d][vo/gpu/d3d11] [ 12] layout(offset=64) vec2 out_scale;
[   1.169][d][vo/gpu/d3d11] [ 13] };
[   1.169][d][vo/gpu/d3d11] [ 14] layout(binding=0) uniform sampler1D lut;
[   1.169][d][vo/gpu/d3d11] [ 15] layout(binding=0, rgba16f) uniform restrict writeonly image2D out_image;
[   1.169][d][vo/gpu/d3d11] [ 16] layout(binding=1) uniform sampler2D texture0;
[   1.169][d][vo/gpu/d3d11] [ 17] layout (local_size_x = 32, local_size_y = 8) in;
[   1.169][d][vo/gpu/d3d11] [ 18] #define outcoord(id) (out_scale * (vec2(id) + vec2(0.5)))
[   1.169][d][vo/gpu/d3d11] [ 19] #define texmap0(id) (texture_rot0 * outcoord(id) + pixel_size0 * texture_off0)
[   1.169][d][vo/gpu/d3d11] [ 20] #define texcoord0 texmap0(gl_GlobalInvocationID)
[   1.169][d][vo/gpu/d3d11] [ 21] #define gl_NumWorkGroups uvec3(60, 100, 1)
[   1.169][d][vo/gpu/d3d11] [ 22] shared float in0[288];
[   1.169][d][vo/gpu/d3d11] [ 23] shared float in1[288];
[   1.169][d][vo/gpu/d3d11] [ 24] void main() {
[   1.169][d][vo/gpu/d3d11] [ 25] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.169][d][vo/gpu/d3d11] [ 26] // upscaling plane 1
[   1.169][d][vo/gpu/d3d11] [ 27] #undef tex
[   1.169][d][vo/gpu/d3d11] [ 28] #undef texmap
[   1.169][d][vo/gpu/d3d11] [ 29] #define tex texture0
[   1.169][d][vo/gpu/d3d11] [ 30] #define texmap texmap0
[   1.169][d][vo/gpu/d3d11] [ 31] vec2 pos = texcoord0;
[   1.169][d][vo/gpu/d3d11] [ 32] vec2 size = texture_size0;
[   1.169][d][vo/gpu/d3d11] [ 33] vec2 pt = pixel_size0;
[   1.169][d][vo/gpu/d3d11] [ 34] color = vec4(0.0);
[   1.169][d][vo/gpu/d3d11] [ 35] {
[   1.169][d][vo/gpu/d3d11] [ 36] vec2 wpos = texmap(gl_WorkGroupID * gl_WorkGroupSize);
[   1.169][d][vo/gpu/d3d11] [ 37] vec2 wbase = wpos - pt * fract(wpos * size - vec2(0.5));
[   1.169][d][vo/gpu/d3d11] [ 38] vec2 fcoord = fract(pos * size - vec2(0.5));
[   1.169][d][vo/gpu/d3d11] [ 39] vec2 base = pos - pt * fcoord;
[   1.169][d][vo/gpu/d3d11] [ 40] ivec2 rel = ivec2(round((base - wbase) * size));
[   1.169][d][vo/gpu/d3d11] [ 41] int idx;
[   1.169][d][vo/gpu/d3d11] [ 42] float w, d, wsum = 0.0;
[   1.169][d][vo/gpu/d3d11] [ 43] vec4 c;
[   1.169][d][vo/gpu/d3d11] [ 44] for (int y = int(gl_LocalInvocationID.y); y < 12; y += 8) {
[   1.169][d][vo/gpu/d3d11] [ 45] for (int x = int(gl_LocalInvocationID.x); x < 24; x += 32) {
[   1.169][d][vo/gpu/d3d11] [ 46] c = texture(tex, wbase + pt * vec2(x - 3, y - 3));
[   1.169][d][vo/gpu/d3d11] [ 47] in0[24 * y + x] = c[0];
[   1.169][d][vo/gpu/d3d11] [ 48] in1[24 * y + x] = c[1];
[   1.169][d][vo/gpu/d3d11] [ 49] }}
[   1.169][d][vo/gpu/d3d11] [ 50] groupMemoryBarrier();
[   1.169][d][vo/gpu/d3d11] [ 51] barrier();
[   1.169][d][vo/gpu/d3d11] [ 52] // scaler samples
[   1.169][d][vo/gpu/d3d11] [ 53] idx = 24 * rel.y + rel.x + 0;
[   1.169][d][vo/gpu/d3d11] [ 54] idx = 24 * rel.y + rel.x + 1;
[   1.169][d][vo/gpu/d3d11] [ 55] idx = 24 * rel.y + rel.x + 2;
[   1.169][d][vo/gpu/d3d11] [ 56] idx = 24 * rel.y + rel.x + 3;
[   1.169][d][vo/gpu/d3d11] [ 57] d = length(vec2(0.0, -3.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [ 58] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [ 59] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [ 60] wsum += w;
[   1.169][d][vo/gpu/d3d11] [ 61] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [ 62] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [ 63] }
[   1.169][d][vo/gpu/d3d11] [ 64] idx = 24 * rel.y + rel.x + 4;
[   1.169][d][vo/gpu/d3d11] [ 65] d = length(vec2(1.0, -3.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [ 66] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [ 67] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [ 68] wsum += w;
[   1.169][d][vo/gpu/d3d11] [ 69] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [ 70] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [ 71] }
[   1.169][d][vo/gpu/d3d11] [ 72] idx = 24 * rel.y + rel.x + 5;
[   1.169][d][vo/gpu/d3d11] [ 73] idx = 24 * rel.y + rel.x + 6;
[   1.169][d][vo/gpu/d3d11] [ 74] idx = 24 * rel.y + rel.x + 7;
[   1.169][d][vo/gpu/d3d11] [ 75] idx = 24 * rel.y + rel.x + 24;
[   1.169][d][vo/gpu/d3d11] [ 76] idx = 24 * rel.y + rel.x + 25;
[   1.169][d][vo/gpu/d3d11] [ 77] d = length(vec2(-2.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [ 78] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [ 79] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [ 80] wsum += w;
[   1.169][d][vo/gpu/d3d11] [ 81] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [ 82] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [ 83] }
[   1.169][d][vo/gpu/d3d11] [ 84] idx = 24 * rel.y + rel.x + 26;
[   1.169][d][vo/gpu/d3d11] [ 85] d = length(vec2(-1.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [ 86] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [ 87] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [ 88] wsum += w;
[   1.169][d][vo/gpu/d3d11] [ 89] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [ 90] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [ 91] }
[   1.169][d][vo/gpu/d3d11] [ 92] idx = 24 * rel.y + rel.x + 27;
[   1.169][d][vo/gpu/d3d11] [ 93] d = length(vec2(0.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [ 94] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [ 95] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [ 96] wsum += w;
[   1.169][d][vo/gpu/d3d11] [ 97] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [ 98] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [ 99] }
[   1.169][d][vo/gpu/d3d11] [100] idx = 24 * rel.y + rel.x + 28;
[   1.169][d][vo/gpu/d3d11] [101] d = length(vec2(1.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [102] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [103] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [104] wsum += w;
[   1.169][d][vo/gpu/d3d11] [105] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [106] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [107] }
[   1.169][d][vo/gpu/d3d11] [108] idx = 24 * rel.y + rel.x + 29;
[   1.169][d][vo/gpu/d3d11] [109] d = length(vec2(2.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [110] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [111] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [112] wsum += w;
[   1.169][d][vo/gpu/d3d11] [113] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [114] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [115] }
[   1.169][d][vo/gpu/d3d11] [116] idx = 24 * rel.y + rel.x + 30;
[   1.169][d][vo/gpu/d3d11] [117] d = length(vec2(3.0, -2.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [118] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [119] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [120] wsum += w;
[   1.169][d][vo/gpu/d3d11] [121] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [122] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [123] }
[   1.169][d][vo/gpu/d3d11] [124] idx = 24 * rel.y + rel.x + 31;
[   1.169][d][vo/gpu/d3d11] [125] idx = 24 * rel.y + rel.x + 48;
[   1.169][d][vo/gpu/d3d11] [126] idx = 24 * rel.y + rel.x + 49;
[   1.169][d][vo/gpu/d3d11] [127] d = length(vec2(-2.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [128] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [129] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [130] wsum += w;
[   1.169][d][vo/gpu/d3d11] [131] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [132] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [133] }
[   1.169][d][vo/gpu/d3d11] [134] idx = 24 * rel.y + rel.x + 50;
[   1.169][d][vo/gpu/d3d11] [135] d = length(vec2(-1.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [136] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [137] wsum += w;
[   1.169][d][vo/gpu/d3d11] [138] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [139] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [140] idx = 24 * rel.y + rel.x + 51;
[   1.169][d][vo/gpu/d3d11] [141] d = length(vec2(0.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [142] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [143] wsum += w;
[   1.169][d][vo/gpu/d3d11] [144] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [145] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [146] idx = 24 * rel.y + rel.x + 52;
[   1.169][d][vo/gpu/d3d11] [147] d = length(vec2(1.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [148] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [149] wsum += w;
[   1.169][d][vo/gpu/d3d11] [150] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [151] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [152] idx = 24 * rel.y + rel.x + 53;
[   1.169][d][vo/gpu/d3d11] [153] d = length(vec2(2.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [154] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [155] wsum += w;
[   1.169][d][vo/gpu/d3d11] [156] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [157] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [158] idx = 24 * rel.y + rel.x + 54;
[   1.169][d][vo/gpu/d3d11] [159] d = length(vec2(3.0, -1.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [160] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [161] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [162] wsum += w;
[   1.169][d][vo/gpu/d3d11] [163] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [164] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [165] }
[   1.169][d][vo/gpu/d3d11] [166] idx = 24 * rel.y + rel.x + 55;
[   1.169][d][vo/gpu/d3d11] [167] idx = 24 * rel.y + rel.x + 72;
[   1.169][d][vo/gpu/d3d11] [168] d = length(vec2(-3.0, 0.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [169] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [170] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [171] wsum += w;
[   1.169][d][vo/gpu/d3d11] [172] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [173] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [174] }
[   1.169][d][vo/gpu/d3d11] [175] idx = 24 * rel.y + rel.x + 73;
[   1.169][d][vo/gpu/d3d11] [176] d = length(vec2(-2.0, 0.0) - fcoord);
[   1.169][d][vo/gpu/d3d11] [177] if (d < 3.032708) {
[   1.169][d][vo/gpu/d3d11] [178] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.169][d][vo/gpu/d3d11] [179] wsum += w;
[   1.169][d][vo/gpu/d3d11] [180] color[0] += w * in0[idx];
[   1.169][d][vo/gpu/d3d11] [181] color[1] += w * in1[idx];
[   1.169][d][vo/gpu/d3d11] [182] }
[   1.169][d][vo/gpu/d3d11] [183] idx = 24 * rel.y + rel.x + 74;
[   1.170][d][vo/gpu/d3d11] [184] d = length(vec2(-1.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [185] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [186] wsum += w;
[   1.170][d][vo/gpu/d3d11] [187] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [188] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [189] idx = 24 * rel.y + rel.x + 75;
[   1.170][d][vo/gpu/d3d11] [190] d = length(vec2(0.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [191] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [192] wsum += w;
[   1.170][d][vo/gpu/d3d11] [193] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [194] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [195] idx = 24 * rel.y + rel.x + 76;
[   1.170][d][vo/gpu/d3d11] [196] d = length(vec2(1.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [197] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [198] wsum += w;
[   1.170][d][vo/gpu/d3d11] [199] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [200] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [201] idx = 24 * rel.y + rel.x + 77;
[   1.170][d][vo/gpu/d3d11] [202] d = length(vec2(2.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [203] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [204] wsum += w;
[   1.170][d][vo/gpu/d3d11] [205] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [206] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [207] idx = 24 * rel.y + rel.x + 78;
[   1.170][d][vo/gpu/d3d11] [208] d = length(vec2(3.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [209] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [210] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [211] wsum += w;
[   1.170][d][vo/gpu/d3d11] [212] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [213] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [214] }
[   1.170][d][vo/gpu/d3d11] [215] idx = 24 * rel.y + rel.x + 79;
[   1.170][d][vo/gpu/d3d11] [216] d = length(vec2(4.0, 0.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [217] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [218] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [219] wsum += w;
[   1.170][d][vo/gpu/d3d11] [220] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [221] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [222] }
[   1.170][d][vo/gpu/d3d11] [223] idx = 24 * rel.y + rel.x + 96;
[   1.170][d][vo/gpu/d3d11] [224] d = length(vec2(-3.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [225] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [226] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [227] wsum += w;
[   1.170][d][vo/gpu/d3d11] [228] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [229] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [230] }
[   1.170][d][vo/gpu/d3d11] [231] idx = 24 * rel.y + rel.x + 97;
[   1.170][d][vo/gpu/d3d11] [232] d = length(vec2(-2.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [233] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [234] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [235] wsum += w;
[   1.170][d][vo/gpu/d3d11] [236] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [237] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [238] }
[   1.170][d][vo/gpu/d3d11] [239] idx = 24 * rel.y + rel.x + 98;
[   1.170][d][vo/gpu/d3d11] [240] d = length(vec2(-1.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [241] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [242] wsum += w;
[   1.170][d][vo/gpu/d3d11] [243] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [244] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [245] idx = 24 * rel.y + rel.x + 99;
[   1.170][d][vo/gpu/d3d11] [246] d = length(vec2(0.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [247] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [248] wsum += w;
[   1.170][d][vo/gpu/d3d11] [249] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [250] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [251] idx = 24 * rel.y + rel.x + 100;
[   1.170][d][vo/gpu/d3d11] [252] d = length(vec2(1.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [253] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [254] wsum += w;
[   1.170][d][vo/gpu/d3d11] [255] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [256] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [257] idx = 24 * rel.y + rel.x + 101;
[   1.170][d][vo/gpu/d3d11] [258] d = length(vec2(2.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [259] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [260] wsum += w;
[   1.170][d][vo/gpu/d3d11] [261] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [262] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [263] idx = 24 * rel.y + rel.x + 102;
[   1.170][d][vo/gpu/d3d11] [264] d = length(vec2(3.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [265] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [266] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [267] wsum += w;
[   1.170][d][vo/gpu/d3d11] [268] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [269] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [270] }
[   1.170][d][vo/gpu/d3d11] [271] idx = 24 * rel.y + rel.x + 103;
[   1.170][d][vo/gpu/d3d11] [272] d = length(vec2(4.0, 1.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [273] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [274] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [275] wsum += w;
[   1.170][d][vo/gpu/d3d11] [276] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [277] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [278] }
[   1.170][d][vo/gpu/d3d11] [279] idx = 24 * rel.y + rel.x + 120;
[   1.170][d][vo/gpu/d3d11] [280] idx = 24 * rel.y + rel.x + 121;
[   1.170][d][vo/gpu/d3d11] [281] d = length(vec2(-2.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [282] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [283] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [284] wsum += w;
[   1.170][d][vo/gpu/d3d11] [285] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [286] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [287] }
[   1.170][d][vo/gpu/d3d11] [288] idx = 24 * rel.y + rel.x + 122;
[   1.170][d][vo/gpu/d3d11] [289] d = length(vec2(-1.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [290] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [291] wsum += w;
[   1.170][d][vo/gpu/d3d11] [292] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [293] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [294] idx = 24 * rel.y + rel.x + 123;
[   1.170][d][vo/gpu/d3d11] [295] d = length(vec2(0.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [296] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [297] wsum += w;
[   1.170][d][vo/gpu/d3d11] [298] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [299] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [300] idx = 24 * rel.y + rel.x + 124;
[   1.170][d][vo/gpu/d3d11] [301] d = length(vec2(1.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [302] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [303] wsum += w;
[   1.170][d][vo/gpu/d3d11] [304] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [305] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [306] idx = 24 * rel.y + rel.x + 125;
[   1.170][d][vo/gpu/d3d11] [307] d = length(vec2(2.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [308] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [309] wsum += w;
[   1.170][d][vo/gpu/d3d11] [310] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [311] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [312] idx = 24 * rel.y + rel.x + 126;
[   1.170][d][vo/gpu/d3d11] [313] d = length(vec2(3.0, 2.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [314] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [315] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [316] wsum += w;
[   1.170][d][vo/gpu/d3d11] [317] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [318] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [319] }
[   1.170][d][vo/gpu/d3d11] [320] idx = 24 * rel.y + rel.x + 127;
[   1.170][d][vo/gpu/d3d11] [321] idx = 24 * rel.y + rel.x + 144;
[   1.170][d][vo/gpu/d3d11] [322] idx = 24 * rel.y + rel.x + 145;
[   1.170][d][vo/gpu/d3d11] [323] d = length(vec2(-2.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [324] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [325] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [326] wsum += w;
[   1.170][d][vo/gpu/d3d11] [327] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [328] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [329] }
[   1.170][d][vo/gpu/d3d11] [330] idx = 24 * rel.y + rel.x + 146;
[   1.170][d][vo/gpu/d3d11] [331] d = length(vec2(-1.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [332] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [333] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [334] wsum += w;
[   1.170][d][vo/gpu/d3d11] [335] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [336] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [337] }
[   1.170][d][vo/gpu/d3d11] [338] idx = 24 * rel.y + rel.x + 147;
[   1.170][d][vo/gpu/d3d11] [339] d = length(vec2(0.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [340] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [341] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [342] wsum += w;
[   1.170][d][vo/gpu/d3d11] [343] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [344] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [345] }
[   1.170][d][vo/gpu/d3d11] [346] idx = 24 * rel.y + rel.x + 148;
[   1.170][d][vo/gpu/d3d11] [347] d = length(vec2(1.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [348] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [349] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [350] wsum += w;
[   1.170][d][vo/gpu/d3d11] [351] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [352] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [353] }
[   1.170][d][vo/gpu/d3d11] [354] idx = 24 * rel.y + rel.x + 149;
[   1.170][d][vo/gpu/d3d11] [355] d = length(vec2(2.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [356] if (d < 3.032708) {
[   1.170][d][vo/gpu/d3d11] [357] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.170][d][vo/gpu/d3d11] [358] wsum += w;
[   1.170][d][vo/gpu/d3d11] [359] color[0] += w * in0[idx];
[   1.170][d][vo/gpu/d3d11] [360] color[1] += w * in1[idx];
[   1.170][d][vo/gpu/d3d11] [361] }
[   1.170][d][vo/gpu/d3d11] [362] idx = 24 * rel.y + rel.x + 150;
[   1.170][d][vo/gpu/d3d11] [363] d = length(vec2(3.0, 3.0) - fcoord);
[   1.170][d][vo/gpu/d3d11] [364] if (d < 3.032708) {
[   1.171][d][vo/gpu/d3d11] [365] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.171][d][vo/gpu/d3d11] [366] wsum += w;
[   1.171][d][vo/gpu/d3d11] [367] color[0] += w * in0[idx];
[   1.171][d][vo/gpu/d3d11] [368] color[1] += w * in1[idx];
[   1.171][d][vo/gpu/d3d11] [369] }
[   1.171][d][vo/gpu/d3d11] [370] idx = 24 * rel.y + rel.x + 151;
[   1.171][d][vo/gpu/d3d11] [371] idx = 24 * rel.y + rel.x + 168;
[   1.171][d][vo/gpu/d3d11] [372] idx = 24 * rel.y + rel.x + 169;
[   1.171][d][vo/gpu/d3d11] [373] idx = 24 * rel.y + rel.x + 170;
[   1.171][d][vo/gpu/d3d11] [374] idx = 24 * rel.y + rel.x + 171;
[   1.171][d][vo/gpu/d3d11] [375] d = length(vec2(0.0, 4.0) - fcoord);
[   1.171][d][vo/gpu/d3d11] [376] if (d < 3.032708) {
[   1.171][d][vo/gpu/d3d11] [377] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.171][d][vo/gpu/d3d11] [378] wsum += w;
[   1.171][d][vo/gpu/d3d11] [379] color[0] += w * in0[idx];
[   1.171][d][vo/gpu/d3d11] [380] color[1] += w * in1[idx];
[   1.171][d][vo/gpu/d3d11] [381] }
[   1.171][d][vo/gpu/d3d11] [382] idx = 24 * rel.y + rel.x + 172;
[   1.171][d][vo/gpu/d3d11] [383] d = length(vec2(1.0, 4.0) - fcoord);
[   1.171][d][vo/gpu/d3d11] [384] if (d < 3.032708) {
[   1.171][d][vo/gpu/d3d11] [385] w = tex1D(lut, LUT_POS(d * 1.0/3.238315, 64.0)).r;
[   1.171][d][vo/gpu/d3d11] [386] wsum += w;
[   1.171][d][vo/gpu/d3d11] [387] color[0] += w * in0[idx];
[   1.171][d][vo/gpu/d3d11] [388] color[1] += w * in1[idx];
[   1.171][d][vo/gpu/d3d11] [389] }
[   1.171][d][vo/gpu/d3d11] [390] idx = 24 * rel.y + rel.x + 173;
[   1.171][d][vo/gpu/d3d11] [391] idx = 24 * rel.y + rel.x + 174;
[   1.171][d][vo/gpu/d3d11] [392] idx = 24 * rel.y + rel.x + 175;
[   1.171][d][vo/gpu/d3d11] [393] color = color / vec4(wsum);
[   1.171][d][vo/gpu/d3d11] [394] }
[   1.171][d][vo/gpu/d3d11] [395] color *= 1.000000;
[   1.171][d][vo/gpu/d3d11] [396] color.b = 0.000000;
[   1.171][d][vo/gpu/d3d11] [397] color.a = 1.000000;
[   1.171][d][vo/gpu/d3d11] [398] imageStore(out_image, ivec2(gl_GlobalInvocationID), color);
[   1.171][d][vo/gpu/d3d11] [399] }
[   1.171][d][vo/gpu/d3d11] HLSL source:
[   1.171][d][vo/gpu/d3d11] [  1] static const uint3 gl_WorkGroupSize = uint3(32u, 8u, 1u);
[   1.171][d][vo/gpu/d3d11] [  2] 
[   1.171][d][vo/gpu/d3d11] [  3] cbuffer _17_19 : register(b0)
[   1.171][d][vo/gpu/d3d11] [  4] {
[   1.171][d][vo/gpu/d3d11] [  5]     float2 _19_m0 : packoffset(c0);
[   1.171][d][vo/gpu/d3d11] [  6]     row_major float2x2 _19_m1 : packoffset(c1);
[   1.171][d][vo/gpu/d3d11] [  7]     float2 _19_m2 : packoffset(c3);
[   1.171][d][vo/gpu/d3d11] [  8]     float2 _19_m3 : packoffset(c3.z);
[   1.171][d][vo/gpu/d3d11] [  9]     float2 _19_m4 : packoffset(c4);
[   1.171][d][vo/gpu/d3d11] [ 10] };
[   1.171][d][vo/gpu/d3d11] [ 11] 
[   1.171][d][vo/gpu/d3d11] [ 12] Texture2D<float4> _152 : register(t1);
[   1.171][d][vo/gpu/d3d11] [ 13] SamplerState __152_sampler : register(s1);
[   1.171][d][vo/gpu/d3d11] [ 14] Texture1D<float4> _239 : register(t0);
[   1.171][d][vo/gpu/d3d11] [ 15] SamplerState __239_sampler : register(s0);
[   1.171][d][vo/gpu/d3d11] [ 16] RWTexture2D<float4> _2249 : register(u0);
[   1.171][d][vo/gpu/d3d11] [ 17] 
[   1.171][d][vo/gpu/d3d11] [ 18] static uint3 gl_WorkGroupID;
[   1.171][d][vo/gpu/d3d11] [ 19] static uint3 gl_LocalInvocationID;
[   1.171][d][vo/gpu/d3d11] [ 20] static uint3 gl_GlobalInvocationID;
[   1.171][d][vo/gpu/d3d11] [ 21] struct SPIRV_Cross_Input
[   1.171][d][vo/gpu/d3d11] [ 22] {
[   1.171][d][vo/gpu/d3d11] [ 23]     uint3 gl_WorkGroupID : SV_GroupID;
[   1.171][d][vo/gpu/d3d11] [ 24]     uint3 gl_LocalInvocationID : SV_GroupThreadID;
[   1.171][d][vo/gpu/d3d11] [ 25]     uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
[   1.171][d][vo/gpu/d3d11] [ 26] };
[   1.171][d][vo/gpu/d3d11] [ 27] 
[   1.171][d][vo/gpu/d3d11] [ 28] groupshared float _169[288];
[   1.171][d][vo/gpu/d3d11] [ 29] groupshared float _178[288];
[   1.171][d][vo/gpu/d3d11] [ 30] 
[   1.171][d][vo/gpu/d3d11] [ 31] void comp_main()
[   1.171][d][vo/gpu/d3d11] [ 32] {
[   1.171][d][vo/gpu/d3d11] [ 33]     float2 _51 = mad(_19_m3, _19_m2, mul(_19_m4 * (float2(float3(gl_GlobalInvocationID).xy) + 0.5f.xx), _19_m1));
[   1.171][d][vo/gpu/d3d11] [ 34]     float2 _84 = mad(_19_m3, _19_m2, mul(_19_m4 * (float2(float3(gl_WorkGroupID * gl_WorkGroupSize).xy) + 0.5f.xx), _19_m1));
[   1.171][d][vo/gpu/d3d11] [ 35]     float2 _2682 = -_19_m3;
[   1.171][d][vo/gpu/d3d11] [ 36]     float2 _94 = mad(_2682, frac(mad(_84, _19_m0, (-0.5f).xx)), _84);
[   1.171][d][vo/gpu/d3d11] [ 37]     float2 _100 = frac(mad(_51, _19_m0, (-0.5f).xx));
[   1.171][d][vo/gpu/d3d11] [ 38]     int2 _116 = int2(round((mad(_2682, _100, _51) - _94) * _19_m0));
[   1.171][d][vo/gpu/d3d11] [ 39]     int _2618;
[   1.171][d][vo/gpu/d3d11] [ 40]     _2618 = int(gl_LocalInvocationID.y);
[   1.171][d][vo/gpu/d3d11] [ 41]     for (; _2618 < 12; _2618 += 8)
[   1.171][d][vo/gpu/d3d11] [ 42]     {
[   1.171][d][vo/gpu/d3d11] [ 43]         int _139 = int(gl_LocalInvocationID.x);
[   1.171][d][vo/gpu/d3d11] [ 44]         for (int _2677 = _139; _2677 < 24; )
[   1.171][d][vo/gpu/d3d11] [ 45]         {
[   1.171][d][vo/gpu/d3d11] [ 46]             float4 _165 = _152.SampleLevel(__152_sampler, mad(_19_m3, float2(float(_2677 - 3), float(_2618 - 3)), _94), 0.0f);
[   1.171][d][vo/gpu/d3d11] [ 47]             int _173 = (24 * _2618) + _2677;
[   1.171][d][vo/gpu/d3d11] [ 48]             _169[_173] = _165.x;
[   1.171][d][vo/gpu/d3d11] [ 49]             _178[_173] = _165.y;
[   1.171][d][vo/gpu/d3d11] [ 50]             _2677 += 32;
[   1.171][d][vo/gpu/d3d11] [ 51]             continue;
[   1.171][d][vo/gpu/d3d11] [ 52]         }
[   1.171][d][vo/gpu/d3d11] [ 53]     }
[   1.171][d][vo/gpu/d3d11] [ 54]     AllMemoryBarrier();
[   1.171][d][vo/gpu/d3d11] [ 55]     GroupMemoryBarrierWithGroupSync();
[   1.171][d][vo/gpu/d3d11] [ 56]     int _222 = (24 * _116.y) + _116.x;
[   1.171][d][vo/gpu/d3d11] [ 57]     int _223 = _222 + 3;
[   1.171][d][vo/gpu/d3d11] [ 58]     float _229 = length(float2(0.0f, -3.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [ 59]     float _2621;
[   1.171][d][vo/gpu/d3d11] [ 60]     float4 _2622;
[   1.171][d][vo/gpu/d3d11] [ 61]     if (_229 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [ 62]     {
[   1.171][d][vo/gpu/d3d11] [ 63]         float4 _248 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _229 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [ 64]         float _249 = _248.x;
[   1.171][d][vo/gpu/d3d11] [ 65]         float4 _2264 = 0.0f.xxxx;
[   1.171][d][vo/gpu/d3d11] [ 66]         _2264.x = _249 * _169[_223];
[   1.171][d][vo/gpu/d3d11] [ 67]         _2264.y = _249 * _178[_223];
[   1.171][d][vo/gpu/d3d11] [ 68]         _2622 = _2264;
[   1.171][d][vo/gpu/d3d11] [ 69]         _2621 = _249;
[   1.171][d][vo/gpu/d3d11] [ 70]     }
[   1.171][d][vo/gpu/d3d11] [ 71]     else
[   1.171][d][vo/gpu/d3d11] [ 72]     {
[   1.171][d][vo/gpu/d3d11] [ 73]         _2622 = 0.0f.xxxx;
[   1.171][d][vo/gpu/d3d11] [ 74]         _2621 = 0.0f;
[   1.171][d][vo/gpu/d3d11] [ 75]     }
[   1.171][d][vo/gpu/d3d11] [ 76]     int _277 = _222 + 4;
[   1.171][d][vo/gpu/d3d11] [ 77]     float _281 = length(float2(1.0f, -3.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [ 78]     float _2623;
[   1.171][d][vo/gpu/d3d11] [ 79]     float4 _2624;
[   1.171][d][vo/gpu/d3d11] [ 80]     if (_281 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [ 81]     {
[   1.171][d][vo/gpu/d3d11] [ 82]         float4 _291 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _281 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [ 83]         float _292 = _291.x;
[   1.171][d][vo/gpu/d3d11] [ 84]         float4 _2272 = _2622;
[   1.171][d][vo/gpu/d3d11] [ 85]         _2272.x = mad(_292, _169[_277], _2622.x);
[   1.171][d][vo/gpu/d3d11] [ 86]         _2272.y = mad(_292, _178[_277], _2622.y);
[   1.171][d][vo/gpu/d3d11] [ 87]         _2624 = _2272;
[   1.171][d][vo/gpu/d3d11] [ 88]         _2623 = _2621 + _292;
[   1.171][d][vo/gpu/d3d11] [ 89]     }
[   1.171][d][vo/gpu/d3d11] [ 90]     else
[   1.171][d][vo/gpu/d3d11] [ 91]     {
[   1.171][d][vo/gpu/d3d11] [ 92]         _2624 = _2622;
[   1.171][d][vo/gpu/d3d11] [ 93]         _2623 = _2621;
[   1.171][d][vo/gpu/d3d11] [ 94]     }
[   1.171][d][vo/gpu/d3d11] [ 95]     int _352 = _222 + 25;
[   1.171][d][vo/gpu/d3d11] [ 96]     float _357 = length((-2.0f).xx - _100);
[   1.171][d][vo/gpu/d3d11] [ 97]     float _2625;
[   1.171][d][vo/gpu/d3d11] [ 98]     float4 _2626;
[   1.171][d][vo/gpu/d3d11] [ 99]     if (_357 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [100]     {
[   1.171][d][vo/gpu/d3d11] [101]         float4 _367 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _357 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [102]         float _368 = _367.x;
[   1.171][d][vo/gpu/d3d11] [103]         float4 _2280 = _2624;
[   1.171][d][vo/gpu/d3d11] [104]         _2280.x = mad(_368, _169[_352], _2624.x);
[   1.171][d][vo/gpu/d3d11] [105]         _2280.y = mad(_368, _178[_352], _2624.y);
[   1.171][d][vo/gpu/d3d11] [106]         _2626 = _2280;
[   1.171][d][vo/gpu/d3d11] [107]         _2625 = _2623 + _368;
[   1.171][d][vo/gpu/d3d11] [108]     }
[   1.171][d][vo/gpu/d3d11] [109]     else
[   1.171][d][vo/gpu/d3d11] [110]     {
[   1.171][d][vo/gpu/d3d11] [111]         _2626 = _2624;
[   1.171][d][vo/gpu/d3d11] [112]         _2625 = _2623;
[   1.171][d][vo/gpu/d3d11] [113]     }
[   1.171][d][vo/gpu/d3d11] [114]     int _397 = _222 + 26;
[   1.171][d][vo/gpu/d3d11] [115]     float _402 = length(float2(-1.0f, -2.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [116]     float _2627;
[   1.171][d][vo/gpu/d3d11] [117]     float4 _2628;
[   1.171][d][vo/gpu/d3d11] [118]     if (_402 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [119]     {
[   1.171][d][vo/gpu/d3d11] [120]         float4 _412 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _402 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [121]         float _413 = _412.x;
[   1.171][d][vo/gpu/d3d11] [122]         float4 _2288 = _2626;
[   1.171][d][vo/gpu/d3d11] [123]         _2288.x = mad(_413, _169[_397], _2626.x);
[   1.171][d][vo/gpu/d3d11] [124]         _2288.y = mad(_413, _178[_397], _2626.y);
[   1.171][d][vo/gpu/d3d11] [125]         _2628 = _2288;
[   1.171][d][vo/gpu/d3d11] [126]         _2627 = _2625 + _413;
[   1.171][d][vo/gpu/d3d11] [127]     }
[   1.171][d][vo/gpu/d3d11] [128]     else
[   1.171][d][vo/gpu/d3d11] [129]     {
[   1.171][d][vo/gpu/d3d11] [130]         _2628 = _2626;
[   1.171][d][vo/gpu/d3d11] [131]         _2627 = _2625;
[   1.171][d][vo/gpu/d3d11] [132]     }
[   1.171][d][vo/gpu/d3d11] [133]     int _442 = _222 + 27;
[   1.171][d][vo/gpu/d3d11] [134]     float _446 = length(float2(0.0f, -2.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [135]     float _2629;
[   1.171][d][vo/gpu/d3d11] [136]     float4 _2630;
[   1.171][d][vo/gpu/d3d11] [137]     if (_446 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [138]     {
[   1.171][d][vo/gpu/d3d11] [139]         float4 _456 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _446 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [140]         float _457 = _456.x;
[   1.171][d][vo/gpu/d3d11] [141]         float4 _2296 = _2628;
[   1.171][d][vo/gpu/d3d11] [142]         _2296.x = mad(_457, _169[_442], _2628.x);
[   1.171][d][vo/gpu/d3d11] [143]         _2296.y = mad(_457, _178[_442], _2628.y);
[   1.171][d][vo/gpu/d3d11] [144]         _2630 = _2296;
[   1.171][d][vo/gpu/d3d11] [145]         _2629 = _2627 + _457;
[   1.171][d][vo/gpu/d3d11] [146]     }
[   1.171][d][vo/gpu/d3d11] [147]     else
[   1.171][d][vo/gpu/d3d11] [148]     {
[   1.171][d][vo/gpu/d3d11] [149]         _2630 = _2628;
[   1.171][d][vo/gpu/d3d11] [150]         _2629 = _2627;
[   1.171][d][vo/gpu/d3d11] [151]     }
[   1.171][d][vo/gpu/d3d11] [152]     int _486 = _222 + 28;
[   1.171][d][vo/gpu/d3d11] [153]     float _490 = length(float2(1.0f, -2.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [154]     float _2631;
[   1.171][d][vo/gpu/d3d11] [155]     float4 _2632;
[   1.171][d][vo/gpu/d3d11] [156]     if (_490 < 3.0327079296112060546875f)
[   1.171][d][vo/gpu/d3d11] [157]     {
[   1.171][d][vo/gpu/d3d11] [158]         float4 _500 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _490 * 0.3088025748729705810546875f), 0.0f);
[   1.171][d][vo/gpu/d3d11] [159]         float _501 = _500.x;
[   1.171][d][vo/gpu/d3d11] [160]         float4 _2304 = _2630;
[   1.171][d][vo/gpu/d3d11] [161]         _2304.x = mad(_501, _169[_486], _2630.x);
[   1.171][d][vo/gpu/d3d11] [162]         _2304.y = mad(_501, _178[_486], _2630.y);
[   1.171][d][vo/gpu/d3d11] [163]         _2632 = _2304;
[   1.171][d][vo/gpu/d3d11] [164]         _2631 = _2629 + _501;
[   1.171][d][vo/gpu/d3d11] [165]     }
[   1.171][d][vo/gpu/d3d11] [166]     else
[   1.171][d][vo/gpu/d3d11] [167]     {
[   1.171][d][vo/gpu/d3d11] [168]         _2632 = _2630;
[   1.171][d][vo/gpu/d3d11] [169]         _2631 = _2629;
[   1.171][d][vo/gpu/d3d11] [170]     }
[   1.171][d][vo/gpu/d3d11] [171]     int _530 = _222 + 29;
[   1.171][d][vo/gpu/d3d11] [172]     float _535 = length(float2(2.0f, -2.0f) - _100);
[   1.171][d][vo/gpu/d3d11] [173]     float _2633;
[   1.171][d][vo/gpu/d3d11] [174]     float4 _2634;
[   1.171][d][vo/gpu/d3d11] [175]     if (_535 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [176]     {
[   1.172][d][vo/gpu/d3d11] [177]         float4 _545 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _535 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [178]         float _546 = _545.x;
[   1.172][d][vo/gpu/d3d11] [179]         float4 _2312 = _2632;
[   1.172][d][vo/gpu/d3d11] [180]         _2312.x = mad(_546, _169[_530], _2632.x);
[   1.172][d][vo/gpu/d3d11] [181]         _2312.y = mad(_546, _178[_530], _2632.y);
[   1.172][d][vo/gpu/d3d11] [182]         _2634 = _2312;
[   1.172][d][vo/gpu/d3d11] [183]         _2633 = _2631 + _546;
[   1.172][d][vo/gpu/d3d11] [184]     }
[   1.172][d][vo/gpu/d3d11] [185]     else
[   1.172][d][vo/gpu/d3d11] [186]     {
[   1.172][d][vo/gpu/d3d11] [187]         _2634 = _2632;
[   1.172][d][vo/gpu/d3d11] [188]         _2633 = _2631;
[   1.172][d][vo/gpu/d3d11] [189]     }
[   1.172][d][vo/gpu/d3d11] [190]     int _575 = _222 + 30;
[   1.172][d][vo/gpu/d3d11] [191]     float _580 = length(float2(3.0f, -2.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [192]     float _2635;
[   1.172][d][vo/gpu/d3d11] [193]     float4 _2636;
[   1.172][d][vo/gpu/d3d11] [194]     if (_580 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [195]     {
[   1.172][d][vo/gpu/d3d11] [196]         float4 _590 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _580 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [197]         float _591 = _590.x;
[   1.172][d][vo/gpu/d3d11] [198]         float4 _2320 = _2634;
[   1.172][d][vo/gpu/d3d11] [199]         _2320.x = mad(_591, _169[_575], _2634.x);
[   1.172][d][vo/gpu/d3d11] [200]         _2320.y = mad(_591, _178[_575], _2634.y);
[   1.172][d][vo/gpu/d3d11] [201]         _2636 = _2320;
[   1.172][d][vo/gpu/d3d11] [202]         _2635 = _2633 + _591;
[   1.172][d][vo/gpu/d3d11] [203]     }
[   1.172][d][vo/gpu/d3d11] [204]     else
[   1.172][d][vo/gpu/d3d11] [205]     {
[   1.172][d][vo/gpu/d3d11] [206]         _2636 = _2634;
[   1.172][d][vo/gpu/d3d11] [207]         _2635 = _2633;
[   1.172][d][vo/gpu/d3d11] [208]     }
[   1.172][d][vo/gpu/d3d11] [209]     int _636 = _222 + 49;
[   1.172][d][vo/gpu/d3d11] [210]     float _640 = length(float2(-2.0f, -1.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [211]     float _2637;
[   1.172][d][vo/gpu/d3d11] [212]     float4 _2638;
[   1.172][d][vo/gpu/d3d11] [213]     if (_640 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [214]     {
[   1.172][d][vo/gpu/d3d11] [215]         float4 _650 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _640 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [216]         float _651 = _650.x;
[   1.172][d][vo/gpu/d3d11] [217]         float4 _2328 = _2636;
[   1.172][d][vo/gpu/d3d11] [218]         _2328.x = mad(_651, _169[_636], _2636.x);
[   1.172][d][vo/gpu/d3d11] [219]         _2328.y = mad(_651, _178[_636], _2636.y);
[   1.172][d][vo/gpu/d3d11] [220]         _2638 = _2328;
[   1.172][d][vo/gpu/d3d11] [221]         _2637 = _2635 + _651;
[   1.172][d][vo/gpu/d3d11] [222]     }
[   1.172][d][vo/gpu/d3d11] [223]     else
[   1.172][d][vo/gpu/d3d11] [224]     {
[   1.172][d][vo/gpu/d3d11] [225]         _2638 = _2636;
[   1.172][d][vo/gpu/d3d11] [226]         _2637 = _2635;
[   1.172][d][vo/gpu/d3d11] [227]     }
[   1.172][d][vo/gpu/d3d11] [228]     int _680 = _222 + 50;
[   1.172][d][vo/gpu/d3d11] [229]     float4 _690 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length((-1.0f).xx - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [230]     float _691 = _690.x;
[   1.172][d][vo/gpu/d3d11] [231]     int _720 = _222 + 51;
[   1.172][d][vo/gpu/d3d11] [232]     float4 _730 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(0.0f, -1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [233]     float _731 = _730.x;
[   1.172][d][vo/gpu/d3d11] [234]     int _760 = _222 + 52;
[   1.172][d][vo/gpu/d3d11] [235]     float4 _770 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(1.0f, -1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [236]     float _771 = _770.x;
[   1.172][d][vo/gpu/d3d11] [237]     int _800 = _222 + 53;
[   1.172][d][vo/gpu/d3d11] [238]     float4 _810 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(2.0f, -1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [239]     float _811 = _810.x;
[   1.172][d][vo/gpu/d3d11] [240]     float _814 = (((_2637 + _691) + _731) + _771) + _811;
[   1.172][d][vo/gpu/d3d11] [241]     float _822 = mad(_811, _169[_800], mad(_771, _169[_760], mad(_731, _169[_720], mad(_691, _169[_680], _2638.x))));
[   1.172][d][vo/gpu/d3d11] [242]     float4 _2360 = _2638;
[   1.172][d][vo/gpu/d3d11] [243]     _2360.x = _822;
[   1.172][d][vo/gpu/d3d11] [244]     float _831 = mad(_811, _178[_800], mad(_771, _178[_760], mad(_731, _178[_720], mad(_691, _178[_680], _2638.y))));
[   1.172][d][vo/gpu/d3d11] [245]     _2360.y = _831;
[   1.172][d][vo/gpu/d3d11] [246]     int _840 = _222 + 54;
[   1.172][d][vo/gpu/d3d11] [247]     float _844 = length(float2(3.0f, -1.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [248]     float _2639;
[   1.172][d][vo/gpu/d3d11] [249]     float4 _2640;
[   1.172][d][vo/gpu/d3d11] [250]     if (_844 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [251]     {
[   1.172][d][vo/gpu/d3d11] [252]         float4 _854 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _844 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [253]         float _855 = _854.x;
[   1.172][d][vo/gpu/d3d11] [254]         float4 _2368 = _2360;
[   1.172][d][vo/gpu/d3d11] [255]         _2368.x = mad(_855, _169[_840], _822);
[   1.172][d][vo/gpu/d3d11] [256]         _2368.y = mad(_855, _178[_840], _831);
[   1.172][d][vo/gpu/d3d11] [257]         _2640 = _2368;
[   1.172][d][vo/gpu/d3d11] [258]         _2639 = _814 + _855;
[   1.172][d][vo/gpu/d3d11] [259]     }
[   1.172][d][vo/gpu/d3d11] [260]     else
[   1.172][d][vo/gpu/d3d11] [261]     {
[   1.172][d][vo/gpu/d3d11] [262]         _2640 = _2360;
[   1.172][d][vo/gpu/d3d11] [263]         _2639 = _814;
[   1.172][d][vo/gpu/d3d11] [264]     }
[   1.172][d][vo/gpu/d3d11] [265]     int _892 = _222 + 72;
[   1.172][d][vo/gpu/d3d11] [266]     float _896 = length(float2(-3.0f, 0.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [267]     float _2641;
[   1.172][d][vo/gpu/d3d11] [268]     float4 _2642;
[   1.172][d][vo/gpu/d3d11] [269]     if (_896 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [270]     {
[   1.172][d][vo/gpu/d3d11] [271]         float4 _906 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _896 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [272]         float _907 = _906.x;
[   1.172][d][vo/gpu/d3d11] [273]         float4 _2376 = _2640;
[   1.172][d][vo/gpu/d3d11] [274]         _2376.x = mad(_907, _169[_892], _2640.x);
[   1.172][d][vo/gpu/d3d11] [275]         _2376.y = mad(_907, _178[_892], _2640.y);
[   1.172][d][vo/gpu/d3d11] [276]         _2642 = _2376;
[   1.172][d][vo/gpu/d3d11] [277]         _2641 = _2639 + _907;
[   1.172][d][vo/gpu/d3d11] [278]     }
[   1.172][d][vo/gpu/d3d11] [279]     else
[   1.172][d][vo/gpu/d3d11] [280]     {
[   1.172][d][vo/gpu/d3d11] [281]         _2642 = _2640;
[   1.172][d][vo/gpu/d3d11] [282]         _2641 = _2639;
[   1.172][d][vo/gpu/d3d11] [283]     }
[   1.172][d][vo/gpu/d3d11] [284]     int _936 = _222 + 73;
[   1.172][d][vo/gpu/d3d11] [285]     float _940 = length(float2(-2.0f, 0.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [286]     float _2643;
[   1.172][d][vo/gpu/d3d11] [287]     float4 _2644;
[   1.172][d][vo/gpu/d3d11] [288]     if (_940 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [289]     {
[   1.172][d][vo/gpu/d3d11] [290]         float4 _950 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _940 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [291]         float _951 = _950.x;
[   1.172][d][vo/gpu/d3d11] [292]         float4 _2384 = _2642;
[   1.172][d][vo/gpu/d3d11] [293]         _2384.x = mad(_951, _169[_936], _2642.x);
[   1.172][d][vo/gpu/d3d11] [294]         _2384.y = mad(_951, _178[_936], _2642.y);
[   1.172][d][vo/gpu/d3d11] [295]         _2644 = _2384;
[   1.172][d][vo/gpu/d3d11] [296]         _2643 = _2641 + _951;
[   1.172][d][vo/gpu/d3d11] [297]     }
[   1.172][d][vo/gpu/d3d11] [298]     else
[   1.172][d][vo/gpu/d3d11] [299]     {
[   1.172][d][vo/gpu/d3d11] [300]         _2644 = _2642;
[   1.172][d][vo/gpu/d3d11] [301]         _2643 = _2641;
[   1.172][d][vo/gpu/d3d11] [302]     }
[   1.172][d][vo/gpu/d3d11] [303]     int _980 = _222 + 74;
[   1.172][d][vo/gpu/d3d11] [304]     float4 _990 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(-1.0f, 0.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [305]     float _991 = _990.x;
[   1.172][d][vo/gpu/d3d11] [306]     int _1020 = _222 + 75;
[   1.172][d][vo/gpu/d3d11] [307]     float4 _1030 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(-_100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [308]     float _1031 = _1030.x;
[   1.172][d][vo/gpu/d3d11] [309]     int _1060 = _222 + 76;
[   1.172][d][vo/gpu/d3d11] [310]     float4 _1070 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(1.0f, 0.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [311]     float _1071 = _1070.x;
[   1.172][d][vo/gpu/d3d11] [312]     int _1100 = _222 + 77;
[   1.172][d][vo/gpu/d3d11] [313]     float4 _1110 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(2.0f, 0.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [314]     float _1111 = _1110.x;
[   1.172][d][vo/gpu/d3d11] [315]     float _1114 = (((_2643 + _991) + _1031) + _1071) + _1111;
[   1.172][d][vo/gpu/d3d11] [316]     float _1122 = mad(_1111, _169[_1100], mad(_1071, _169[_1060], mad(_1031, _169[_1020], mad(_991, _169[_980], _2644.x))));
[   1.172][d][vo/gpu/d3d11] [317]     float4 _2416 = _2644;
[   1.172][d][vo/gpu/d3d11] [318]     _2416.x = _1122;
[   1.172][d][vo/gpu/d3d11] [319]     float _1131 = mad(_1111, _178[_1100], mad(_1071, _178[_1060], mad(_1031, _178[_1020], mad(_991, _178[_980], _2644.y))));
[   1.172][d][vo/gpu/d3d11] [320]     _2416.y = _1131;
[   1.172][d][vo/gpu/d3d11] [321]     int _1140 = _222 + 78;
[   1.172][d][vo/gpu/d3d11] [322]     float _1144 = length(float2(3.0f, 0.0f) - _100);
[   1.172][d][vo/gpu/d3d11] [323]     float _2645;
[   1.172][d][vo/gpu/d3d11] [324]     float4 _2646;
[   1.172][d][vo/gpu/d3d11] [325]     if (_1144 < 3.0327079296112060546875f)
[   1.172][d][vo/gpu/d3d11] [326]     {
[   1.172][d][vo/gpu/d3d11] [327]         float4 _1154 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1144 * 0.3088025748729705810546875f), 0.0f);
[   1.172][d][vo/gpu/d3d11] [328]         float _1155 = _1154.x;
[   1.172][d][vo/gpu/d3d11] [329]         float4 _2424 = _2416;
[   1.172][d][vo/gpu/d3d11] [330]         _2424.x = mad(_1155, _169[_1140], _1122);
[   1.172][d][vo/gpu/d3d11] [331]         _2424.y = mad(_1155, _178[_1140], _1131);
[   1.172][d][vo/gpu/d3d11] [332]         _2646 = _2424;
[   1.173][d][vo/gpu/d3d11] [333]         _2645 = _1114 + _1155;
[   1.173][d][vo/gpu/d3d11] [334]     }
[   1.173][d][vo/gpu/d3d11] [335]     else
[   1.173][d][vo/gpu/d3d11] [336]     {
[   1.173][d][vo/gpu/d3d11] [337]         _2646 = _2416;
[   1.173][d][vo/gpu/d3d11] [338]         _2645 = _1114;
[   1.173][d][vo/gpu/d3d11] [339]     }
[   1.173][d][vo/gpu/d3d11] [340]     int _1184 = _222 + 79;
[   1.173][d][vo/gpu/d3d11] [341]     float _1189 = length(float2(4.0f, 0.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [342]     float _2647;
[   1.173][d][vo/gpu/d3d11] [343]     float4 _2648;
[   1.173][d][vo/gpu/d3d11] [344]     if (_1189 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [345]     {
[   1.173][d][vo/gpu/d3d11] [346]         float4 _1199 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1189 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [347]         float _1200 = _1199.x;
[   1.173][d][vo/gpu/d3d11] [348]         float4 _2432 = _2646;
[   1.173][d][vo/gpu/d3d11] [349]         _2432.x = mad(_1200, _169[_1184], _2646.x);
[   1.173][d][vo/gpu/d3d11] [350]         _2432.y = mad(_1200, _178[_1184], _2646.y);
[   1.173][d][vo/gpu/d3d11] [351]         _2648 = _2432;
[   1.173][d][vo/gpu/d3d11] [352]         _2647 = _2645 + _1200;
[   1.173][d][vo/gpu/d3d11] [353]     }
[   1.173][d][vo/gpu/d3d11] [354]     else
[   1.173][d][vo/gpu/d3d11] [355]     {
[   1.173][d][vo/gpu/d3d11] [356]         _2648 = _2646;
[   1.173][d][vo/gpu/d3d11] [357]         _2647 = _2645;
[   1.173][d][vo/gpu/d3d11] [358]     }
[   1.173][d][vo/gpu/d3d11] [359]     int _1229 = _222 + 96;
[   1.173][d][vo/gpu/d3d11] [360]     float _1233 = length(float2(-3.0f, 1.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [361]     float _2649;
[   1.173][d][vo/gpu/d3d11] [362]     float4 _2650;
[   1.173][d][vo/gpu/d3d11] [363]     if (_1233 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [364]     {
[   1.173][d][vo/gpu/d3d11] [365]         float4 _1243 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1233 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [366]         float _1244 = _1243.x;
[   1.173][d][vo/gpu/d3d11] [367]         float4 _2440 = _2648;
[   1.173][d][vo/gpu/d3d11] [368]         _2440.x = mad(_1244, _169[_1229], _2648.x);
[   1.173][d][vo/gpu/d3d11] [369]         _2440.y = mad(_1244, _178[_1229], _2648.y);
[   1.173][d][vo/gpu/d3d11] [370]         _2650 = _2440;
[   1.173][d][vo/gpu/d3d11] [371]         _2649 = _2647 + _1244;
[   1.173][d][vo/gpu/d3d11] [372]     }
[   1.173][d][vo/gpu/d3d11] [373]     else
[   1.173][d][vo/gpu/d3d11] [374]     {
[   1.173][d][vo/gpu/d3d11] [375]         _2650 = _2648;
[   1.173][d][vo/gpu/d3d11] [376]         _2649 = _2647;
[   1.173][d][vo/gpu/d3d11] [377]     }
[   1.173][d][vo/gpu/d3d11] [378]     int _1273 = _222 + 97;
[   1.173][d][vo/gpu/d3d11] [379]     float _1277 = length(float2(-2.0f, 1.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [380]     float _2651;
[   1.173][d][vo/gpu/d3d11] [381]     float4 _2652;
[   1.173][d][vo/gpu/d3d11] [382]     if (_1277 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [383]     {
[   1.173][d][vo/gpu/d3d11] [384]         float4 _1287 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1277 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [385]         float _1288 = _1287.x;
[   1.173][d][vo/gpu/d3d11] [386]         float4 _2448 = _2650;
[   1.173][d][vo/gpu/d3d11] [387]         _2448.x = mad(_1288, _169[_1273], _2650.x);
[   1.173][d][vo/gpu/d3d11] [388]         _2448.y = mad(_1288, _178[_1273], _2650.y);
[   1.173][d][vo/gpu/d3d11] [389]         _2652 = _2448;
[   1.173][d][vo/gpu/d3d11] [390]         _2651 = _2649 + _1288;
[   1.173][d][vo/gpu/d3d11] [391]     }
[   1.173][d][vo/gpu/d3d11] [392]     else
[   1.173][d][vo/gpu/d3d11] [393]     {
[   1.173][d][vo/gpu/d3d11] [394]         _2652 = _2650;
[   1.173][d][vo/gpu/d3d11] [395]         _2651 = _2649;
[   1.173][d][vo/gpu/d3d11] [396]     }
[   1.173][d][vo/gpu/d3d11] [397]     int _1317 = _222 + 98;
[   1.173][d][vo/gpu/d3d11] [398]     float4 _1327 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(-1.0f, 1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [399]     float _1328 = _1327.x;
[   1.173][d][vo/gpu/d3d11] [400]     int _1357 = _222 + 99;
[   1.173][d][vo/gpu/d3d11] [401]     float4 _1367 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(0.0f, 1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [402]     float _1368 = _1367.x;
[   1.173][d][vo/gpu/d3d11] [403]     int _1397 = _222 + 100;
[   1.173][d][vo/gpu/d3d11] [404]     float4 _1407 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(1.0f.xx - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [405]     float _1408 = _1407.x;
[   1.173][d][vo/gpu/d3d11] [406]     int _1437 = _222 + 101;
[   1.173][d][vo/gpu/d3d11] [407]     float4 _1447 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(2.0f, 1.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [408]     float _1448 = _1447.x;
[   1.173][d][vo/gpu/d3d11] [409]     float _1451 = (((_2651 + _1328) + _1368) + _1408) + _1448;
[   1.173][d][vo/gpu/d3d11] [410]     float _1459 = mad(_1448, _169[_1437], mad(_1408, _169[_1397], mad(_1368, _169[_1357], mad(_1328, _169[_1317], _2652.x))));
[   1.173][d][vo/gpu/d3d11] [411]     float4 _2480 = _2652;
[   1.173][d][vo/gpu/d3d11] [412]     _2480.x = _1459;
[   1.173][d][vo/gpu/d3d11] [413]     float _1468 = mad(_1448, _178[_1437], mad(_1408, _178[_1397], mad(_1368, _178[_1357], mad(_1328, _178[_1317], _2652.y))));
[   1.173][d][vo/gpu/d3d11] [414]     _2480.y = _1468;
[   1.173][d][vo/gpu/d3d11] [415]     int _1477 = _222 + 102;
[   1.173][d][vo/gpu/d3d11] [416]     float _1481 = length(float2(3.0f, 1.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [417]     float _2653;
[   1.173][d][vo/gpu/d3d11] [418]     float4 _2654;
[   1.173][d][vo/gpu/d3d11] [419]     if (_1481 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [420]     {
[   1.173][d][vo/gpu/d3d11] [421]         float4 _1491 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1481 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [422]         float _1492 = _1491.x;
[   1.173][d][vo/gpu/d3d11] [423]         float4 _2488 = _2480;
[   1.173][d][vo/gpu/d3d11] [424]         _2488.x = mad(_1492, _169[_1477], _1459);
[   1.173][d][vo/gpu/d3d11] [425]         _2488.y = mad(_1492, _178[_1477], _1468);
[   1.173][d][vo/gpu/d3d11] [426]         _2654 = _2488;
[   1.173][d][vo/gpu/d3d11] [427]         _2653 = _1451 + _1492;
[   1.173][d][vo/gpu/d3d11] [428]     }
[   1.173][d][vo/gpu/d3d11] [429]     else
[   1.173][d][vo/gpu/d3d11] [430]     {
[   1.173][d][vo/gpu/d3d11] [431]         _2654 = _2480;
[   1.173][d][vo/gpu/d3d11] [432]         _2653 = _1451;
[   1.173][d][vo/gpu/d3d11] [433]     }
[   1.173][d][vo/gpu/d3d11] [434]     int _1521 = _222 + 103;
[   1.173][d][vo/gpu/d3d11] [435]     float _1525 = length(float2(4.0f, 1.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [436]     float _2655;
[   1.173][d][vo/gpu/d3d11] [437]     float4 _2656;
[   1.173][d][vo/gpu/d3d11] [438]     if (_1525 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [439]     {
[   1.173][d][vo/gpu/d3d11] [440]         float4 _1535 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1525 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [441]         float _1536 = _1535.x;
[   1.173][d][vo/gpu/d3d11] [442]         float4 _2496 = _2654;
[   1.173][d][vo/gpu/d3d11] [443]         _2496.x = mad(_1536, _169[_1521], _2654.x);
[   1.173][d][vo/gpu/d3d11] [444]         _2496.y = mad(_1536, _178[_1521], _2654.y);
[   1.173][d][vo/gpu/d3d11] [445]         _2656 = _2496;
[   1.173][d][vo/gpu/d3d11] [446]         _2655 = _2653 + _1536;
[   1.173][d][vo/gpu/d3d11] [447]     }
[   1.173][d][vo/gpu/d3d11] [448]     else
[   1.173][d][vo/gpu/d3d11] [449]     {
[   1.173][d][vo/gpu/d3d11] [450]         _2656 = _2654;
[   1.173][d][vo/gpu/d3d11] [451]         _2655 = _2653;
[   1.173][d][vo/gpu/d3d11] [452]     }
[   1.173][d][vo/gpu/d3d11] [453]     int _1573 = _222 + 121;
[   1.173][d][vo/gpu/d3d11] [454]     float _1577 = length(float2(-2.0f, 2.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [455]     float _2657;
[   1.173][d][vo/gpu/d3d11] [456]     float4 _2658;
[   1.173][d][vo/gpu/d3d11] [457]     if (_1577 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [458]     {
[   1.173][d][vo/gpu/d3d11] [459]         float4 _1587 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1577 * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [460]         float _1588 = _1587.x;
[   1.173][d][vo/gpu/d3d11] [461]         float4 _2504 = _2656;
[   1.173][d][vo/gpu/d3d11] [462]         _2504.x = mad(_1588, _169[_1573], _2656.x);
[   1.173][d][vo/gpu/d3d11] [463]         _2504.y = mad(_1588, _178[_1573], _2656.y);
[   1.173][d][vo/gpu/d3d11] [464]         _2658 = _2504;
[   1.173][d][vo/gpu/d3d11] [465]         _2657 = _2655 + _1588;
[   1.173][d][vo/gpu/d3d11] [466]     }
[   1.173][d][vo/gpu/d3d11] [467]     else
[   1.173][d][vo/gpu/d3d11] [468]     {
[   1.173][d][vo/gpu/d3d11] [469]         _2658 = _2656;
[   1.173][d][vo/gpu/d3d11] [470]         _2657 = _2655;
[   1.173][d][vo/gpu/d3d11] [471]     }
[   1.173][d][vo/gpu/d3d11] [472]     int _1617 = _222 + 122;
[   1.173][d][vo/gpu/d3d11] [473]     float4 _1627 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(-1.0f, 2.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [474]     float _1628 = _1627.x;
[   1.173][d][vo/gpu/d3d11] [475]     int _1657 = _222 + 123;
[   1.173][d][vo/gpu/d3d11] [476]     float4 _1667 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(0.0f, 2.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [477]     float _1668 = _1667.x;
[   1.173][d][vo/gpu/d3d11] [478]     int _1697 = _222 + 124;
[   1.173][d][vo/gpu/d3d11] [479]     float4 _1707 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(float2(1.0f, 2.0f) - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [480]     float _1708 = _1707.x;
[   1.173][d][vo/gpu/d3d11] [481]     int _1737 = _222 + 125;
[   1.173][d][vo/gpu/d3d11] [482]     float4 _1747 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, length(2.0f.xx - _100) * 0.3088025748729705810546875f), 0.0f);
[   1.173][d][vo/gpu/d3d11] [483]     float _1748 = _1747.x;
[   1.173][d][vo/gpu/d3d11] [484]     float _1751 = (((_2657 + _1628) + _1668) + _1708) + _1748;
[   1.173][d][vo/gpu/d3d11] [485]     float _1759 = mad(_1748, _169[_1737], mad(_1708, _169[_1697], mad(_1668, _169[_1657], mad(_1628, _169[_1617], _2658.x))));
[   1.173][d][vo/gpu/d3d11] [486]     float4 _2536 = _2658;
[   1.173][d][vo/gpu/d3d11] [487]     _2536.x = _1759;
[   1.173][d][vo/gpu/d3d11] [488]     float _1768 = mad(_1748, _178[_1737], mad(_1708, _178[_1697], mad(_1668, _178[_1657], mad(_1628, _178[_1617], _2658.y))));
[   1.173][d][vo/gpu/d3d11] [489]     _2536.y = _1768;
[   1.173][d][vo/gpu/d3d11] [490]     int _1777 = _222 + 126;
[   1.173][d][vo/gpu/d3d11] [491]     float _1781 = length(float2(3.0f, 2.0f) - _100);
[   1.173][d][vo/gpu/d3d11] [492]     float _2659;
[   1.173][d][vo/gpu/d3d11] [493]     float4 _2660;
[   1.173][d][vo/gpu/d3d11] [494]     if (_1781 < 3.0327079296112060546875f)
[   1.173][d][vo/gpu/d3d11] [495]     {
[   1.173][d][vo/gpu/d3d11] [496]         float4 _1791 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1781 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [497]         float _1792 = _1791.x;
[   1.174][d][vo/gpu/d3d11] [498]         float4 _2544 = _2536;
[   1.174][d][vo/gpu/d3d11] [499]         _2544.x = mad(_1792, _169[_1777], _1759);
[   1.174][d][vo/gpu/d3d11] [500]         _2544.y = mad(_1792, _178[_1777], _1768);
[   1.174][d][vo/gpu/d3d11] [501]         _2660 = _2544;
[   1.174][d][vo/gpu/d3d11] [502]         _2659 = _1751 + _1792;
[   1.174][d][vo/gpu/d3d11] [503]     }
[   1.174][d][vo/gpu/d3d11] [504]     else
[   1.174][d][vo/gpu/d3d11] [505]     {
[   1.174][d][vo/gpu/d3d11] [506]         _2660 = _2536;
[   1.174][d][vo/gpu/d3d11] [507]         _2659 = _1751;
[   1.174][d][vo/gpu/d3d11] [508]     }
[   1.174][d][vo/gpu/d3d11] [509]     int _1837 = _222 + 145;
[   1.174][d][vo/gpu/d3d11] [510]     float _1841 = length(float2(-2.0f, 3.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [511]     float _2661;
[   1.174][d][vo/gpu/d3d11] [512]     float4 _2662;
[   1.174][d][vo/gpu/d3d11] [513]     if (_1841 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [514]     {
[   1.174][d][vo/gpu/d3d11] [515]         float4 _1851 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1841 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [516]         float _1852 = _1851.x;
[   1.174][d][vo/gpu/d3d11] [517]         float4 _2552 = _2660;
[   1.174][d][vo/gpu/d3d11] [518]         _2552.x = mad(_1852, _169[_1837], _2660.x);
[   1.174][d][vo/gpu/d3d11] [519]         _2552.y = mad(_1852, _178[_1837], _2660.y);
[   1.174][d][vo/gpu/d3d11] [520]         _2662 = _2552;
[   1.174][d][vo/gpu/d3d11] [521]         _2661 = _2659 + _1852;
[   1.174][d][vo/gpu/d3d11] [522]     }
[   1.174][d][vo/gpu/d3d11] [523]     else
[   1.174][d][vo/gpu/d3d11] [524]     {
[   1.174][d][vo/gpu/d3d11] [525]         _2662 = _2660;
[   1.174][d][vo/gpu/d3d11] [526]         _2661 = _2659;
[   1.174][d][vo/gpu/d3d11] [527]     }
[   1.174][d][vo/gpu/d3d11] [528]     int _1881 = _222 + 146;
[   1.174][d][vo/gpu/d3d11] [529]     float _1885 = length(float2(-1.0f, 3.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [530]     float _2663;
[   1.174][d][vo/gpu/d3d11] [531]     float4 _2664;
[   1.174][d][vo/gpu/d3d11] [532]     if (_1885 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [533]     {
[   1.174][d][vo/gpu/d3d11] [534]         float4 _1895 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1885 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [535]         float _1896 = _1895.x;
[   1.174][d][vo/gpu/d3d11] [536]         float4 _2560 = _2662;
[   1.174][d][vo/gpu/d3d11] [537]         _2560.x = mad(_1896, _169[_1881], _2662.x);
[   1.174][d][vo/gpu/d3d11] [538]         _2560.y = mad(_1896, _178[_1881], _2662.y);
[   1.174][d][vo/gpu/d3d11] [539]         _2664 = _2560;
[   1.174][d][vo/gpu/d3d11] [540]         _2663 = _2661 + _1896;
[   1.174][d][vo/gpu/d3d11] [541]     }
[   1.174][d][vo/gpu/d3d11] [542]     else
[   1.174][d][vo/gpu/d3d11] [543]     {
[   1.174][d][vo/gpu/d3d11] [544]         _2664 = _2662;
[   1.174][d][vo/gpu/d3d11] [545]         _2663 = _2661;
[   1.174][d][vo/gpu/d3d11] [546]     }
[   1.174][d][vo/gpu/d3d11] [547]     int _1925 = _222 + 147;
[   1.174][d][vo/gpu/d3d11] [548]     float _1929 = length(float2(0.0f, 3.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [549]     float _2665;
[   1.174][d][vo/gpu/d3d11] [550]     float4 _2666;
[   1.174][d][vo/gpu/d3d11] [551]     if (_1929 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [552]     {
[   1.174][d][vo/gpu/d3d11] [553]         float4 _1939 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1929 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [554]         float _1940 = _1939.x;
[   1.174][d][vo/gpu/d3d11] [555]         float4 _2568 = _2664;
[   1.174][d][vo/gpu/d3d11] [556]         _2568.x = mad(_1940, _169[_1925], _2664.x);
[   1.174][d][vo/gpu/d3d11] [557]         _2568.y = mad(_1940, _178[_1925], _2664.y);
[   1.174][d][vo/gpu/d3d11] [558]         _2666 = _2568;
[   1.174][d][vo/gpu/d3d11] [559]         _2665 = _2663 + _1940;
[   1.174][d][vo/gpu/d3d11] [560]     }
[   1.174][d][vo/gpu/d3d11] [561]     else
[   1.174][d][vo/gpu/d3d11] [562]     {
[   1.174][d][vo/gpu/d3d11] [563]         _2666 = _2664;
[   1.174][d][vo/gpu/d3d11] [564]         _2665 = _2663;
[   1.174][d][vo/gpu/d3d11] [565]     }
[   1.174][d][vo/gpu/d3d11] [566]     int _1969 = _222 + 148;
[   1.174][d][vo/gpu/d3d11] [567]     float _1973 = length(float2(1.0f, 3.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [568]     float _2667;
[   1.174][d][vo/gpu/d3d11] [569]     float4 _2668;
[   1.174][d][vo/gpu/d3d11] [570]     if (_1973 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [571]     {
[   1.174][d][vo/gpu/d3d11] [572]         float4 _1983 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _1973 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [573]         float _1984 = _1983.x;
[   1.174][d][vo/gpu/d3d11] [574]         float4 _2576 = _2666;
[   1.174][d][vo/gpu/d3d11] [575]         _2576.x = mad(_1984, _169[_1969], _2666.x);
[   1.174][d][vo/gpu/d3d11] [576]         _2576.y = mad(_1984, _178[_1969], _2666.y);
[   1.174][d][vo/gpu/d3d11] [577]         _2668 = _2576;
[   1.174][d][vo/gpu/d3d11] [578]         _2667 = _2665 + _1984;
[   1.174][d][vo/gpu/d3d11] [579]     }
[   1.174][d][vo/gpu/d3d11] [580]     else
[   1.174][d][vo/gpu/d3d11] [581]     {
[   1.174][d][vo/gpu/d3d11] [582]         _2668 = _2666;
[   1.174][d][vo/gpu/d3d11] [583]         _2667 = _2665;
[   1.174][d][vo/gpu/d3d11] [584]     }
[   1.174][d][vo/gpu/d3d11] [585]     int _2013 = _222 + 149;
[   1.174][d][vo/gpu/d3d11] [586]     float _2017 = length(float2(2.0f, 3.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [587]     float _2669;
[   1.174][d][vo/gpu/d3d11] [588]     float4 _2670;
[   1.174][d][vo/gpu/d3d11] [589]     if (_2017 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [590]     {
[   1.174][d][vo/gpu/d3d11] [591]         float4 _2027 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _2017 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [592]         float _2028 = _2027.x;
[   1.174][d][vo/gpu/d3d11] [593]         float4 _2584 = _2668;
[   1.174][d][vo/gpu/d3d11] [594]         _2584.x = mad(_2028, _169[_2013], _2668.x);
[   1.174][d][vo/gpu/d3d11] [595]         _2584.y = mad(_2028, _178[_2013], _2668.y);
[   1.174][d][vo/gpu/d3d11] [596]         _2670 = _2584;
[   1.174][d][vo/gpu/d3d11] [597]         _2669 = _2667 + _2028;
[   1.174][d][vo/gpu/d3d11] [598]     }
[   1.174][d][vo/gpu/d3d11] [599]     else
[   1.174][d][vo/gpu/d3d11] [600]     {
[   1.174][d][vo/gpu/d3d11] [601]         _2670 = _2668;
[   1.174][d][vo/gpu/d3d11] [602]         _2669 = _2667;
[   1.174][d][vo/gpu/d3d11] [603]     }
[   1.174][d][vo/gpu/d3d11] [604]     int _2057 = _222 + 150;
[   1.174][d][vo/gpu/d3d11] [605]     float _2061 = length(3.0f.xx - _100);
[   1.174][d][vo/gpu/d3d11] [606]     float _2671;
[   1.174][d][vo/gpu/d3d11] [607]     float4 _2672;
[   1.174][d][vo/gpu/d3d11] [608]     if (_2061 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [609]     {
[   1.174][d][vo/gpu/d3d11] [610]         float4 _2071 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _2061 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [611]         float _2072 = _2071.x;
[   1.174][d][vo/gpu/d3d11] [612]         float4 _2592 = _2670;
[   1.174][d][vo/gpu/d3d11] [613]         _2592.x = mad(_2072, _169[_2057], _2670.x);
[   1.174][d][vo/gpu/d3d11] [614]         _2592.y = mad(_2072, _178[_2057], _2670.y);
[   1.174][d][vo/gpu/d3d11] [615]         _2672 = _2592;
[   1.174][d][vo/gpu/d3d11] [616]         _2671 = _2669 + _2072;
[   1.174][d][vo/gpu/d3d11] [617]     }
[   1.174][d][vo/gpu/d3d11] [618]     else
[   1.174][d][vo/gpu/d3d11] [619]     {
[   1.174][d][vo/gpu/d3d11] [620]         _2672 = _2670;
[   1.174][d][vo/gpu/d3d11] [621]         _2671 = _2669;
[   1.174][d][vo/gpu/d3d11] [622]     }
[   1.174][d][vo/gpu/d3d11] [623]     int _2133 = _222 + 171;
[   1.174][d][vo/gpu/d3d11] [624]     float _2137 = length(float2(0.0f, 4.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [625]     float _2673;
[   1.174][d][vo/gpu/d3d11] [626]     float4 _2674;
[   1.174][d][vo/gpu/d3d11] [627]     if (_2137 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [628]     {
[   1.174][d][vo/gpu/d3d11] [629]         float4 _2147 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _2137 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [630]         float _2148 = _2147.x;
[   1.174][d][vo/gpu/d3d11] [631]         float4 _2600 = _2672;
[   1.174][d][vo/gpu/d3d11] [632]         _2600.x = mad(_2148, _169[_2133], _2672.x);
[   1.174][d][vo/gpu/d3d11] [633]         _2600.y = mad(_2148, _178[_2133], _2672.y);
[   1.174][d][vo/gpu/d3d11] [634]         _2674 = _2600;
[   1.174][d][vo/gpu/d3d11] [635]         _2673 = _2671 + _2148;
[   1.174][d][vo/gpu/d3d11] [636]     }
[   1.174][d][vo/gpu/d3d11] [637]     else
[   1.174][d][vo/gpu/d3d11] [638]     {
[   1.174][d][vo/gpu/d3d11] [639]         _2674 = _2672;
[   1.174][d][vo/gpu/d3d11] [640]         _2673 = _2671;
[   1.174][d][vo/gpu/d3d11] [641]     }
[   1.174][d][vo/gpu/d3d11] [642]     int _2177 = _222 + 172;
[   1.174][d][vo/gpu/d3d11] [643]     float _2181 = length(float2(1.0f, 4.0f) - _100);
[   1.174][d][vo/gpu/d3d11] [644]     float4 _2675;
[   1.174][d][vo/gpu/d3d11] [645]     float _2676;
[   1.174][d][vo/gpu/d3d11] [646]     if (_2181 < 3.0327079296112060546875f)
[   1.174][d][vo/gpu/d3d11] [647]     {
[   1.174][d][vo/gpu/d3d11] [648]         float4 _2191 = _239.SampleLevel(__239_sampler, lerp(0.0078125f, 0.9921875f, _2181 * 0.3088025748729705810546875f), 0.0f);
[   1.174][d][vo/gpu/d3d11] [649]         float _2192 = _2191.x;
[   1.174][d][vo/gpu/d3d11] [650]         float4 _2608 = _2674;
[   1.174][d][vo/gpu/d3d11] [651]         _2608.x = mad(_2192, _169[_2177], _2674.x);
[   1.174][d][vo/gpu/d3d11] [652]         _2608.y = mad(_2192, _178[_2177], _2674.y);
[   1.174][d][vo/gpu/d3d11] [653]         _2676 = _2673 + _2192;
[   1.174][d][vo/gpu/d3d11] [654]         _2675 = _2608;
[   1.174][d][vo/gpu/d3d11] [655]     }
[   1.174][d][vo/gpu/d3d11] [656]     else
[   1.174][d][vo/gpu/d3d11] [657]     {
[   1.174][d][vo/gpu/d3d11] [658]         _2676 = _2673;
[   1.174][d][vo/gpu/d3d11] [659]         _2675 = _2674;
[   1.174][d][vo/gpu/d3d11] [660]     }
[   1.174][d][vo/gpu/d3d11] [661]     float4 _2243 = (_2675 / _2676.xxxx) * 1.0f;
[   1.174][d][vo/gpu/d3d11] [662]     _2243.z = 0.0f;
[   1.174][d][vo/gpu/d3d11] [663]     _2243.w = 1.0f;
[   1.174][d][vo/gpu/d3d11] [664]     _2249[int2(int3(gl_GlobalInvocationID).xy)] = _2243;
[   1.174][d][vo/gpu/d3d11] [665] }
[   1.174][d][vo/gpu/d3d11] [666] 
[   1.174][d][vo/gpu/d3d11] [667] [numthreads(32, 8, 1)]
[   1.174][d][vo/gpu/d3d11] [668] void main(SPIRV_Cross_Input stage_input)
[   1.174][d][vo/gpu/d3d11] [669] {
[   1.174][d][vo/gpu/d3d11] [670]     gl_WorkGroupID = stage_input.gl_WorkGroupID;
[   1.174][d][vo/gpu/d3d11] [671]     gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
[   1.174][d][vo/gpu/d3d11] [672]     gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
[   1.174][d][vo/gpu/d3d11] [673]     comp_main();
[   1.174][d][vo/gpu/d3d11] [674] }
[   1.174][d][vo/gpu] Resizing texture: 1920x800
[   1.178][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.181][v][vo/gpu/d3d11] Compiled a vertex shader in 5960us
[   1.181][v][vo/gpu/d3d11] shaderc: 3013us, SPIRV-Cross: 157us, D3DCompile: 2790us
[   1.181][d][vo/gpu/d3d11] GLSL source:
[   1.181][d][vo/gpu/d3d11] [  1] #version 450
[   1.181][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.181][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.181][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.181][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.181][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.181][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.181][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.181][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.181][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.181][d][vo/gpu/d3d11] [ 11] void main() {
[   1.181][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.181][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.181][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.181][d][vo/gpu/d3d11] [ 15] }
[   1.181][d][vo/gpu/d3d11] HLSL source:
[   1.181][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.181][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.181][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.181][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.181][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.181][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.181][d][vo/gpu/d3d11] [  7] 
[   1.181][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.181][d][vo/gpu/d3d11] [  9] {
[   1.181][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.181][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.181][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.181][d][vo/gpu/d3d11] [ 13] };
[   1.181][d][vo/gpu/d3d11] [ 14] 
[   1.181][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.181][d][vo/gpu/d3d11] [ 16] {
[   1.181][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.181][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.181][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.181][d][vo/gpu/d3d11] [ 20] };
[   1.181][d][vo/gpu/d3d11] [ 21] 
[   1.181][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.181][d][vo/gpu/d3d11] [ 23] {
[   1.181][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.181][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.181][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.181][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.181][d][vo/gpu/d3d11] [ 28] }
[   1.181][d][vo/gpu/d3d11] [ 29] 
[   1.181][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.181][d][vo/gpu/d3d11] [ 31] {
[   1.181][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.181][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.181][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.181][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.181][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.181][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.181][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.181][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.181][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.181][d][vo/gpu/d3d11] [ 41] }
[   1.183][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.186][v][vo/gpu/d3d11] Compiled a fragment shader in 4816us
[   1.186][v][vo/gpu/d3d11] shaderc: 2463us, SPIRV-Cross: 170us, D3DCompile: 2183us
[   1.186][d][vo/gpu/d3d11] GLSL source:
[   1.186][d][vo/gpu/d3d11] [  1] #version 450
[   1.186][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.186][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.186][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.186][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.186][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.186][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.186][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.186][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.186][d][vo/gpu/d3d11] [ 10] layout(offset=0) vec2 texture_size0;
[   1.186][d][vo/gpu/d3d11] [ 11] layout(offset=16) mat2 texture_rot0;
[   1.186][d][vo/gpu/d3d11] [ 12] layout(offset=48) vec2 texture_off0;
[   1.186][d][vo/gpu/d3d11] [ 13] layout(offset=56) vec2 pixel_size0;
[   1.186][d][vo/gpu/d3d11] [ 14] layout(offset=64) vec2 texture_size1;
[   1.186][d][vo/gpu/d3d11] [ 15] layout(offset=80) mat2 texture_rot1;
[   1.186][d][vo/gpu/d3d11] [ 16] layout(offset=112) vec2 texture_off1;
[   1.186][d][vo/gpu/d3d11] [ 17] layout(offset=120) vec2 pixel_size1;
[   1.186][d][vo/gpu/d3d11] [ 18] };
[   1.186][d][vo/gpu/d3d11] [ 19] layout(binding=0) uniform sampler2D texture0;
[   1.186][d][vo/gpu/d3d11] [ 20] layout(binding=1) uniform sampler2D texture1;
[   1.186][d][vo/gpu/d3d11] [ 21] void main() {
[   1.186][d][vo/gpu/d3d11] [ 22] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.186][d][vo/gpu/d3d11] [ 23] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   1.186][d][vo/gpu/d3d11] [ 24] color.gb = 1.000000 * vec4(texture(texture1, texcoord1)).rg;
[   1.186][d][vo/gpu/d3d11] [ 25] out_color = color;
[   1.186][d][vo/gpu/d3d11] [ 26] }
[   1.186][d][vo/gpu/d3d11] HLSL source:
[   1.186][d][vo/gpu/d3d11] [  1] Texture2D<float4> _16 : register(t0);
[   1.186][d][vo/gpu/d3d11] [  2] SamplerState __16_sampler : register(s0);
[   1.186][d][vo/gpu/d3d11] [  3] Texture2D<float4> _34 : register(t1);
[   1.186][d][vo/gpu/d3d11] [  4] SamplerState __34_sampler : register(s1);
[   1.186][d][vo/gpu/d3d11] [  5] 
[   1.186][d][vo/gpu/d3d11] [  6] static float2 _20;
[   1.186][d][vo/gpu/d3d11] [  7] static float2 _36;
[   1.186][d][vo/gpu/d3d11] [  8] static float4 _53;
[   1.186][d][vo/gpu/d3d11] [  9] 
[   1.186][d][vo/gpu/d3d11] [ 10] struct SPIRV_Cross_Input
[   1.186][d][vo/gpu/d3d11] [ 11] {
[   1.186][d][vo/gpu/d3d11] [ 12]     float2 _20 : TEXCOORD1;
[   1.186][d][vo/gpu/d3d11] [ 13]     float2 _36 : TEXCOORD2;
[   1.186][d][vo/gpu/d3d11] [ 14] };
[   1.186][d][vo/gpu/d3d11] [ 15] 
[   1.186][d][vo/gpu/d3d11] [ 16] struct SPIRV_Cross_Output
[   1.186][d][vo/gpu/d3d11] [ 17] {
[   1.186][d][vo/gpu/d3d11] [ 18]     float4 _53 : SV_Target0;
[   1.186][d][vo/gpu/d3d11] [ 19] };
[   1.186][d][vo/gpu/d3d11] [ 20] 
[   1.186][d][vo/gpu/d3d11] [ 21] void frag_main()
[   1.186][d][vo/gpu/d3d11] [ 22] {
[   1.186][d][vo/gpu/d3d11] [ 23]     float4 _60 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   1.186][d][vo/gpu/d3d11] [ 24]     _60.x = _16.Sample(__16_sampler, _20).x;
[   1.186][d][vo/gpu/d3d11] [ 25]     float2 _45 = _34.Sample(__34_sampler, _36).xy * 1.0f;
[   1.186][d][vo/gpu/d3d11] [ 26]     _60.y = _45.x;
[   1.186][d][vo/gpu/d3d11] [ 27]     _60.z = _45.y;
[   1.186][d][vo/gpu/d3d11] [ 28]     _53 = _60;
[   1.186][d][vo/gpu/d3d11] [ 29] }
[   1.186][d][vo/gpu/d3d11] [ 30] 
[   1.186][d][vo/gpu/d3d11] [ 31] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.186][d][vo/gpu/d3d11] [ 32] {
[   1.186][d][vo/gpu/d3d11] [ 33]     _20 = stage_input._20;
[   1.186][d][vo/gpu/d3d11] [ 34]     _36 = stage_input._36;
[   1.186][d][vo/gpu/d3d11] [ 35]     frag_main();
[   1.186][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.186][d][vo/gpu/d3d11] [ 37]     stage_output._53 = _53;
[   1.186][d][vo/gpu/d3d11] [ 38]     return stage_output;
[   1.186][d][vo/gpu/d3d11] [ 39] }
[   1.186][d][vo/gpu] Resizing texture: 1920x800
[   1.189][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.190][v][vo/gpu/d3d11] Compiled a vertex shader in 3779us
[   1.190][v][vo/gpu/d3d11] shaderc: 2113us, SPIRV-Cross: 139us, D3DCompile: 1527us
[   1.190][d][vo/gpu/d3d11] GLSL source:
[   1.190][d][vo/gpu/d3d11] [  1] #version 450
[   1.190][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.190][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.190][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.190][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.190][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.190][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.190][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.190][d][vo/gpu/d3d11] [  9] void main() {
[   1.190][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.190][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   1.190][d][vo/gpu/d3d11] [ 12] }
[   1.190][d][vo/gpu/d3d11] HLSL source:
[   1.190][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.190][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.190][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.190][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.190][d][vo/gpu/d3d11] [  5] 
[   1.190][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   1.190][d][vo/gpu/d3d11] [  7] {
[   1.190][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   1.190][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   1.190][d][vo/gpu/d3d11] [ 10] };
[   1.190][d][vo/gpu/d3d11] [ 11] 
[   1.190][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   1.190][d][vo/gpu/d3d11] [ 13] {
[   1.190][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   1.190][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   1.190][d][vo/gpu/d3d11] [ 16] };
[   1.190][d][vo/gpu/d3d11] [ 17] 
[   1.190][d][vo/gpu/d3d11] [ 18] void vert_main()
[   1.190][d][vo/gpu/d3d11] [ 19] {
[   1.190][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.190][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   1.190][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   1.190][d][vo/gpu/d3d11] [ 23] }
[   1.190][d][vo/gpu/d3d11] [ 24] 
[   1.190][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.190][d][vo/gpu/d3d11] [ 26] {
[   1.190][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   1.190][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   1.190][d][vo/gpu/d3d11] [ 29]     vert_main();
[   1.190][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   1.190][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   1.190][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   1.190][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   1.190][d][vo/gpu/d3d11] [ 34] }
[   1.193][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.197][v][vo/gpu/d3d11] Compiled a fragment shader in 6921us
[   1.197][v][vo/gpu/d3d11] shaderc: 3104us, SPIRV-Cross: 263us, D3DCompile: 3554us
[   1.197][d][vo/gpu/d3d11] GLSL source:
[   1.197][d][vo/gpu/d3d11] [  1] #version 450
[   1.197][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.197][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.197][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.197][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.197][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.197][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.197][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   1.197][d][vo/gpu/d3d11] [  9] layout(offset=0) mat3 colormatrix;
[   1.197][d][vo/gpu/d3d11] [ 10] layout(offset=48) vec3 colormatrix_c;
[   1.197][d][vo/gpu/d3d11] [ 11] layout(offset=64) vec2 texture_size0;
[   1.197][d][vo/gpu/d3d11] [ 12] layout(offset=80) mat2 texture_rot0;
[   1.197][d][vo/gpu/d3d11] [ 13] layout(offset=112) vec2 texture_off0;
[   1.197][d][vo/gpu/d3d11] [ 14] layout(offset=120) vec2 pixel_size0;
[   1.197][d][vo/gpu/d3d11] [ 15] };
[   1.197][d][vo/gpu/d3d11] [ 16] layout(binding=0) uniform sampler2D texture0;
[   1.197][d][vo/gpu/d3d11] [ 17] void main() {
[   1.197][d][vo/gpu/d3d11] [ 18] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.197][d][vo/gpu/d3d11] [ 19] color.rgb = 1.000000 * vec4(texture(texture0, texcoord0)).rgb;
[   1.197][d][vo/gpu/d3d11] [ 20] color = color.rgbr;
[   1.197][d][vo/gpu/d3d11] [ 21] color.rgb = mat3(colormatrix) * color.rgb + colormatrix_c;
[   1.197][d][vo/gpu/d3d11] [ 22] color.a = 1.0;
[   1.197][d][vo/gpu/d3d11] [ 23] out_color = color;
[   1.197][d][vo/gpu/d3d11] [ 24] }
[   1.197][d][vo/gpu/d3d11] HLSL source:
[   1.197][d][vo/gpu/d3d11] [  1] cbuffer _46_48 : register(b0)
[   1.197][d][vo/gpu/d3d11] [  2] {
[   1.197][d][vo/gpu/d3d11] [  3]     row_major float3x3 _48_m0 : packoffset(c0);
[   1.197][d][vo/gpu/d3d11] [  4]     float3 _48_m1 : packoffset(c3);
[   1.197][d][vo/gpu/d3d11] [  5]     float2 _48_m2 : packoffset(c4);
[   1.197][d][vo/gpu/d3d11] [  6]     row_major float2x2 _48_m3 : packoffset(c5);
[   1.197][d][vo/gpu/d3d11] [  7]     float2 _48_m4 : packoffset(c7);
[   1.197][d][vo/gpu/d3d11] [  8]     float2 _48_m5 : packoffset(c7.z);
[   1.197][d][vo/gpu/d3d11] [  9] };
[   1.197][d][vo/gpu/d3d11] [ 10] 
[   1.197][d][vo/gpu/d3d11] [ 11] Texture2D<float4> _16 : register(t0);
[   1.197][d][vo/gpu/d3d11] [ 12] SamplerState __16_sampler : register(s0);
[   1.197][d][vo/gpu/d3d11] [ 13] 
[   1.197][d][vo/gpu/d3d11] [ 14] static float2 _20;
[   1.197][d][vo/gpu/d3d11] [ 15] static float4 _75;
[   1.197][d][vo/gpu/d3d11] [ 16] 
[   1.197][d][vo/gpu/d3d11] [ 17] struct SPIRV_Cross_Input
[   1.197][d][vo/gpu/d3d11] [ 18] {
[   1.197][d][vo/gpu/d3d11] [ 19]     float2 _20 : TEXCOORD1;
[   1.197][d][vo/gpu/d3d11] [ 20] };
[   1.197][d][vo/gpu/d3d11] [ 21] 
[   1.197][d][vo/gpu/d3d11] [ 22] struct SPIRV_Cross_Output
[   1.197][d][vo/gpu/d3d11] [ 23] {
[   1.197][d][vo/gpu/d3d11] [ 24]     float4 _75 : SV_Target0;
[   1.197][d][vo/gpu/d3d11] [ 25] };
[   1.198][d][vo/gpu/d3d11] [ 26] 
[   1.198][d][vo/gpu/d3d11] [ 27] static float4 _93;
[   1.198][d][vo/gpu/d3d11] [ 28] 
[   1.198][d][vo/gpu/d3d11] [ 29] void frag_main()
[   1.198][d][vo/gpu/d3d11] [ 30] {
[   1.198][d][vo/gpu/d3d11] [ 31]     float3 _30 = _16.Sample(__16_sampler, _20).xyz * 1.0f;
[   1.198][d][vo/gpu/d3d11] [ 32]     float4 _78;
[   1.198][d][vo/gpu/d3d11] [ 33]     _78.x = _30.x;
[   1.198][d][vo/gpu/d3d11] [ 34]     _78.y = _30.y;
[   1.198][d][vo/gpu/d3d11] [ 35]     _78.z = _30.z;
[   1.198][d][vo/gpu/d3d11] [ 36]     _75 = float4(mul(_78.xyz, _48_m0) + _48_m1, 1.0f);
[   1.198][d][vo/gpu/d3d11] [ 37] }
[   1.198][d][vo/gpu/d3d11] [ 38] 
[   1.198][d][vo/gpu/d3d11] [ 39] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.198][d][vo/gpu/d3d11] [ 40] {
[   1.198][d][vo/gpu/d3d11] [ 41]     _20 = stage_input._20;
[   1.198][d][vo/gpu/d3d11] [ 42]     frag_main();
[   1.198][d][vo/gpu/d3d11] [ 43]     SPIRV_Cross_Output stage_output;
[   1.198][d][vo/gpu/d3d11] [ 44]     stage_output._75 = _75;
[   1.198][d][vo/gpu/d3d11] [ 45]     return stage_output;
[   1.198][d][vo/gpu/d3d11] [ 46] }
[   1.198][d][vo/gpu] Resizing texture: 1920x800
[   1.200][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.202][v][vo/gpu/d3d11] Compiled a vertex shader in 3666us
[   1.202][v][vo/gpu/d3d11] shaderc: 1993us, SPIRV-Cross: 133us, D3DCompile: 1540us
[   1.202][d][vo/gpu/d3d11] GLSL source:
[   1.202][d][vo/gpu/d3d11] [  1] #version 450
[   1.202][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.202][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.202][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.202][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.202][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.202][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.202][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.202][d][vo/gpu/d3d11] [  9] void main() {
[   1.202][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.202][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   1.202][d][vo/gpu/d3d11] [ 12] }
[   1.202][d][vo/gpu/d3d11] HLSL source:
[   1.202][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.202][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.202][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.202][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.202][d][vo/gpu/d3d11] [  5] 
[   1.202][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   1.202][d][vo/gpu/d3d11] [  7] {
[   1.202][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   1.202][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   1.202][d][vo/gpu/d3d11] [ 10] };
[   1.202][d][vo/gpu/d3d11] [ 11] 
[   1.202][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   1.202][d][vo/gpu/d3d11] [ 13] {
[   1.202][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   1.202][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   1.202][d][vo/gpu/d3d11] [ 16] };
[   1.202][d][vo/gpu/d3d11] [ 17] 
[   1.202][d][vo/gpu/d3d11] [ 18] void vert_main()
[   1.202][d][vo/gpu/d3d11] [ 19] {
[   1.202][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.202][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   1.202][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   1.202][d][vo/gpu/d3d11] [ 23] }
[   1.202][d][vo/gpu/d3d11] [ 24] 
[   1.202][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.202][d][vo/gpu/d3d11] [ 26] {
[   1.202][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   1.202][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   1.202][d][vo/gpu/d3d11] [ 29]     vert_main();
[   1.202][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   1.202][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   1.202][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   1.202][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   1.202][d][vo/gpu/d3d11] [ 34] }
[   1.206][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.211][v][vo/gpu/d3d11] Compiled a fragment shader in 9668us
[   1.211][v][vo/gpu/d3d11] shaderc: 4075us, SPIRV-Cross: 260us, D3DCompile: 5333us
[   1.211][d][vo/gpu/d3d11] GLSL source:
[   1.212][d][vo/gpu/d3d11] [  1] #version 450
[   1.212][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.212][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.212][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.212][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.212][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.212][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.212][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   1.212][d][vo/gpu/d3d11] [  9] layout(offset=0) float random;
[   1.212][d][vo/gpu/d3d11] [ 10] layout(offset=4) int frame;
[   1.212][d][vo/gpu/d3d11] [ 11] layout(offset=8) vec2 input_size;
[   1.212][d][vo/gpu/d3d11] [ 12] layout(offset=16) vec2 target_size;
[   1.212][d][vo/gpu/d3d11] [ 13] layout(offset=24) vec2 tex_offset;
[   1.212][d][vo/gpu/d3d11] [ 14] layout(offset=32) vec2 texture_size0;
[   1.212][d][vo/gpu/d3d11] [ 15] layout(offset=48) mat2 texture_rot0;
[   1.212][d][vo/gpu/d3d11] [ 16] layout(offset=80) vec2 texture_off0;
[   1.212][d][vo/gpu/d3d11] [ 17] layout(offset=88) vec2 pixel_size0;
[   1.212][d][vo/gpu/d3d11] [ 18] };
[   1.212][d][vo/gpu/d3d11] [ 19] layout(binding=0) uniform sampler2D texture0;
[   1.212][d][vo/gpu/d3d11] [ 20] #define HOOKED_raw texture0
[   1.212][d][vo/gpu/d3d11] [ 21] #define HOOKED_pos texcoord0
[   1.212][d][vo/gpu/d3d11] [ 22] #define HOOKED_size texture_size0
[   1.212][d][vo/gpu/d3d11] [ 23] #define HOOKED_rot texture_rot0
[   1.212][d][vo/gpu/d3d11] [ 24] #define HOOKED_off texture_off0
[   1.212][d][vo/gpu/d3d11] [ 25] #define HOOKED_pt pixel_size0
[   1.212][d][vo/gpu/d3d11] [ 26] #define HOOKED_map texmap0
[   1.212][d][vo/gpu/d3d11] [ 27] #define HOOKED_mul 1.000000
[   1.212][d][vo/gpu/d3d11] [ 28] #define HOOKED_tex(pos) (HOOKED_mul * vec4(texture(HOOKED_raw, pos)).rgba)
[   1.212][d][vo/gpu/d3d11] [ 29] #define HOOKED_gather(pos, c) (HOOKED_mul * vec4(textureGather(HOOKED_raw, pos, c)))
[   1.212][d][vo/gpu/d3d11] [ 30] #define HOOKED_texOff(off) HOOKED_tex(HOOKED_pos + HOOKED_pt * vec2(off))
[   1.212][d][vo/gpu/d3d11] [ 31] #define MAIN_raw texture0
[   1.212][d][vo/gpu/d3d11] [ 32] #define MAIN_pos texcoord0
[   1.212][d][vo/gpu/d3d11] [ 33] #define MAIN_size texture_size0
[   1.212][d][vo/gpu/d3d11] [ 34] #define MAIN_rot texture_rot0
[   1.212][d][vo/gpu/d3d11] [ 35] #define MAIN_off texture_off0
[   1.212][d][vo/gpu/d3d11] [ 36] #define MAIN_pt pixel_size0
[   1.212][d][vo/gpu/d3d11] [ 37] #define MAIN_map texmap0
[   1.212][d][vo/gpu/d3d11] [ 38] #define MAIN_mul 1.000000
[   1.212][d][vo/gpu/d3d11] [ 39] #define MAIN_tex(pos) (MAIN_mul * vec4(texture(MAIN_raw, pos)).rgba)
[   1.212][d][vo/gpu/d3d11] [ 40] #define MAIN_gather(pos, c) (MAIN_mul * vec4(textureGather(MAIN_raw, pos, c)))
[   1.212][d][vo/gpu/d3d11] [ 41] #define MAIN_texOff(off) MAIN_tex(MAIN_pos + MAIN_pt * vec2(off))
[   1.212][d][vo/gpu/d3d11] [ 42] 
[   1.212][d][vo/gpu/d3d11] [ 43] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   1.212][d][vo/gpu/d3d11] [ 44] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   1.212][d][vo/gpu/d3d11] [ 45] 
[   1.212][d][vo/gpu/d3d11] [ 46] float get_luma(vec4 rgba) {
[   1.212][d][vo/gpu/d3d11] [ 47] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   1.212][d][vo/gpu/d3d11] [ 48] }
[   1.212][d][vo/gpu/d3d11] [ 49] 
[   1.212][d][vo/gpu/d3d11] [ 50] vec4 hook() {
[   1.212][d][vo/gpu/d3d11] [ 51] 
[   1.212][d][vo/gpu/d3d11] [ 52] 	float gmax = 0.0;
[   1.212][d][vo/gpu/d3d11] [ 53] 	
[   1.212][d][vo/gpu/d3d11] [ 54] 	for (int i=0; i<KERNELSIZE; i++) {
[   1.212][d][vo/gpu/d3d11] [ 55] 		float g = get_luma(MAIN_texOff(vec2(i - KERNELHALFSIZE, 0)));
[   1.212][d][vo/gpu/d3d11] [ 56] 		
[   1.212][d][vo/gpu/d3d11] [ 57] 		gmax = max(g, gmax);
[   1.212][d][vo/gpu/d3d11] [ 58] 	}
[   1.212][d][vo/gpu/d3d11] [ 59] 	
[   1.212][d][vo/gpu/d3d11] [ 60] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   1.212][d][vo/gpu/d3d11] [ 61] }
[   1.212][d][vo/gpu/d3d11] [ 62] 
[   1.212][d][vo/gpu/d3d11] [ 63] void main() {
[   1.212][d][vo/gpu/d3d11] [ 64] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.212][d][vo/gpu/d3d11] [ 65] color = hook();
[   1.212][d][vo/gpu/d3d11] [ 66] color.g = 0.000000;
[   1.212][d][vo/gpu/d3d11] [ 67] color.b = 0.000000;
[   1.212][d][vo/gpu/d3d11] [ 68] color.a = 1.000000;
[   1.212][d][vo/gpu/d3d11] [ 69] out_color = color;
[   1.212][d][vo/gpu/d3d11] [ 70] }
[   1.212][d][vo/gpu/d3d11] HLSL source:
[   1.212][d][vo/gpu/d3d11] [  1] cbuffer _52_54 : register(b0)
[   1.212][d][vo/gpu/d3d11] [  2] {
[   1.212][d][vo/gpu/d3d11] [  3]     float _54_m0 : packoffset(c0);
[   1.212][d][vo/gpu/d3d11] [  4]     int _54_m1 : packoffset(c0.y);
[   1.212][d][vo/gpu/d3d11] [  5]     float2 _54_m2 : packoffset(c0.z);
[   1.212][d][vo/gpu/d3d11] [  6]     float2 _54_m3 : packoffset(c1);
[   1.212][d][vo/gpu/d3d11] [  7]     float2 _54_m4 : packoffset(c1.z);
[   1.212][d][vo/gpu/d3d11] [  8]     float2 _54_m5 : packoffset(c2);
[   1.212][d][vo/gpu/d3d11] [  9]     row_major float2x2 _54_m6 : packoffset(c3);
[   1.212][d][vo/gpu/d3d11] [ 10]     float2 _54_m7 : packoffset(c5);
[   1.212][d][vo/gpu/d3d11] [ 11]     float2 _54_m8 : packoffset(c5.z);
[   1.212][d][vo/gpu/d3d11] [ 12] };
[   1.212][d][vo/gpu/d3d11] [ 13] 
[   1.212][d][vo/gpu/d3d11] [ 14] Texture2D<float4> _45 : register(t0);
[   1.212][d][vo/gpu/d3d11] [ 15] SamplerState __45_sampler : register(s0);
[   1.212][d][vo/gpu/d3d11] [ 16] 
[   1.212][d][vo/gpu/d3d11] [ 17] static float2 _49;
[   1.212][d][vo/gpu/d3d11] [ 18] static float4 _99;
[   1.212][d][vo/gpu/d3d11] [ 19] 
[   1.212][d][vo/gpu/d3d11] [ 20] struct SPIRV_Cross_Input
[   1.212][d][vo/gpu/d3d11] [ 21] {
[   1.212][d][vo/gpu/d3d11] [ 22]     float2 _49 : TEXCOORD1;
[   1.212][d][vo/gpu/d3d11] [ 23] };
[   1.212][d][vo/gpu/d3d11] [ 24] 
[   1.212][d][vo/gpu/d3d11] [ 25] struct SPIRV_Cross_Output
[   1.212][d][vo/gpu/d3d11] [ 26] {
[   1.212][d][vo/gpu/d3d11] [ 27]     float4 _99 : SV_Target0;
[   1.212][d][vo/gpu/d3d11] [ 28] };
[   1.212][d][vo/gpu/d3d11] [ 29] 
[   1.212][d][vo/gpu/d3d11] [ 30] void frag_main()
[   1.212][d][vo/gpu/d3d11] [ 31] {
[   1.212][d][vo/gpu/d3d11] [ 32]     float _153;
[   1.212][d][vo/gpu/d3d11] [ 33]     _153 = 0.0f;
[   1.212][d][vo/gpu/d3d11] [ 34]     for (int _152 = 0; _152 < 5; )
[   1.212][d][vo/gpu/d3d11] [ 35]     {
[   1.212][d][vo/gpu/d3d11] [ 36]         _153 = max(dot(float4(0.2989999949932098388671875f, 0.58700001239776611328125f, 0.114000000059604644775390625f, 0.0f), _45.Sample(__45_sampler, mad(_54_m8, float2(float(_152 - 2), 0.0f), _49)) * 1.0f), _153);
[   1.212][d][vo/gpu/d3d11] [ 37]         _152++;
[   1.212][d][vo/gpu/d3d11] [ 38]         continue;
[   1.212][d][vo/gpu/d3d11] [ 39]     }
[   1.212][d][vo/gpu/d3d11] [ 40]     float4 _141 = float4(_153, 0.0f, 0.0f, 0.0f);
[   1.212][d][vo/gpu/d3d11] [ 41]     _141.y = 0.0f;
[   1.212][d][vo/gpu/d3d11] [ 42]     _141.z = 0.0f;
[   1.212][d][vo/gpu/d3d11] [ 43]     _141.w = 1.0f;
[   1.212][d][vo/gpu/d3d11] [ 44]     _99 = _141;
[   1.212][d][vo/gpu/d3d11] [ 45] }
[   1.212][d][vo/gpu/d3d11] [ 46] 
[   1.212][d][vo/gpu/d3d11] [ 47] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.212][d][vo/gpu/d3d11] [ 48] {
[   1.212][d][vo/gpu/d3d11] [ 49]     _49 = stage_input._49;
[   1.212][d][vo/gpu/d3d11] [ 50]     frag_main();
[   1.212][d][vo/gpu/d3d11] [ 51]     SPIRV_Cross_Output stage_output;
[   1.212][d][vo/gpu/d3d11] [ 52]     stage_output._99 = _99;
[   1.212][d][vo/gpu/d3d11] [ 53]     return stage_output;
[   1.212][d][vo/gpu/d3d11] [ 54] }
[   1.212][d][vo/gpu] Resizing texture: 1920x800
[   1.215][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.217][v][vo/gpu/d3d11] Compiled a vertex shader in 4514us
[   1.217][v][vo/gpu/d3d11] shaderc: 2227us, SPIRV-Cross: 183us, D3DCompile: 2104us
[   1.217][d][vo/gpu/d3d11] GLSL source:
[   1.217][d][vo/gpu/d3d11] [  1] #version 450
[   1.217][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.217][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.217][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.217][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.217][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.217][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.217][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.217][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.217][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.218][d][vo/gpu/d3d11] [ 11] void main() {
[   1.218][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.218][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.218][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.218][d][vo/gpu/d3d11] [ 15] }
[   1.218][d][vo/gpu/d3d11] HLSL source:
[   1.218][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.218][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.218][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.218][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.218][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.218][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.218][d][vo/gpu/d3d11] [  7] 
[   1.218][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.218][d][vo/gpu/d3d11] [  9] {
[   1.218][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.218][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.218][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.218][d][vo/gpu/d3d11] [ 13] };
[   1.218][d][vo/gpu/d3d11] [ 14] 
[   1.218][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.218][d][vo/gpu/d3d11] [ 16] {
[   1.218][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.218][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.218][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.218][d][vo/gpu/d3d11] [ 20] };
[   1.218][d][vo/gpu/d3d11] [ 21] 
[   1.218][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.218][d][vo/gpu/d3d11] [ 23] {
[   1.218][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.218][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.218][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.218][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.218][d][vo/gpu/d3d11] [ 28] }
[   1.218][d][vo/gpu/d3d11] [ 29] 
[   1.218][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.218][d][vo/gpu/d3d11] [ 31] {
[   1.218][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.218][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.218][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.218][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.218][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.218][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.218][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.218][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.218][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.218][d][vo/gpu/d3d11] [ 41] }
[   1.223][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.228][v][vo/gpu/d3d11] Compiled a fragment shader in 10434us
[   1.228][v][vo/gpu/d3d11] shaderc: 5242us, SPIRV-Cross: 249us, D3DCompile: 4943us
[   1.228][d][vo/gpu/d3d11] GLSL source:
[   1.228][d][vo/gpu/d3d11] [  1] #version 450
[   1.228][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.228][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.228][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.228][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.228][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.228][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.228][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.228][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.228][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.228][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.228][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.228][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.228][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.228][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.228][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.228][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.228][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.228][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.228][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.228][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.228][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.228][d][vo/gpu/d3d11] [ 23] };
[   1.228][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.228][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.228][d][vo/gpu/d3d11] [ 26] #define HOOKED_raw texture0
[   1.228][d][vo/gpu/d3d11] [ 27] #define HOOKED_pos texcoord0
[   1.228][d][vo/gpu/d3d11] [ 28] #define HOOKED_size texture_size0
[   1.228][d][vo/gpu/d3d11] [ 29] #define HOOKED_rot texture_rot0
[   1.228][d][vo/gpu/d3d11] [ 30] #define HOOKED_off texture_off0
[   1.228][d][vo/gpu/d3d11] [ 31] #define HOOKED_pt pixel_size0
[   1.228][d][vo/gpu/d3d11] [ 32] #define HOOKED_map texmap0
[   1.228][d][vo/gpu/d3d11] [ 33] #define HOOKED_mul 1.000000
[   1.228][d][vo/gpu/d3d11] [ 34] #define HOOKED_tex(pos) (HOOKED_mul * vec4(texture(HOOKED_raw, pos)).rgba)
[   1.228][d][vo/gpu/d3d11] [ 35] #define HOOKED_gather(pos, c) (HOOKED_mul * vec4(textureGather(HOOKED_raw, pos, c)))
[   1.228][d][vo/gpu/d3d11] [ 36] #define HOOKED_texOff(off) HOOKED_tex(HOOKED_pos + HOOKED_pt * vec2(off))
[   1.228][d][vo/gpu/d3d11] [ 37] #define MAIN_raw texture0
[   1.228][d][vo/gpu/d3d11] [ 38] #define MAIN_pos texcoord0
[   1.228][d][vo/gpu/d3d11] [ 39] #define MAIN_size texture_size0
[   1.228][d][vo/gpu/d3d11] [ 40] #define MAIN_rot texture_rot0
[   1.228][d][vo/gpu/d3d11] [ 41] #define MAIN_off texture_off0
[   1.228][d][vo/gpu/d3d11] [ 42] #define MAIN_pt pixel_size0
[   1.228][d][vo/gpu/d3d11] [ 43] #define MAIN_map texmap0
[   1.228][d][vo/gpu/d3d11] [ 44] #define MAIN_mul 1.000000
[   1.228][d][vo/gpu/d3d11] [ 45] #define MAIN_tex(pos) (MAIN_mul * vec4(texture(MAIN_raw, pos)).rgba)
[   1.228][d][vo/gpu/d3d11] [ 46] #define MAIN_gather(pos, c) (MAIN_mul * vec4(textureGather(MAIN_raw, pos, c)))
[   1.228][d][vo/gpu/d3d11] [ 47] #define MAIN_texOff(off) MAIN_tex(MAIN_pos + MAIN_pt * vec2(off))
[   1.228][d][vo/gpu/d3d11] [ 48] #define STATSMAX_raw texture1
[   1.228][d][vo/gpu/d3d11] [ 49] #define STATSMAX_pos texcoord1
[   1.228][d][vo/gpu/d3d11] [ 50] #define STATSMAX_size texture_size1
[   1.228][d][vo/gpu/d3d11] [ 51] #define STATSMAX_rot texture_rot1
[   1.228][d][vo/gpu/d3d11] [ 52] #define STATSMAX_off texture_off1
[   1.228][d][vo/gpu/d3d11] [ 53] #define STATSMAX_pt pixel_size1
[   1.228][d][vo/gpu/d3d11] [ 54] #define STATSMAX_map texmap1
[   1.228][d][vo/gpu/d3d11] [ 55] #define STATSMAX_mul 1.000000
[   1.228][d][vo/gpu/d3d11] [ 56] #define STATSMAX_tex(pos) (STATSMAX_mul * vec4(texture(STATSMAX_raw, pos)).rgba)
[   1.228][d][vo/gpu/d3d11] [ 57] #define STATSMAX_gather(pos, c) (STATSMAX_mul * vec4(textureGather(STATSMAX_raw, pos, c)))
[   1.228][d][vo/gpu/d3d11] [ 58] #define STATSMAX_texOff(off) STATSMAX_tex(STATSMAX_pos + STATSMAX_pt * vec2(off))
[   1.228][d][vo/gpu/d3d11] [ 59] 
[   1.228][d][vo/gpu/d3d11] [ 60] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   1.228][d][vo/gpu/d3d11] [ 61] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   1.228][d][vo/gpu/d3d11] [ 62] 
[   1.228][d][vo/gpu/d3d11] [ 63] vec4 hook() {
[   1.228][d][vo/gpu/d3d11] [ 64] 
[   1.228][d][vo/gpu/d3d11] [ 65] 	float gmax = 0.0;
[   1.228][d][vo/gpu/d3d11] [ 66] 	
[   1.228][d][vo/gpu/d3d11] [ 67] 	for (int i=0; i<KERNELSIZE; i++) {
[   1.228][d][vo/gpu/d3d11] [ 68] 		float g = STATSMAX_texOff(vec2(0, i - KERNELHALFSIZE)).x;
[   1.228][d][vo/gpu/d3d11] [ 69] 		
[   1.228][d][vo/gpu/d3d11] [ 70] 		gmax = max(g, gmax);
[   1.228][d][vo/gpu/d3d11] [ 71] 	}
[   1.228][d][vo/gpu/d3d11] [ 72] 	
[   1.228][d][vo/gpu/d3d11] [ 73] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   1.228][d][vo/gpu/d3d11] [ 74] }
[   1.228][d][vo/gpu/d3d11] [ 75] 
[   1.228][d][vo/gpu/d3d11] [ 76] void main() {
[   1.228][d][vo/gpu/d3d11] [ 77] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.228][d][vo/gpu/d3d11] [ 78] color = hook();
[   1.228][d][vo/gpu/d3d11] [ 79] color.g = 0.000000;
[   1.228][d][vo/gpu/d3d11] [ 80] color.b = 0.000000;
[   1.228][d][vo/gpu/d3d11] [ 81] color.a = 1.000000;
[   1.228][d][vo/gpu/d3d11] [ 82] out_color = color;
[   1.228][d][vo/gpu/d3d11] [ 83] }
[   1.228][d][vo/gpu/d3d11] HLSL source:
[   1.228][d][vo/gpu/d3d11] [  1] cbuffer _39_41 : register(b0)
[   1.228][d][vo/gpu/d3d11] [  2] {
[   1.228][d][vo/gpu/d3d11] [  3]     float _41_m0 : packoffset(c0);
[   1.228][d][vo/gpu/d3d11] [  4]     int _41_m1 : packoffset(c0.y);
[   1.228][d][vo/gpu/d3d11] [  5]     float2 _41_m2 : packoffset(c0.z);
[   1.228][d][vo/gpu/d3d11] [  6]     float2 _41_m3 : packoffset(c1);
[   1.228][d][vo/gpu/d3d11] [  7]     float2 _41_m4 : packoffset(c1.z);
[   1.228][d][vo/gpu/d3d11] [  8]     float2 _41_m5 : packoffset(c2);
[   1.228][d][vo/gpu/d3d11] [  9]     row_major float2x2 _41_m6 : packoffset(c3);
[   1.228][d][vo/gpu/d3d11] [ 10]     float2 _41_m7 : packoffset(c5);
[   1.228][d][vo/gpu/d3d11] [ 11]     float2 _41_m8 : packoffset(c5.z);
[   1.228][d][vo/gpu/d3d11] [ 12]     float2 _41_m9 : packoffset(c6);
[   1.228][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _41_m10 : packoffset(c7);
[   1.228][d][vo/gpu/d3d11] [ 14]     float2 _41_m11 : packoffset(c9);
[   1.228][d][vo/gpu/d3d11] [ 15]     float2 _41_m12 : packoffset(c9.z);
[   1.228][d][vo/gpu/d3d11] [ 16] };
[   1.229][d][vo/gpu/d3d11] [ 17] 
[   1.229][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _32 : register(t1);
[   1.229][d][vo/gpu/d3d11] [ 19] SamplerState __32_sampler : register(s1);
[   1.229][d][vo/gpu/d3d11] [ 20] 
[   1.229][d][vo/gpu/d3d11] [ 21] static float2 _36;
[   1.229][d][vo/gpu/d3d11] [ 22] static float4 _87;
[   1.229][d][vo/gpu/d3d11] [ 23] 
[   1.229][d][vo/gpu/d3d11] [ 24] struct SPIRV_Cross_Input
[   1.229][d][vo/gpu/d3d11] [ 25] {
[   1.229][d][vo/gpu/d3d11] [ 26]     float2 _36 : TEXCOORD2;
[   1.229][d][vo/gpu/d3d11] [ 27] };
[   1.229][d][vo/gpu/d3d11] [ 28] 
[   1.229][d][vo/gpu/d3d11] [ 29] struct SPIRV_Cross_Output
[   1.229][d][vo/gpu/d3d11] [ 30] {
[   1.229][d][vo/gpu/d3d11] [ 31]     float4 _87 : SV_Target0;
[   1.229][d][vo/gpu/d3d11] [ 32] };
[   1.229][d][vo/gpu/d3d11] [ 33] 
[   1.229][d][vo/gpu/d3d11] [ 34] void frag_main()
[   1.229][d][vo/gpu/d3d11] [ 35] {
[   1.229][d][vo/gpu/d3d11] [ 36]     float _138;
[   1.229][d][vo/gpu/d3d11] [ 37]     _138 = 0.0f;
[   1.229][d][vo/gpu/d3d11] [ 38]     for (int _137 = 0; _137 < 5; )
[   1.229][d][vo/gpu/d3d11] [ 39]     {
[   1.229][d][vo/gpu/d3d11] [ 40]         _138 = max((_32.Sample(__32_sampler, mad(_41_m12, float2(0.0f, float(_137 - 2)), _36)) * 1.0f).x, _138);
[   1.229][d][vo/gpu/d3d11] [ 41]         _137++;
[   1.229][d][vo/gpu/d3d11] [ 42]         continue;
[   1.229][d][vo/gpu/d3d11] [ 43]     }
[   1.229][d][vo/gpu/d3d11] [ 44]     float4 _130 = float4(_138, 0.0f, 0.0f, 0.0f);
[   1.229][d][vo/gpu/d3d11] [ 45]     _130.y = 0.0f;
[   1.229][d][vo/gpu/d3d11] [ 46]     _130.z = 0.0f;
[   1.229][d][vo/gpu/d3d11] [ 47]     _130.w = 1.0f;
[   1.229][d][vo/gpu/d3d11] [ 48]     _87 = _130;
[   1.229][d][vo/gpu/d3d11] [ 49] }
[   1.229][d][vo/gpu/d3d11] [ 50] 
[   1.229][d][vo/gpu/d3d11] [ 51] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.229][d][vo/gpu/d3d11] [ 52] {
[   1.229][d][vo/gpu/d3d11] [ 53]     _36 = stage_input._36;
[   1.229][d][vo/gpu/d3d11] [ 54]     frag_main();
[   1.229][d][vo/gpu/d3d11] [ 55]     SPIRV_Cross_Output stage_output;
[   1.229][d][vo/gpu/d3d11] [ 56]     stage_output._87 = _87;
[   1.229][d][vo/gpu/d3d11] [ 57]     return stage_output;
[   1.229][d][vo/gpu/d3d11] [ 58] }
[   1.229][d][vo/gpu] Resizing texture: 1920x800
[   1.231][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.233][v][vo/gpu/d3d11] Compiled a vertex shader in 3643us
[   1.233][v][vo/gpu/d3d11] shaderc: 1996us, SPIRV-Cross: 153us, D3DCompile: 1494us
[   1.233][d][vo/gpu/d3d11] GLSL source:
[   1.233][d][vo/gpu/d3d11] [  1] #version 450
[   1.233][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.233][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.233][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.233][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.233][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.233][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.233][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.233][d][vo/gpu/d3d11] [  9] void main() {
[   1.233][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.233][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   1.233][d][vo/gpu/d3d11] [ 12] }
[   1.233][d][vo/gpu/d3d11] HLSL source:
[   1.233][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.233][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.233][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.233][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.233][d][vo/gpu/d3d11] [  5] 
[   1.233][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   1.233][d][vo/gpu/d3d11] [  7] {
[   1.233][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   1.233][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   1.233][d][vo/gpu/d3d11] [ 10] };
[   1.233][d][vo/gpu/d3d11] [ 11] 
[   1.233][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   1.233][d][vo/gpu/d3d11] [ 13] {
[   1.233][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   1.233][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   1.233][d][vo/gpu/d3d11] [ 16] };
[   1.233][d][vo/gpu/d3d11] [ 17] 
[   1.233][d][vo/gpu/d3d11] [ 18] void vert_main()
[   1.233][d][vo/gpu/d3d11] [ 19] {
[   1.233][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.233][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   1.233][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   1.233][d][vo/gpu/d3d11] [ 23] }
[   1.233][d][vo/gpu/d3d11] [ 24] 
[   1.233][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.233][d][vo/gpu/d3d11] [ 26] {
[   1.233][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   1.233][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   1.233][d][vo/gpu/d3d11] [ 29]     vert_main();
[   1.233][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   1.233][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   1.233][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   1.233][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   1.233][d][vo/gpu/d3d11] [ 34] }
[   1.239][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.252][v][vo/gpu/d3d11] Compiled a fragment shader in 18978us
[   1.252][v][vo/gpu/d3d11] shaderc: 6703us, SPIRV-Cross: 433us, D3DCompile: 11842us
[   1.252][d][vo/gpu/d3d11] GLSL source:
[   1.252][d][vo/gpu/d3d11] [  1] #version 450
[   1.252][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.252][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.252][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.252][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.252][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.252][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.252][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   1.252][d][vo/gpu/d3d11] [  9] layout(offset=0) float random;
[   1.252][d][vo/gpu/d3d11] [ 10] layout(offset=4) int frame;
[   1.252][d][vo/gpu/d3d11] [ 11] layout(offset=8) vec2 input_size;
[   1.252][d][vo/gpu/d3d11] [ 12] layout(offset=16) vec2 target_size;
[   1.252][d][vo/gpu/d3d11] [ 13] layout(offset=24) vec2 tex_offset;
[   1.252][d][vo/gpu/d3d11] [ 14] layout(offset=32) vec2 texture_size0;
[   1.252][d][vo/gpu/d3d11] [ 15] layout(offset=48) mat2 texture_rot0;
[   1.252][d][vo/gpu/d3d11] [ 16] layout(offset=80) vec2 texture_off0;
[   1.252][d][vo/gpu/d3d11] [ 17] layout(offset=88) vec2 pixel_size0;
[   1.252][d][vo/gpu/d3d11] [ 18] };
[   1.252][d][vo/gpu/d3d11] [ 19] layout(binding=0) uniform sampler2D texture0;
[   1.252][d][vo/gpu/d3d11] [ 20] #define MAIN_raw texture0
[   1.252][d][vo/gpu/d3d11] [ 21] #define MAIN_pos texcoord0
[   1.252][d][vo/gpu/d3d11] [ 22] #define MAIN_size texture_size0
[   1.252][d][vo/gpu/d3d11] [ 23] #define MAIN_rot texture_rot0
[   1.252][d][vo/gpu/d3d11] [ 24] #define MAIN_off texture_off0
[   1.252][d][vo/gpu/d3d11] [ 25] #define MAIN_pt pixel_size0
[   1.252][d][vo/gpu/d3d11] [ 26] #define MAIN_map texmap0
[   1.252][d][vo/gpu/d3d11] [ 27] #define MAIN_mul 1.000000
[   1.252][d][vo/gpu/d3d11] [ 28] #define MAIN_tex(pos) (MAIN_mul * vec4(texture(MAIN_raw, pos)).rgba)
[   1.252][d][vo/gpu/d3d11] [ 29] #define MAIN_gather(pos, c) (MAIN_mul * vec4(textureGather(MAIN_raw, pos, c)))
[   1.252][d][vo/gpu/d3d11] [ 30] #define MAIN_texOff(off) MAIN_tex(MAIN_pos + MAIN_pt * vec2(off))
[   1.252][d][vo/gpu/d3d11] [ 31] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   1.252][d][vo/gpu/d3d11] [ 32] vec4 hook() {
[   1.252][d][vo/gpu/d3d11] [ 33]     vec4 result = mat4(0.1690102, -0.2560719, 0.39658326, -0.3679659, -0.27616683, -0.35619372, -0.3748396, 0.08430813, -0.29574734, -0.31511316, -0.09773105, 0.13616018, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   1.252][d][vo/gpu/d3d11] [ 34]     result += mat4(-0.1326393, -0.259433, 0.025070239, 0.58914864, -0.036478516, 0.30723435, 0.007458902, 0.012962684, 0.2493056, 0.13007334, -0.08448256, -0.38414413, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   1.252][d][vo/gpu/d3d11] [ 35]     result += mat4(-0.11539356, 0.35253766, 0.26143202, 0.2760807, -0.09371543, -0.028165473, -0.028452158, -0.27050856, 0.06718067, -0.0056619495, -0.17654495, 0.17288211, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   1.252][d][vo/gpu/d3d11] [ 36]     result += mat4(-0.16145481, -0.3204927, -0.54317135, 0.11830119, 0.49315026, 0.12008072, 0.50857407, -0.30382085, 0.25807253, 0.020755528, 0.29388228, 0.106109895, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   1.252][d][vo/gpu/d3d11] [ 37]     result += mat4(-0.22728722, 0.50484747, -0.07904469, 0.33114597, 0.50306976, -0.22760947, 0.14773269, 0.17628263, 0.14788547, -0.08223464, -0.10880935, -0.3151985, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   1.252][d][vo/gpu/d3d11] [ 38]     result += mat4(0.3414351, 0.057279214, -0.14419858, 0.09761111, -0.11794496, 0.021717256, -0.22750235, 0.13986664, -0.38932344, 0.28996095, 0.3773904, 0.13175532, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   1.252][d][vo/gpu/d3d11] [ 39]     result += mat4(0.1376552, -0.19587159, -0.35147396, -0.097646296, 0.1686707, -0.14385861, 0.031198, 0.12383533, -0.23089902, 0.08707301, 0.3362293, -0.100579016, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   1.252][d][vo/gpu/d3d11] [ 40]     result += mat4(-0.056774966, 0.047585852, -0.36395878, -0.20211312, 0.4077735, 0.12631284, 0.39813092, -0.033365678, 0.2307249, -0.09131807, 0.20823865, 0.31084216, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   1.252][d][vo/gpu/d3d11] [ 41]     result += mat4(-0.12456089, 0.09755632, 0.31490886, -0.06579996, -0.13386595, 0.07564795, -0.26605195, -0.075180635, -0.11182657, 0.06757017, -0.14351276, -0.16828312, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   1.252][d][vo/gpu/d3d11] [ 42]     result += vec4(-0.046043985, 0.055581126, -0.08791638, -0.13022089);
[   1.252][d][vo/gpu/d3d11] [ 43]     return result;
[   1.252][d][vo/gpu/d3d11] [ 44] }
[   1.252][d][vo/gpu/d3d11] [ 45] void main() {
[   1.252][d][vo/gpu/d3d11] [ 46] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.252][d][vo/gpu/d3d11] [ 47] color = hook();
[   1.252][d][vo/gpu/d3d11] [ 48] out_color = color;
[   1.252][d][vo/gpu/d3d11] [ 49] }
[   1.252][d][vo/gpu/d3d11] HLSL source:
[   1.252][d][vo/gpu/d3d11] [  1] cbuffer _44_46 : register(b0)
[   1.252][d][vo/gpu/d3d11] [  2] {
[   1.252][d][vo/gpu/d3d11] [  3]     float _46_m0 : packoffset(c0);
[   1.252][d][vo/gpu/d3d11] [  4]     int _46_m1 : packoffset(c0.y);
[   1.252][d][vo/gpu/d3d11] [  5]     float2 _46_m2 : packoffset(c0.z);
[   1.252][d][vo/gpu/d3d11] [  6]     float2 _46_m3 : packoffset(c1);
[   1.252][d][vo/gpu/d3d11] [  7]     float2 _46_m4 : packoffset(c1.z);
[   1.252][d][vo/gpu/d3d11] [  8]     float2 _46_m5 : packoffset(c2);
[   1.252][d][vo/gpu/d3d11] [  9]     row_major float2x2 _46_m6 : packoffset(c3);
[   1.252][d][vo/gpu/d3d11] [ 10]     float2 _46_m7 : packoffset(c5);
[   1.252][d][vo/gpu/d3d11] [ 11]     float2 _46_m8 : packoffset(c5.z);
[   1.252][d][vo/gpu/d3d11] [ 12] };
[   1.252][d][vo/gpu/d3d11] [ 13] 
[   1.252][d][vo/gpu/d3d11] [ 14] Texture2D<float4> _36 : register(t0);
[   1.252][d][vo/gpu/d3d11] [ 15] SamplerState __36_sampler : register(s0);
[   1.252][d][vo/gpu/d3d11] [ 16] 
[   1.252][d][vo/gpu/d3d11] [ 17] static float2 _40;
[   1.252][d][vo/gpu/d3d11] [ 18] static float4 _341;
[   1.252][d][vo/gpu/d3d11] [ 19] 
[   1.252][d][vo/gpu/d3d11] [ 20] struct SPIRV_Cross_Input
[   1.252][d][vo/gpu/d3d11] [ 21] {
[   1.252][d][vo/gpu/d3d11] [ 22]     float2 _40 : TEXCOORD1;
[   1.252][d][vo/gpu/d3d11] [ 23] };
[   1.252][d][vo/gpu/d3d11] [ 24] 
[   1.252][d][vo/gpu/d3d11] [ 25] struct SPIRV_Cross_Output
[   1.252][d][vo/gpu/d3d11] [ 26] {
[   1.252][d][vo/gpu/d3d11] [ 27]     float4 _341 : SV_Target0;
[   1.252][d][vo/gpu/d3d11] [ 28] };
[   1.252][d][vo/gpu/d3d11] [ 29] 
[   1.252][d][vo/gpu/d3d11] [ 30] void frag_main()
[   1.252][d][vo/gpu/d3d11] [ 31] {
[   1.252][d][vo/gpu/d3d11] [ 32]     _341 = ((((((((mul(_36.Sample(__36_sampler, mad(_46_m8, (-1.0f).xx, _40)) * 1.0f, float4x4(float4(0.16901020705699920654296875f, -0.2560718953609466552734375f, 0.396583259105682373046875f, -0.3679659068584442138671875f), float4(-0.2761668264865875244140625f, -0.356193721294403076171875f, -0.374839603900909423828125f, 0.08430813252925872802734375f), float4(-0.295747339725494384765625f, -0.3151131570339202880859375f, -0.097731046378612518310546875f, 0.13616017997264862060546875f), 0.0f.xxxx)) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(-1.0f, 0.0f), _40)) * 1.0f, float4x4(float4(-0.13263930380344390869140625f, -0.2594330012798309326171875f, 0.0250702388584613800048828125f, 0.58914864063262939453125f), float4(-0.0364785157144069671630859375f, 0.307234346866607666015625f, 0.007458901964128017425537109375f, 0.01296268403530120849609375f), float4(0.24930560588836669921875f, 0.1300733387470245361328125f, -0.084482558071613311767578125f, -0.384144127368927001953125f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(-1.0f, 1.0f), _40)) * 1.0f, float4x4(float4(-0.115393556654453277587890625f, 0.3525376617908477783203125f, 0.2614320218563079833984375f, 0.2760806977748870849609375f), float4(-0.0937154293060302734375f, -0.02816547267138957977294921875f, -0.0284521579742431640625f, -0.2705085575580596923828125f), float4(0.067180670797824859619140625f, -0.00566194951534271240234375f, -0.17654494941234588623046875f, 0.1728821098804473876953125f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(0.0f, -1.0f), _40)) * 1.0f, float4x4(float4(-0.16145481169223785400390625f, -0.3204927146434783935546875f, -0.543171346187591552734375f, 0.118301190435886383056640625f), float4(0.4931502640247344970703125f, 0.120080716907978057861328125f, 0.508574068546295166015625f, -0.3038208484649658203125f), float4(0.2580725252628326416015625f, 0.02075552754104137420654296875f, 0.2938822805881500244140625f, 0.106109894812107086181640625f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, _40) * 1.0f, float4x4(float4(-0.22728721797466278076171875f, 0.504847466945648193359375f, -0.079044692218303680419921875f, 0.3311459720134735107421875f), float4(0.50306975841522216796875f, -0.22760947048664093017578125f, 0.14773268997669219970703125f, 0.17628262937068939208984375f), float4(0.1478854715824127197265625f, -0.082234643399715423583984375f, -0.10880935192108154296875f, -0.3151985108852386474609375f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(0.0f, 1.0f), _40)) * 1.0f, float4x4(float4(0.3414351046085357666015625f, 0.05727921426296234130859375f, -0.14419858157634735107421875f, 0.097611106932163238525390625f), float4(-0.117944963276386260986328125f, 0.02171725593507289886474609375f, -0.227502346038818359375f, 0.13986663520336151123046875f), float4(-0.3893234431743621826171875f, 0.2899609506130218505859375f, 0.3773904144763946533203125f, 0.1317553222179412841796875f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(1.0f, -1.0f), _40)) * 1.0f, float4x4(float4(0.137655198574066162109375f, -0.1958715915679931640625f, -0.3514739573001861572265625f, -0.097646296024322509765625f), float4(0.16867069900035858154296875f, -0.143858611583709716796875f, 0.03119800053536891937255859375f, 0.123835332691669464111328125f), float4(-0.23089902102947235107421875f, 0.08707301318645477294921875f, 0.3362292945384979248046875f, -0.100579015910625457763671875f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(1.0f, 0.0f), _40)) * 1.0f, float4x4(float4(-0.056774966418743133544921875f, 0.047585852444171905517578125f, -0.363958775997161865234375f, -0.2021131217479705810546875f), float4(0.407773494720458984375f, 0.12631283700466156005859375f, 0.3981309235095977783203125f, -0.0333656780421733856201171875f), float4(0.2307249009609222412109375f, -0.091318070888519287109375f, 0.20823864638805389404296875f, 0.31084215641021728515625f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, _40 + _46_m8) * 1.0f, float4x4(float4(-0.124560892581939697265625f, 0.0975563228130340576171875f, 0.31490886211395263671875f, -0.065799959003925323486328125f), float4(-0.13386595249176025390625f, 0.07564795017242431640625f, -0.266051948070526123046875f, -0.07518063485622406005859375f), float4(-0.1118265688419342041015625f, 0.067570172250270843505859375f, -0.1435127556324005126953125f, -0.16828311979770660400390625f), 0.0f.xxxx))) + float4(-0.046043984591960906982421875f, 0.0555811263620853424072265625f, -0.087916381657123565673828125f, -0.130220890045166015625f);
[   1.253][d][vo/gpu/d3d11] [ 33] }
[   1.253][d][vo/gpu/d3d11] [ 34] 
[   1.253][d][vo/gpu/d3d11] [ 35] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.253][d][vo/gpu/d3d11] [ 36] {
[   1.253][d][vo/gpu/d3d11] [ 37]     _40 = stage_input._40;
[   1.253][d][vo/gpu/d3d11] [ 38]     frag_main();
[   1.253][d][vo/gpu/d3d11] [ 39]     SPIRV_Cross_Output stage_output;
[   1.253][d][vo/gpu/d3d11] [ 40]     stage_output._341 = _341;
[   1.253][d][vo/gpu/d3d11] [ 41]     return stage_output;
[   1.253][d][vo/gpu/d3d11] [ 42] }
[   1.253][d][vo/gpu] Resizing texture: 1920x800
[   1.256][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.258][v][vo/gpu/d3d11] Compiled a vertex shader in 5191us
[   1.258][v][vo/gpu/d3d11] shaderc: 2923us, SPIRV-Cross: 131us, D3DCompile: 2137us
[   1.258][d][vo/gpu/d3d11] GLSL source:
[   1.258][d][vo/gpu/d3d11] [  1] #version 450
[   1.258][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.258][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.258][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.258][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.258][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.258][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.258][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.258][d][vo/gpu/d3d11] [  9] void main() {
[   1.258][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.258][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   1.258][d][vo/gpu/d3d11] [ 12] }
[   1.258][d][vo/gpu/d3d11] HLSL source:
[   1.258][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.258][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.258][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.258][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.258][d][vo/gpu/d3d11] [  5] 
[   1.258][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   1.258][d][vo/gpu/d3d11] [  7] {
[   1.258][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   1.258][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   1.258][d][vo/gpu/d3d11] [ 10] };
[   1.258][d][vo/gpu/d3d11] [ 11] 
[   1.258][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   1.258][d][vo/gpu/d3d11] [ 13] {
[   1.258][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   1.258][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   1.258][d][vo/gpu/d3d11] [ 16] };
[   1.258][d][vo/gpu/d3d11] [ 17] 
[   1.258][d][vo/gpu/d3d11] [ 18] void vert_main()
[   1.258][d][vo/gpu/d3d11] [ 19] {
[   1.258][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.258][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   1.258][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   1.258][d][vo/gpu/d3d11] [ 23] }
[   1.258][d][vo/gpu/d3d11] [ 24] 
[   1.258][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.258][d][vo/gpu/d3d11] [ 26] {
[   1.258][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   1.258][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   1.258][d][vo/gpu/d3d11] [ 29]     vert_main();
[   1.258][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   1.258][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   1.258][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   1.258][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   1.258][d][vo/gpu/d3d11] [ 34] }
[   1.267][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.280][v][vo/gpu/d3d11] Compiled a fragment shader in 21574us
[   1.280][v][vo/gpu/d3d11] shaderc: 8495us, SPIRV-Cross: 551us, D3DCompile: 12528us
[   1.280][d][vo/gpu/d3d11] GLSL source:
[   1.280][d][vo/gpu/d3d11] [  1] #version 450
[   1.280][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.280][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.280][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.280][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.280][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.280][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.280][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   1.280][d][vo/gpu/d3d11] [  9] layout(offset=0) float random;
[   1.280][d][vo/gpu/d3d11] [ 10] layout(offset=4) int frame;
[   1.280][d][vo/gpu/d3d11] [ 11] layout(offset=8) vec2 input_size;
[   1.280][d][vo/gpu/d3d11] [ 12] layout(offset=16) vec2 target_size;
[   1.280][d][vo/gpu/d3d11] [ 13] layout(offset=24) vec2 tex_offset;
[   1.280][d][vo/gpu/d3d11] [ 14] layout(offset=32) vec2 texture_size0;
[   1.280][d][vo/gpu/d3d11] [ 15] layout(offset=48) mat2 texture_rot0;
[   1.280][d][vo/gpu/d3d11] [ 16] layout(offset=80) vec2 texture_off0;
[   1.280][d][vo/gpu/d3d11] [ 17] layout(offset=88) vec2 pixel_size0;
[   1.280][d][vo/gpu/d3d11] [ 18] };
[   1.280][d][vo/gpu/d3d11] [ 19] layout(binding=0) uniform sampler2D texture0;
[   1.280][d][vo/gpu/d3d11] [ 20] #define MAIN_raw texture0
[   1.280][d][vo/gpu/d3d11] [ 21] #define MAIN_pos texcoord0
[   1.280][d][vo/gpu/d3d11] [ 22] #define MAIN_size texture_size0
[   1.280][d][vo/gpu/d3d11] [ 23] #define MAIN_rot texture_rot0
[   1.280][d][vo/gpu/d3d11] [ 24] #define MAIN_off texture_off0
[   1.280][d][vo/gpu/d3d11] [ 25] #define MAIN_pt pixel_size0
[   1.280][d][vo/gpu/d3d11] [ 26] #define MAIN_map texmap0
[   1.280][d][vo/gpu/d3d11] [ 27] #define MAIN_mul 1.000000
[   1.280][d][vo/gpu/d3d11] [ 28] #define MAIN_tex(pos) (MAIN_mul * vec4(texture(MAIN_raw, pos)).rgba)
[   1.280][d][vo/gpu/d3d11] [ 29] #define MAIN_gather(pos, c) (MAIN_mul * vec4(textureGather(MAIN_raw, pos, c)))
[   1.280][d][vo/gpu/d3d11] [ 30] #define MAIN_texOff(off) MAIN_tex(MAIN_pos + MAIN_pt * vec2(off))
[   1.280][d][vo/gpu/d3d11] [ 31] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   1.280][d][vo/gpu/d3d11] [ 32] vec4 hook() {
[   1.280][d][vo/gpu/d3d11] [ 33]     vec4 result = mat4(-0.15485518, -0.29363206, -0.22610365, -0.14291525, -0.45240572, -0.18319772, -0.12209436, 0.15031648, 0.09878383, 0.06711082, 0.25763842, -0.084633484, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   1.280][d][vo/gpu/d3d11] [ 34]     result += mat4(-0.10204406, 0.16167697, 0.22371867, -0.37947702, -0.24476196, -0.038824454, 0.060157117, 0.15764871, -0.08072927, -0.2210841, -0.31835055, 0.009979876, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   1.280][d][vo/gpu/d3d11] [ 35]     result += mat4(0.20506924, 0.21132155, -0.0922578, -0.07430473, 0.14529926, 0.20549752, 0.0077948375, 0.13246094, -0.32353187, 0.21074104, 0.092629515, 0.17590871, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   1.280][d][vo/gpu/d3d11] [ 36]     result += mat4(0.04125819, -0.44050243, 0.23729716, 0.3218237, 0.12943116, -0.011674174, 0.10390632, 0.027775545, -0.20308031, -0.16904089, -0.2121676, -0.022515794, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   1.280][d][vo/gpu/d3d11] [ 37]     result += mat4(0.09664124, 0.20127031, 0.60345304, 0.16697013, 0.23093723, -0.38116834, 0.109695725, 0.0007595324, 0.4092646, 0.009624758, 0.11229678, 0.25326383, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   1.280][d][vo/gpu/d3d11] [ 38]     result += mat4(0.014879592, 0.19204311, 0.07102085, -0.7312604, 0.34860876, 0.3429918, -0.027331594, 0.27636307, 0.1342437, 0.107820466, -0.12645108, 0.21081445, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   1.280][d][vo/gpu/d3d11] [ 39]     result += mat4(-0.12687613, -0.09247973, -0.25973785, 0.4350873, -0.18987224, 0.028678741, -0.0903819, -0.63974863, 0.205591, 0.11308998, 0.18458389, -0.4149041, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   1.280][d][vo/gpu/d3d11] [ 40]     result += mat4(0.34691808, -0.025498383, 0.3428986, 0.21663484, 0.23404741, -0.1725327, -0.0036315925, -0.13299675, -0.1873967, 0.031331502, -0.08785591, -0.0013278709, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   1.280][d][vo/gpu/d3d11] [ 41]     result += mat4(-0.35846514, 0.048703704, -0.104165934, 0.16529736, -0.15378916, 0.26030356, -0.07134151, 0.03692383, -0.15807101, -0.18885155, 0.044707954, -0.11444462, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   1.280][d][vo/gpu/d3d11] [ 42]     result += vec4(-0.0022791293, -0.024132347, -0.57621074, 0.028573977);
[   1.280][d][vo/gpu/d3d11] [ 43]     return result;
[   1.280][d][vo/gpu/d3d11] [ 44] }
[   1.280][d][vo/gpu/d3d11] [ 45] void main() {
[   1.280][d][vo/gpu/d3d11] [ 46] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.280][d][vo/gpu/d3d11] [ 47] color = hook();
[   1.280][d][vo/gpu/d3d11] [ 48] out_color = color;
[   1.280][d][vo/gpu/d3d11] [ 49] }
[   1.280][d][vo/gpu/d3d11] HLSL source:
[   1.280][d][vo/gpu/d3d11] [  1] cbuffer _44_46 : register(b0)
[   1.280][d][vo/gpu/d3d11] [  2] {
[   1.280][d][vo/gpu/d3d11] [  3]     float _46_m0 : packoffset(c0);
[   1.280][d][vo/gpu/d3d11] [  4]     int _46_m1 : packoffset(c0.y);
[   1.280][d][vo/gpu/d3d11] [  5]     float2 _46_m2 : packoffset(c0.z);
[   1.280][d][vo/gpu/d3d11] [  6]     float2 _46_m3 : packoffset(c1);
[   1.280][d][vo/gpu/d3d11] [  7]     float2 _46_m4 : packoffset(c1.z);
[   1.280][d][vo/gpu/d3d11] [  8]     float2 _46_m5 : packoffset(c2);
[   1.280][d][vo/gpu/d3d11] [  9]     row_major float2x2 _46_m6 : packoffset(c3);
[   1.280][d][vo/gpu/d3d11] [ 10]     float2 _46_m7 : packoffset(c5);
[   1.280][d][vo/gpu/d3d11] [ 11]     float2 _46_m8 : packoffset(c5.z);
[   1.280][d][vo/gpu/d3d11] [ 12] };
[   1.280][d][vo/gpu/d3d11] [ 13] 
[   1.280][d][vo/gpu/d3d11] [ 14] Texture2D<float4> _36 : register(t0);
[   1.280][d][vo/gpu/d3d11] [ 15] SamplerState __36_sampler : register(s0);
[   1.280][d][vo/gpu/d3d11] [ 16] 
[   1.280][d][vo/gpu/d3d11] [ 17] static float2 _40;
[   1.280][d][vo/gpu/d3d11] [ 18] static float4 _341;
[   1.280][d][vo/gpu/d3d11] [ 19] 
[   1.280][d][vo/gpu/d3d11] [ 20] struct SPIRV_Cross_Input
[   1.280][d][vo/gpu/d3d11] [ 21] {
[   1.280][d][vo/gpu/d3d11] [ 22]     float2 _40 : TEXCOORD1;
[   1.280][d][vo/gpu/d3d11] [ 23] };
[   1.280][d][vo/gpu/d3d11] [ 24] 
[   1.280][d][vo/gpu/d3d11] [ 25] struct SPIRV_Cross_Output
[   1.280][d][vo/gpu/d3d11] [ 26] {
[   1.280][d][vo/gpu/d3d11] [ 27]     float4 _341 : SV_Target0;
[   1.280][d][vo/gpu/d3d11] [ 28] };
[   1.280][d][vo/gpu/d3d11] [ 29] 
[   1.280][d][vo/gpu/d3d11] [ 30] void frag_main()
[   1.280][d][vo/gpu/d3d11] [ 31] {
[   1.280][d][vo/gpu/d3d11] [ 32]     _341 = ((((((((mul(_36.Sample(__36_sampler, mad(_46_m8, (-1.0f).xx, _40)) * 1.0f, float4x4(float4(-0.15485517680644989013671875f, -0.2936320602893829345703125f, -0.22610364854335784912109375f, -0.142915248870849609375f), float4(-0.4524057209491729736328125f, -0.18319772183895111083984375f, -0.1220943629741668701171875f, 0.1503164768218994140625f), float4(0.098783828318119049072265625f, 0.06711082160472869873046875f, 0.2576384246349334716796875f, -0.08463348448276519775390625f), 0.0f.xxxx)) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(-1.0f, 0.0f), _40)) * 1.0f, float4x4(float4(-0.10204406082630157470703125f, 0.1616769731044769287109375f, 0.2237186729907989501953125f, -0.379477024078369140625f), float4(-0.24476195871829986572265625f, -0.03882445394992828369140625f, 0.0601571165025234222412109375f, 0.1576487123966217041015625f), float4(-0.080729268491268157958984375f, -0.22108410298824310302734375f, -0.3183505535125732421875f, 0.00997987575829029083251953125f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(-1.0f, 1.0f), _40)) * 1.0f, float4x4(float4(0.205069243907928466796875f, 0.21132154762744903564453125f, -0.092257797718048095703125f, -0.0743047297000885009765625f), float4(0.145299255847930908203125f, 0.20549751818180084228515625f, 0.007794837467372417449951171875f, 0.13246093690395355224609375f), float4(-0.3235318660736083984375f, 0.2107410430908203125f, 0.092629514634609222412109375f, 0.1759087145328521728515625f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(0.0f, -1.0f), _40)) * 1.0f, float4x4(float4(0.0412581898272037506103515625f, -0.4405024349689483642578125f, 0.23729716241359710693359375f, 0.3218236863613128662109375f), float4(0.1294311583042144775390625f, -0.011674174107611179351806640625f, 0.10390631854534149169921875f, 0.0277755446732044219970703125f), float4(-0.20308031141757965087890625f, -0.1690408885478973388671875f, -0.21216760575771331787109375f, -0.02251579426229000091552734375f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, _40) * 1.0f, float4x4(float4(0.096641242504119873046875f, 0.2012703120708465576171875f, 0.60345304012298583984375f, 0.16697013378143310546875f), float4(0.23093722760677337646484375f, -0.3811683356761932373046875f, 0.109695725142955780029296875f, 0.0007595323841087520122528076171875f), float4(0.4092645943164825439453125f, 0.009624757803976535797119140625f, 0.112296782433986663818359375f, 0.25326383113861083984375f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(0.0f, 1.0f), _40)) * 1.0f, float4x4(float4(0.014879591763019561767578125f, 0.19204311072826385498046875f, 0.071020849049091339111328125f, -0.73126041889190673828125f), float4(0.3486087620258331298828125f, 0.3429917991161346435546875f, -0.0273315943777561187744140625f, 0.276363074779510498046875f), float4(0.1342436969280242919921875f, 0.10782046616077423095703125f, -0.126451075077056884765625f, 0.2108144462108612060546875f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(1.0f, -1.0f), _40)) * 1.0f, float4x4(float4(-0.12687613070011138916015625f, -0.092479728162288665771484375f, -0.25973784923553466796875f, 0.4350872933864593505859375f), float4(-0.1898722350597381591796875f, 0.0286787413060665130615234375f, -0.090381897985935211181640625f, -0.639748632907867431640625f), float4(0.2055909931659698486328125f, 0.113089978694915771484375f, 0.18458388745784759521484375f, -0.4149040877819061279296875f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, mad(_46_m8, float2(1.0f, 0.0f), _40)) * 1.0f, float4x4(float4(0.3469180762767791748046875f, -0.025498382747173309326171875f, 0.3428986072540283203125f, 0.2166348397731781005859375f), float4(0.234047412872314453125f, -0.17253269255161285400390625f, -0.00363159249536693096160888671875f, -0.13299675285816192626953125f), float4(-0.187396705150604248046875f, 0.031331501901149749755859375f, -0.087855912744998931884765625f, -0.0013278708793222904205322265625f), 0.0f.xxxx))) + mul(_36.Sample(__36_sampler, _40 + _46_m8) * 1.0f, float4x4(float4(-0.358465135097503662109375f, 0.0487037040293216705322265625f, -0.104165934026241302490234375f, 0.1652973592281341552734375f), float4(-0.15378916263580322265625f, 0.260303556919097900390625f, -0.071341507136821746826171875f, 0.0369238294661045074462890625f), float4(-0.1580710113048553466796875f, -0.18885155022144317626953125f, 0.044707953929901123046875f, -0.114444620907306671142578125f), 0.0f.xxxx))) + float4(-0.0022791293449699878692626953125f, -0.02413234673440456390380859375f, -0.5762107372283935546875f, 0.02857397682964801788330078125f);
[   1.280][d][vo/gpu/d3d11] [ 33] }
[   1.280][d][vo/gpu/d3d11] [ 34] 
[   1.280][d][vo/gpu/d3d11] [ 35] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.280][d][vo/gpu/d3d11] [ 36] {
[   1.280][d][vo/gpu/d3d11] [ 37]     _40 = stage_input._40;
[   1.280][d][vo/gpu/d3d11] [ 38]     frag_main();
[   1.280][d][vo/gpu/d3d11] [ 39]     SPIRV_Cross_Output stage_output;
[   1.280][d][vo/gpu/d3d11] [ 40]     stage_output._341 = _341;
[   1.280][d][vo/gpu/d3d11] [ 41]     return stage_output;
[   1.280][d][vo/gpu/d3d11] [ 42] }
[   1.280][d][vo/gpu] Resizing texture: 1920x800
[   1.283][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.285][v][vo/gpu/d3d11] Compiled a vertex shader in 4147us
[   1.285][v][vo/gpu/d3d11] shaderc: 2363us, SPIRV-Cross: 121us, D3DCompile: 1663us
[   1.285][d][vo/gpu/d3d11] GLSL source:
[   1.285][d][vo/gpu/d3d11] [  1] #version 450
[   1.285][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.285][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.285][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.285][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.285][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.285][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.285][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.285][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.285][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.285][d][vo/gpu/d3d11] [ 11] void main() {
[   1.285][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.285][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.285][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.285][d][vo/gpu/d3d11] [ 15] }
[   1.285][d][vo/gpu/d3d11] HLSL source:
[   1.285][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.285][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.285][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.285][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.285][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.285][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.285][d][vo/gpu/d3d11] [  7] 
[   1.285][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.285][d][vo/gpu/d3d11] [  9] {
[   1.285][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.285][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.285][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.285][d][vo/gpu/d3d11] [ 13] };
[   1.285][d][vo/gpu/d3d11] [ 14] 
[   1.285][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.285][d][vo/gpu/d3d11] [ 16] {
[   1.285][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.285][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.285][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.285][d][vo/gpu/d3d11] [ 20] };
[   1.285][d][vo/gpu/d3d11] [ 21] 
[   1.285][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.285][d][vo/gpu/d3d11] [ 23] {
[   1.285][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.285][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.285][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.285][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.285][d][vo/gpu/d3d11] [ 28] }
[   1.285][d][vo/gpu/d3d11] [ 29] 
[   1.285][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.285][d][vo/gpu/d3d11] [ 31] {
[   1.285][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.285][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.285][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.285][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.285][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.285][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.285][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.285][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.285][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.285][d][vo/gpu/d3d11] [ 41] }
[   1.312][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.361][v][vo/gpu/d3d11] Compiled a fragment shader in 76142us
[   1.361][v][vo/gpu/d3d11] shaderc: 26963us, SPIRV-Cross: 2880us, D3DCompile: 46299us
[   1.361][d][vo/gpu/d3d11] GLSL source:
[   1.361][d][vo/gpu/d3d11] [  1] #version 450
[   1.361][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.361][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.361][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.361][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.361][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.361][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.361][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.361][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.361][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.361][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.361][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.361][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.361][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.361][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.361][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.361][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.361][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.361][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.361][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.361][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.361][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.361][d][vo/gpu/d3d11] [ 23] };
[   1.361][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.361][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.361][d][vo/gpu/d3d11] [ 26] #define conv2d_tf_raw texture0
[   1.361][d][vo/gpu/d3d11] [ 27] #define conv2d_tf_pos texcoord0
[   1.361][d][vo/gpu/d3d11] [ 28] #define conv2d_tf_size texture_size0
[   1.361][d][vo/gpu/d3d11] [ 29] #define conv2d_tf_rot texture_rot0
[   1.361][d][vo/gpu/d3d11] [ 30] #define conv2d_tf_off texture_off0
[   1.361][d][vo/gpu/d3d11] [ 31] #define conv2d_tf_pt pixel_size0
[   1.361][d][vo/gpu/d3d11] [ 32] #define conv2d_tf_map texmap0
[   1.361][d][vo/gpu/d3d11] [ 33] #define conv2d_tf_mul 1.000000
[   1.361][d][vo/gpu/d3d11] [ 34] #define conv2d_tf_tex(pos) (conv2d_tf_mul * vec4(texture(conv2d_tf_raw, pos)).rgba)
[   1.361][d][vo/gpu/d3d11] [ 35] #define conv2d_tf_gather(pos, c) (conv2d_tf_mul * vec4(textureGather(conv2d_tf_raw, pos, c)))
[   1.361][d][vo/gpu/d3d11] [ 36] #define conv2d_tf_texOff(off) conv2d_tf_tex(conv2d_tf_pos + conv2d_tf_pt * vec2(off))
[   1.361][d][vo/gpu/d3d11] [ 37] #define conv2d_tf1_raw texture1
[   1.361][d][vo/gpu/d3d11] [ 38] #define conv2d_tf1_pos texcoord1
[   1.361][d][vo/gpu/d3d11] [ 39] #define conv2d_tf1_size texture_size1
[   1.361][d][vo/gpu/d3d11] [ 40] #define conv2d_tf1_rot texture_rot1
[   1.361][d][vo/gpu/d3d11] [ 41] #define conv2d_tf1_off texture_off1
[   1.361][d][vo/gpu/d3d11] [ 42] #define conv2d_tf1_pt pixel_size1
[   1.361][d][vo/gpu/d3d11] [ 43] #define conv2d_tf1_map texmap1
[   1.361][d][vo/gpu/d3d11] [ 44] #define conv2d_tf1_mul 1.000000
[   1.361][d][vo/gpu/d3d11] [ 45] #define conv2d_tf1_tex(pos) (conv2d_tf1_mul * vec4(texture(conv2d_tf1_raw, pos)).rgba)
[   1.361][d][vo/gpu/d3d11] [ 46] #define conv2d_tf1_gather(pos, c) (conv2d_tf1_mul * vec4(textureGather(conv2d_tf1_raw, pos, c)))
[   1.361][d][vo/gpu/d3d11] [ 47] #define conv2d_tf1_texOff(off) conv2d_tf1_tex(conv2d_tf1_pos + conv2d_tf1_pt * vec2(off))
[   1.361][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.361][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.361][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.361][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.361][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.361][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.010346764, 0.07230188, -0.24734616, -0.09937907, 0.02228549, -0.19550583, -0.019540425, -0.1037373, 0.033996485, -0.075554, -0.20228972, 0.07090153, -0.09194035, -0.058972966, 0.1768268, 0.27517542) * go_0(-1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 54]     result += mat4(0.020078976, 0.12433655, -0.1620775, 0.036401592, 0.079748705, 0.11660013, 0.17917652, -0.017513236, -0.18936846, 0.24478136, -0.45726213, -0.045004416, -0.08295188, 0.067733586, -0.080548316, 0.2744211) * go_0(-1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 55]     result += mat4(0.024916803, 0.27562472, 0.043771956, -0.012240604, 0.0786355, 0.042651594, 0.16049327, -0.14577515, -0.032735053, 0.17658092, 0.16382934, -0.02337374, 0.11551492, 0.056343183, -0.17930213, 0.14259394) * go_0(-1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 56]     result += mat4(0.20010485, 0.06747722, -0.19026905, 0.11013709, 0.13062745, -0.044626113, -0.0062261797, 0.2189639, 0.1403497, -0.022713251, -0.19452858, -0.010305412, -0.06407589, 0.09836748, 0.025805516, 0.23430973) * go_0(0.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.14664203, 0.034910418, 0.024714258, -0.066872925, -0.15717538, -0.14179383, -0.14091893, 0.05859166, 0.18919097, -0.18544437, -0.09068573, -0.08615929, -0.051434122, 0.2170678, 0.18409058, -0.17461225) * go_0(0.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.11354446, 0.10745854, 0.2682663, 0.05949201, -0.10695986, 0.1407851, -0.03551388, 0.10691649, -0.17148238, -0.38287184, 0.2074456, 0.11828914, 0.048535194, 0.1464864, -0.18169662, -0.14074169) * go_0(0.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 59]     result += mat4(0.22160622, -0.1513045, -0.053284165, 0.033202525, 0.15574448, -0.043640967, -0.0093824165, -0.0019965349, -0.097964935, -0.08289824, 0.08239996, 0.07868361, 0.05731752, -0.20441617, -0.013016076, -0.253108) * go_0(1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.031249097, -0.2272863, 0.23573665, 0.03357689, 0.011395065, -0.10885564, -0.06287508, -0.031719524, 0.10331069, 0.17560169, 0.18303394, 0.022961004, -0.17011635, -0.24371737, 0.10678694, -0.3222825) * go_0(1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.1275465, -0.08844758, 0.10994917, -0.00910273, 0.09393154, 0.03894992, 0.14367905, -0.11811715, -0.09077633, -0.015776094, 0.27427456, -0.13283503, 0.18724327, -0.08139094, 0.04933602, -0.051852766) * go_0(1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.06764611, -0.27426586, 0.12045272, 0.09410856, -0.14258035, 0.11802992, -0.09093882, 0.0022018093, 0.4590643, 0.046258576, -0.07827223, 0.448011, -0.103631735, -0.016930219, -0.15421398, 0.11045997) * go_1(-1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.17295076, 0.00151352, 0.14938255, 0.08336512, -0.07496541, -0.07561223, -0.0846474, 0.14979269, -0.09142163, 0.23925088, -0.015199518, -0.37749895, -0.20636298, -0.022585187, -0.20371509, 0.0745308) * go_1(-1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 64]     result += mat4(0.06458832, -0.009722021, -0.123604394, 0.06548835, -0.3039139, -0.022024399, 0.05297587, -0.0626883, 0.23556642, 0.1516464, -0.07004877, -0.1845364, -0.05918428, 0.19158973, -0.14983447, 0.030489758) * go_1(-1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 65]     result += mat4(0.36604697, 0.17516142, -0.10853731, -0.22694224, -0.107650936, 0.23013335, 0.094055794, -0.17047717, -0.3006048, -0.08621717, -0.18815655, -0.03570218, 0.09676118, -0.017718751, 0.059138596, 0.073388465) * go_1(0.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.12791575, 0.101956226, 0.13091874, -0.046373338, 0.04955811, -0.04030444, 0.13869923, -0.046699073, -0.42611042, -0.7173929, 0.052184317, 0.6178025, -0.02929954, -0.07638965, -0.15000828, 0.030710017) * go_1(0.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 67]     result += mat4(0.057806686, 0.20842272, -0.20148766, 0.006666912, 0.13356528, -0.45265228, -0.07354092, 0.21447696, 0.019552143, -0.13645506, 0.14643854, -0.0071413796, -0.15487236, -0.002250615, 0.30622452, 0.0033902125) * go_1(0.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 68]     result += mat4(0.06896002, 0.24397352, -0.06479052, 0.20676947, -0.24259068, 0.055320013, -0.09032122, -0.11222854, -0.08982342, -0.114818625, -0.06399291, -0.3024516, -0.06302166, -0.1925528, 0.03458982, 0.028828239) * go_1(1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 69]     result += mat4(0.09764086, 0.09599894, -0.0073313303, 0.14418933, -0.045712367, 0.12657364, 0.04620374, -0.069778584, 0.30047333, -0.012418192, 0.15516461, -0.18087754, 0.08178273, 0.14262857, -0.01741533, -0.12509112) * go_1(1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 70]     result += mat4(0.04697884, -0.1506804, 0.031823065, 0.13397239, -0.18396698, 0.10681781, -0.29586303, -0.0039136545, 0.17560847, -0.12486726, -0.018646788, -0.20688744, -0.030614454, -0.0527634, 0.23593572, -0.10542146) * go_1(1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.19182229, -0.32615846, 0.26283535, -0.1371942, -0.071202695, 0.12056063, -0.11450658, -0.27711076, -0.42096004, 0.0014352369, 0.1559669, -0.14464542, -0.17973948, 0.079166576, -0.12501791, -0.20623216) * go_2(-1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 72]     result += mat4(0.12469872, 0.32190827, -0.059510354, 0.1393449, -0.12845798, -0.019571869, -0.22630808, -0.14031963, 0.36072046, 0.05858427, 0.19278921, 0.121090546, -0.067538865, -0.018770566, 0.14318037, -0.15561756) * go_2(-1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 73]     result += mat4(0.024663208, 0.21110268, -0.016415706, 0.060093414, -0.03739678, -0.107412934, -0.077527136, 0.30331334, 0.17196326, -0.15512557, -0.09499732, -0.15748607, -0.16680105, -0.015185634, 0.16114107, -0.21288376) * go_2(-1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.17739037, -0.1190967, 0.13191372, -0.2527187, -0.14992718, -0.30511454, 0.19145966, 0.002194003, -0.12888977, 0.19152176, 0.27528167, 0.099714965, 0.12865707, -0.12051514, -0.055013947, 0.26231763) * go_2(0.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 75]     result += mat4(0.46433613, -0.11708138, -0.20157282, 0.32022122, 0.079468675, 0.029407484, 0.2559102, -0.15651533, 0.08644574, -0.09747344, -0.07528584, 0.17354868, 0.19167562, -0.17698488, -0.09896657, 0.17093097) * go_2(0.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 76]     result += mat4(0.20283653, -0.33680332, 0.2282385, 0.18832158, 0.20866042, 0.00076752366, 0.16471444, -0.21548858, 0.16193539, 0.17141372, 0.03140222, 0.03913644, -0.030161971, 0.00014570929, 0.08993654, -0.064823024) * go_2(0.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.3075755, 0.19942546, 0.015526995, -0.120868504, -0.254515, -0.07791228, 0.03271691, 0.11794217, 0.11258601, 0.045204375, -0.061196107, -0.115958795, 0.3861869, 0.048215542, 0.07016682, -0.009975758) * go_2(1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.07623697, 0.16094944, -0.02283455, 0.14112763, -0.051149167, 0.20429814, 0.011314802, 0.18914083, -0.24240434, -0.08784008, -0.16763984, -0.08492233, 0.31062725, -0.11925119, -0.33195966, 0.2060798) * go_2(1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.016709225, -0.14472668, -0.3677625, -0.09832719, 0.030297454, -0.05775362, -0.1401375, 0.08119674, -0.01795042, 0.05183797, -0.24320887, 0.066842034, -0.22245285, -0.02740993, 0.06316751, 0.053399116) * go_2(1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.039214406, -0.08876633, 0.045552462, 0.19226661, 0.1355001, -0.13942362, 0.17398876, 0.2914014, -0.191809, 0.037143208, 0.013333581, -0.16632195, 0.113767646, -0.106692605, 0.1589787, 0.030107044) * go_3(-1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 81]     result += mat4(0.21997562, 0.13855208, -0.05783191, -0.033682413, -0.010961168, 0.10524961, 0.02177416, 0.18289444, 0.043692037, 0.07853899, -0.039936125, -0.1004449, 0.04494073, -0.020680292, 0.17578089, -0.106598996) * go_3(-1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 82]     result += mat4(0.026852835, -0.16037546, 0.11278316, 0.12656097, -0.006857894, -0.03400118, -0.051564034, 0.00085412664, -0.37556714, -0.05279987, 0.029383834, -0.14246808, -0.056380164, -0.002399925, 0.16025752, 0.036324855) * go_3(-1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 83]     result += mat4(0.022709966, 0.046350412, 0.03390721, 0.02810572, -0.14394265, 0.04215361, -0.3206118, 0.15034916, -0.0028448137, 0.1682989, -0.042686664, 0.020543462, -0.2786501, -0.007482015, -0.040313292, -0.20745736) * go_3(0.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 84]     result += mat4(0.05417556, 0.18728684, -0.046121832, -0.27939513, 0.05907976, -0.09191223, -0.16625418, -0.26038164, 0.39956605, -0.052594025, -0.0596556, 0.29517552, -0.015181923, -0.0763375, 0.25131205, 0.13038464) * go_3(0.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.036903054, -0.0066989153, -0.062650286, 0.05614359, -0.0064960583, 0.028512698, -0.10906273, -0.010047654, 0.23030473, 0.049983572, 0.10439064, 0.26643834, 0.05041243, 0.09185424, -0.32352915, 0.11295159) * go_3(0.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 86]     result += mat4(0.09724027, -0.34962535, 0.06586686, 0.016635379, 0.13831381, 0.01707076, -0.04690347, 0.022350075, 0.018352794, 0.022000022, 0.070613205, 0.117735535, -0.025971051, 0.18832101, -0.09643588, -0.08512127) * go_3(1.0, -1.0);
[   1.361][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.17324433, 0.06810613, -0.057295907, -0.05115964, -0.101570815, 0.12491774, 0.08762367, -0.005862404, -0.05342927, -0.031942457, -0.039624047, -0.04298937, -0.1303138, -0.11869282, -0.024832053, 0.070463404) * go_3(1.0, 0.0);
[   1.361][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.010514842, 0.1376259, -0.11750346, -0.03786737, 0.03459249, 0.015408171, -0.031430878, -0.060825355, -0.072958425, -0.0037895301, 0.041686177, -0.12352204, -0.06261361, 0.054514423, -0.34072715, 0.13860728) * go_3(1.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 89]     result += vec4(0.018166734, -0.11002478, -0.05554318, -0.0988193);
[   1.361][d][vo/gpu/d3d11] [ 90]     return result;
[   1.361][d][vo/gpu/d3d11] [ 91] }
[   1.361][d][vo/gpu/d3d11] [ 92] void main() {
[   1.361][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.361][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.361][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.361][d][vo/gpu/d3d11] [ 96] }
[   1.361][d][vo/gpu/d3d11] HLSL source:
[   1.361][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.362][d][vo/gpu/d3d11] [  2] {
[   1.362][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.362][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.362][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.362][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.362][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.362][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.362][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.362][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.362][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.362][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.362][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.362][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.362][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.362][d][vo/gpu/d3d11] [ 16] };
[   1.362][d][vo/gpu/d3d11] [ 17] 
[   1.362][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.362][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.362][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.362][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.362][d][vo/gpu/d3d11] [ 22] 
[   1.362][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.362][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.362][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.362][d][vo/gpu/d3d11] [ 26] 
[   1.362][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.362][d][vo/gpu/d3d11] [ 28] {
[   1.362][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.362][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.362][d][vo/gpu/d3d11] [ 31] };
[   1.362][d][vo/gpu/d3d11] [ 32] 
[   1.362][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.362][d][vo/gpu/d3d11] [ 34] {
[   1.362][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.362][d][vo/gpu/d3d11] [ 36] };
[   1.362][d][vo/gpu/d3d11] [ 37] 
[   1.362][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.362][d][vo/gpu/d3d11] [ 39] {
[   1.362][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.362][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.010346763767302036285400390625f, 0.07230187952518463134765625f, -0.2473461627960205078125f, -0.099379070103168487548828125f), float4(0.02228548936545848846435546875f, -0.1955058276653289794921875f, -0.0195404253900051116943359375f, -0.103737302124500274658203125f), float4(0.033996485173702239990234375f, -0.07555399835109710693359375f, -0.20228971540927886962890625f, 0.07090152800083160400390625f), float4(-0.091940350830554962158203125f, -0.0589729659259319305419921875f, 0.1768268048763275146484375f, 0.2751754224300384521484375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.0200789757072925567626953125f, 0.124336548149585723876953125f, -0.16207750141620635986328125f, 0.036401592195034027099609375f), float4(0.07974870502948760986328125f, 0.116600133478641510009765625f, 0.17917652428150177001953125f, -0.01751323603093624114990234375f), float4(-0.1893684566020965576171875f, 0.24478136003017425537109375f, -0.4572621285915374755859375f, -0.0450044162571430206298828125f), float4(-0.082951880991458892822265625f, 0.067733585834503173828125f, -0.0805483162403106689453125f, 0.27442109584808349609375f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.02491680346429347991943359375f, 0.2756247222423553466796875f, 0.0437719561159610748291015625f, -0.01224060356616973876953125f), float4(0.07863549888134002685546875f, 0.042651593685150146484375f, 0.16049326956272125244140625f, -0.14577515423297882080078125f), float4(-0.0327350534498691558837890625f, 0.17658092081546783447265625f, 0.16382934153079986572265625f, -0.02337373979389667510986328125f), float4(0.11551491916179656982421875f, 0.05634318292140960693359375f, -0.1793021261692047119140625f, 0.14259393513202667236328125f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.20010484755039215087890625f, 0.067477218806743621826171875f, -0.190269052982330322265625f, 0.11013709008693695068359375f), float4(0.130627453327178955078125f, -0.0446261130273342132568359375f, -0.0062261796556413173675537109375f, 0.21896390616893768310546875f), float4(0.14034970104694366455078125f, -0.022713251411914825439453125f, -0.1945285797119140625f, -0.010305412113666534423828125f), float4(-0.064075887203216552734375f, 0.0983674824237823486328125f, 0.02580551616847515106201171875f, 0.234309732913970947265625f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.146642029285430908203125f, 0.034910418093204498291015625f, 0.0247142575681209564208984375f, -0.0668729245662689208984375f), float4(-0.15717537701129913330078125f, -0.14179383218288421630859375f, -0.14091892540454864501953125f, 0.0585916601121425628662109375f), float4(0.18919096887111663818359375f, -0.18544436991214752197265625f, -0.090685732662677764892578125f, -0.086159288883209228515625f), float4(-0.051434122025966644287109375f, 0.21706779301166534423828125f, 0.1840905845165252685546875f, -0.1746122539043426513671875f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.113544456660747528076171875f, 0.107458539307117462158203125f, 0.2682662904262542724609375f, 0.0594920106232166290283203125f), float4(-0.106959857046604156494140625f, 0.14078509807586669921875f, -0.0355138815939426422119140625f, 0.106916487216949462890625f), float4(-0.171482384204864501953125f, -0.3828718364238739013671875f, 0.20744560658931732177734375f, 0.1182891428470611572265625f), float4(0.0485351942479610443115234375f, 0.14648640155792236328125f, -0.1816966235637664794921875f, -0.14074169099330902099609375f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.2216062247753143310546875f, -0.15130449831485748291015625f, -0.0532841645181179046630859375f, 0.0332025252282619476318359375f), float4(0.15574447810649871826171875f, -0.0436409674584865570068359375f, -0.009382416494190692901611328125f, -0.001996534876525402069091796875f), float4(-0.097964935004711151123046875f, -0.082898236811161041259765625f, 0.082399956881999969482421875f, 0.078683607280254364013671875f), float4(0.0573175214231014251708984375f, -0.20441617071628570556640625f, -0.013016075827181339263916015625f, -0.2531079947948455810546875f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.03124909661710262298583984375f, -0.22728629410266876220703125f, 0.23573665320873260498046875f, 0.03357689082622528076171875f), float4(0.01139506511390209197998046875f, -0.108855642378330230712890625f, -0.06287507712841033935546875f, -0.0317195244133472442626953125f), float4(0.10331068933010101318359375f, 0.1756016910076141357421875f, 0.18303394317626953125f, 0.02296100370585918426513671875f), float4(-0.17011635005474090576171875f, -0.243717372417449951171875f, 0.1067869365215301513671875f, -0.322282493114471435546875f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.12754650413990020751953125f, -0.088447578251361846923828125f, 0.109949171543121337890625f, -0.00910273008048534393310546875f), float4(0.09393154084682464599609375f, 0.03894992172718048095703125f, 0.1436790525913238525390625f, -0.118117153644561767578125f), float4(-0.090776331722736358642578125f, -0.0157760940492153167724609375f, 0.2742745578289031982421875f, -0.13283503055572509765625f), float4(0.18724326789379119873046875f, -0.081390939652919769287109375f, 0.0493360199034214019775390625f, -0.0518527664244174957275390625f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.067646108567714691162109375f, -0.2742658555507659912109375f, 0.12045271694660186767578125f, 0.094108559191226959228515625f), float4(-0.14258034527301788330078125f, 0.1180299222469329833984375f, -0.09093882143497467041015625f, 0.00220180931501090526580810546875f), float4(0.459064304828643798828125f, 0.046258576214313507080078125f, -0.078272230923175811767578125f, 0.4480110108852386474609375f), float4(-0.1036317348480224609375f, -0.0169302187860012054443359375f, -0.15421397984027862548828125f, 0.11045996844768524169921875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.17295075953006744384765625f, 0.00151352002285420894622802734375f, 0.14938254654407501220703125f, 0.083365119993686676025390625f), float4(-0.074965409934520721435546875f, -0.07561223208904266357421875f, -0.08464740216732025146484375f, 0.14979268610477447509765625f), float4(-0.091421626508235931396484375f, 0.23925088346004486083984375f, -0.01519951783120632171630859375f, -0.3774989545345306396484375f), float4(-0.20636297762393951416015625f, -0.0225851871073246002197265625f, -0.2037150859832763671875f, 0.074530802667140960693359375f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.06458832323551177978515625f, -0.009722021408379077911376953125f, -0.123604394495487213134765625f, 0.06548835337162017822265625f), float4(-0.303913891315460205078125f, -0.02202439866960048675537109375f, 0.052975870668888092041015625f, -0.062688298523426055908203125f), float4(0.23556642234325408935546875f, 0.1516464054584503173828125f, -0.070048771798610687255859375f, -0.184536397457122802734375f), float4(-0.0591842792928218841552734375f, 0.19158972799777984619140625f, -0.14983446896076202392578125f, 0.03048975765705108642578125f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(0.366046965122222900390625f, 0.175161421298980712890625f, -0.108537308871746063232421875f, -0.226942241191864013671875f), float4(-0.107650935649871826171875f, 0.230133354663848876953125f, 0.094055794179439544677734375f, -0.17047716677188873291015625f), float4(-0.3006047904491424560546875f, -0.086217172443866729736328125f, -0.188156545162200927734375f, -0.0357021801173686981201171875f), float4(0.09676118195056915283203125f, -0.0177187509834766387939453125f, 0.059138596057891845703125f, 0.073388464748859405517578125f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.12791575491428375244140625f, 0.101956225931644439697265625f, 0.1309187412261962890625f, -0.0463733375072479248046875f), float4(0.049558110535144805908203125f, -0.0403044410049915313720703125f, 0.138699233531951904296875f, -0.0466990731656551361083984375f), float4(-0.4261104166507720947265625f, -0.71739292144775390625f, 0.0521843172609806060791015625f, 0.61780250072479248046875f), float4(-0.02929954044520854949951171875f, -0.076389648020267486572265625f, -0.15000827610492706298828125f, 0.03071001730859279632568359375f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(0.05780668556690216064453125f, 0.208422720432281494140625f, -0.20148766040802001953125f, 0.0066669122315943241119384765625f), float4(0.1335652768611907958984375f, -0.452652275562286376953125f, -0.073540918529033660888671875f, 0.21447695791721343994140625f), float4(0.01955214329063892364501953125f, -0.136455059051513671875f, 0.146438539028167724609375f, -0.00714137963950634002685546875f), float4(-0.154872357845306396484375f, -0.0022506150417029857635498046875f, 0.306224524974822998046875f, 0.003390212543308734893798828125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.068960018455982208251953125f, 0.2439735233783721923828125f, -0.0647905170917510986328125f, 0.206769466400146484375f), float4(-0.24259068071842193603515625f, 0.0553200133144855499267578125f, -0.090321220457553863525390625f, -0.1122285425662994384765625f), float4(-0.089823417365550994873046875f, -0.114818625152111053466796875f, -0.063992910087108612060546875f, -0.302451610565185546875f), float4(-0.06302165985107421875f, -0.1925528049468994140625f, 0.034589819610118865966796875f, 0.02882823906838893890380859375f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.09764085710048675537109375f, 0.095998942852020263671875f, -0.0073313303291797637939453125f, 0.1441893279552459716796875f), float4(-0.04571236670017242431640625f, 0.12657363712787628173828125f, 0.046203739941120147705078125f, -0.069778583943843841552734375f), float4(0.30047333240509033203125f, -0.0124181918799877166748046875f, 0.15516461431980133056640625f, -0.1808775365352630615234375f), float4(0.0817827284336090087890625f, 0.14262856543064117431640625f, -0.01741532981395721435546875f, -0.12509112060070037841796875f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.046978838741779327392578125f, -0.1506803929805755615234375f, 0.0318230651319026947021484375f, 0.13397239148616790771484375f), float4(-0.18396697938442230224609375f, 0.1068178117275238037109375f, -0.29586303234100341796875f, -0.0039136544801294803619384765625f), float4(0.17560847103595733642578125f, -0.124867260456085205078125f, -0.0186467878520488739013671875f, -0.20688743889331817626953125f), float4(-0.0306144542992115020751953125f, -0.0527633987367153167724609375f, 0.2359357178211212158203125f, -0.105421461164951324462890625f)));
[   1.362][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.1918222904205322265625f, -0.326158463954925537109375f, 0.2628353536128997802734375f, -0.13719420135021209716796875f), float4(-0.071202695369720458984375f, 0.12056063115596771240234375f, -0.114506579935550689697265625f, -0.277110755443572998046875f), float4(-0.4209600389003753662109375f, 0.001435236888937652111053466796875f, 0.15596689283847808837890625f, -0.1446454226970672607421875f), float4(-0.179739475250244140625f, 0.07916657626628875732421875f, -0.1250179111957550048828125f, -0.2062321603298187255859375f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.124698720872402191162109375f, 0.3219082653522491455078125f, -0.0595103539526462554931640625f, 0.1393449008464813232421875f), float4(-0.12845797836780548095703125f, -0.01957186870276927947998046875f, -0.2263080775737762451171875f, -0.14031963050365447998046875f), float4(0.360720455646514892578125f, 0.0585842691361904144287109375f, 0.19278921186923980712890625f, 0.12109054625034332275390625f), float4(-0.067538864910602569580078125f, -0.01877056621015071868896484375f, 0.143180370330810546875f, -0.1556175649166107177734375f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.02466320805251598358154296875f, 0.21110267937183380126953125f, -0.01641570590436458587646484375f, 0.0600934140384197235107421875f), float4(-0.037396781146526336669921875f, -0.10741293430328369140625f, -0.0775271356105804443359375f, 0.3033133447170257568359375f), float4(0.17196325957775115966796875f, -0.15512557327747344970703125f, -0.0949973165988922119140625f, -0.15748606622219085693359375f), float4(-0.16680105030536651611328125f, -0.01518563367426395416259765625f, 0.1611410677433013916015625f, -0.21288375556468963623046875f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.1773903667926788330078125f, -0.119096696376800537109375f, 0.131913721561431884765625f, -0.2527186870574951171875f), float4(-0.14992718398571014404296875f, -0.3051145374774932861328125f, 0.19145965576171875f, 0.00219400296919047832489013671875f), float4(-0.1288897693157196044921875f, 0.19152176380157470703125f, 0.2752816677093505859375f, 0.0997149646282196044921875f), float4(0.1286570727825164794921875f, -0.1205151379108428955078125f, -0.055013947188854217529296875f, 0.2623176276683807373046875f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.4643361270427703857421875f, -0.117081381380558013916015625f, -0.20157282054424285888671875f, 0.3202212154865264892578125f), float4(0.079468674957752227783203125f, 0.02940748445689678192138671875f, 0.2559101879596710205078125f, -0.1565153300762176513671875f), float4(0.086445741355419158935546875f, -0.097473442554473876953125f, -0.07528583705425262451171875f, 0.17354868352413177490234375f), float4(0.19167561829090118408203125f, -0.1769848763942718505859375f, -0.0989665687084197998046875f, 0.17093096673488616943359375f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.20283652842044830322265625f, -0.33680331707000732421875f, 0.2282384932041168212890625f, 0.18832157552242279052734375f), float4(0.208660423755645751953125f, 0.00076752365566790103912353515625f, 0.16471444070339202880859375f, -0.2154885828495025634765625f), float4(0.161935389041900634765625f, 0.171413719654083251953125f, 0.0314022190868854522705078125f, 0.0391364395618438720703125f), float4(-0.03016197122633457183837890625f, 0.00014570928760804235935211181640625f, 0.08993653953075408935546875f, -0.064823023974895477294921875f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.3075754940509796142578125f, 0.1994254589080810546875f, 0.01552699506282806396484375f, -0.120868504047393798828125f), float4(-0.254514992237091064453125f, -0.077912278473377227783203125f, 0.0327169112861156463623046875f, 0.11794216930866241455078125f), float4(0.11258600652217864990234375f, 0.0452043749392032623291015625f, -0.0611961074173450469970703125f, -0.11595879495143890380859375f), float4(0.386186897754669189453125f, 0.0482155419886112213134765625f, 0.070166818797588348388671875f, -0.009975758381187915802001953125f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.076236970722675323486328125f, 0.1609494388103485107421875f, -0.0228345505893230438232421875f, 0.14112763106822967529296875f), float4(-0.051149167120456695556640625f, 0.20429813861846923828125f, 0.011314801871776580810546875f, 0.1891408264636993408203125f), float4(-0.24240434169769287109375f, -0.08784008026123046875f, -0.16763983666896820068359375f, -0.08492232859134674072265625f), float4(0.3106272518634796142578125f, -0.119251191616058349609375f, -0.331959664821624755859375f, 0.20607979595661163330078125f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.01670922525227069854736328125f, -0.14472667872905731201171875f, -0.367762506008148193359375f, -0.0983271896839141845703125f), float4(0.0302974544465541839599609375f, -0.0577536188066005706787109375f, -0.140137493610382080078125f, 0.08119674026966094970703125f), float4(-0.0179504193365573883056640625f, 0.0518379695713520050048828125f, -0.24320887029170989990234375f, 0.06684203445911407470703125f), float4(-0.2224528491497039794921875f, -0.0274099297821521759033203125f, 0.063167512416839599609375f, 0.0533991158008575439453125f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.0392144061625003814697265625f, -0.088766328990459442138671875f, 0.0455524623394012451171875f, 0.1922666132450103759765625f), float4(0.1355001032352447509765625f, -0.13942362368106842041015625f, 0.173988759517669677734375f, 0.291401386260986328125f), float4(-0.191808998584747314453125f, 0.037143208086490631103515625f, 0.013333581387996673583984375f, -0.16632194817066192626953125f), float4(0.113767646253108978271484375f, -0.106692604720592498779296875f, 0.1589787006378173828125f, 0.030107043683528900146484375f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(0.2199756205081939697265625f, 0.13855208456516265869140625f, -0.0578319095075130462646484375f, -0.033682413399219512939453125f), float4(-0.010961168445646762847900390625f, 0.1052496135234832763671875f, 0.02177415974438190460205078125f, 0.1828944385051727294921875f), float4(0.04369203746318817138671875f, 0.078538991510868072509765625f, -0.039936125278472900390625f, -0.10044489800930023193359375f), float4(0.0449407286942005157470703125f, -0.02068029157817363739013671875f, 0.17578089237213134765625f, -0.106598995625972747802734375f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.0268528349697589874267578125f, -0.16037546098232269287109375f, 0.112783156335353851318359375f, 0.12656097114086151123046875f), float4(-0.0068578938953578472137451171875f, -0.034001179039478302001953125f, -0.0515640340745449066162109375f, 0.0008541266433894634246826171875f), float4(-0.375567138195037841796875f, -0.0527998693287372589111328125f, 0.0293838344514369964599609375f, -0.14246807992458343505859375f), float4(-0.0563801638782024383544921875f, -0.00239992490969598293304443359375f, 0.160257518291473388671875f, 0.0363248549401760101318359375f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.02270996570587158203125f, 0.046350412070751190185546875f, 0.0339072085916996002197265625f, 0.02810572087764739990234375f), float4(-0.143942654132843017578125f, 0.04215361177921295166015625f, -0.3206118047237396240234375f, 0.15034915506839752197265625f), float4(-0.0028448137454688549041748046875f, 0.168298900127410888671875f, -0.042686663568019866943359375f, 0.02054346166551113128662109375f), float4(-0.278650104999542236328125f, -0.0074820150621235370635986328125f, -0.0403132922947406768798828125f, -0.207457363605499267578125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.0541755594313144683837890625f, 0.18728683888912200927734375f, -0.0461218319833278656005859375f, -0.2793951332569122314453125f), float4(0.059079758822917938232421875f, -0.091912232339382171630859375f, -0.16625417768955230712890625f, -0.260381639003753662109375f), float4(0.39956605434417724609375f, -0.0525940246880054473876953125f, -0.059655599296092987060546875f, 0.2951755225658416748046875f), float4(-0.01518192328512668609619140625f, -0.07633750140666961669921875f, 0.2513120472431182861328125f, 0.13038463890552520751953125f)));
[   1.362][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.0369030535221099853515625f, -0.0066989152692258358001708984375f, -0.062650285661220550537109375f, 0.056143589317798614501953125f), float4(-0.0064960583113133907318115234375f, 0.0285126976668834686279296875f, -0.109062731266021728515625f, -0.01004765368998050689697265625f), float4(0.23030473291873931884765625f, 0.0499835722148418426513671875f, 0.104390643537044525146484375f, 0.2664383351802825927734375f), float4(0.05041243135929107666015625f, 0.091854237020015716552734375f, -0.3235291540622711181640625f, 0.11295159161090850830078125f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.097240269184112548828125f, -0.3496253490447998046875f, 0.0658668577671051025390625f, 0.01663537882268428802490234375f), float4(0.13831381499767303466796875f, 0.0170707590878009796142578125f, -0.046903468668460845947265625f, 0.02235007472336292266845703125f), float4(0.01835279352962970733642578125f, 0.022000022232532501220703125f, 0.070613205432891845703125f, 0.1177355349063873291015625f), float4(-0.0259710513055324554443359375f, 0.18832100927829742431640625f, -0.096435882151126861572265625f, -0.085121266543865203857421875f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.1732443273067474365234375f, 0.06810612976551055908203125f, -0.0572959072887897491455078125f, -0.0511596389114856719970703125f), float4(-0.1015708148479461669921875f, 0.124917738139629364013671875f, 0.08762367069721221923828125f, -0.0058624041266739368438720703125f), float4(-0.053429268300533294677734375f, -0.0319424569606781005859375f, -0.0396240465342998504638671875f, -0.0429893694818019866943359375f), float4(-0.13031379878520965576171875f, -0.118692822754383087158203125f, -0.02483205311000347137451171875f, 0.07046340405941009521484375f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.01051484234631061553955078125f, 0.1376259028911590576171875f, -0.117503456771373748779296875f, -0.0378673709928989410400390625f), float4(0.0345924906432628631591796875f, 0.01540817134082317352294921875f, -0.031430877745151519775390625f, -0.060825355350971221923828125f), float4(-0.07295842468738555908203125f, -0.003789530135691165924072265625f, 0.04168617725372314453125f, -0.1235220432281494140625f), float4(-0.06261360645294189453125f, 0.05451442301273345947265625f, -0.340727150440216064453125f, 0.13860727846622467041015625f)))) + float4(0.01816673390567302703857421875f, -0.1100247800350189208984375f, -0.0555431805551052093505859375f, -0.09881930053234100341796875f);
[   1.362][d][vo/gpu/d3d11] [ 61] }
[   1.362][d][vo/gpu/d3d11] [ 62] 
[   1.362][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.362][d][vo/gpu/d3d11] [ 64] {
[   1.362][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.362][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.362][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.362][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.362][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.362][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.362][d][vo/gpu/d3d11] [ 71] }
[   1.362][d][vo/gpu] Resizing texture: 1920x800
[   1.365][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.367][v][vo/gpu/d3d11] Compiled a vertex shader in 4140us
[   1.367][v][vo/gpu/d3d11] shaderc: 2299us, SPIRV-Cross: 159us, D3DCompile: 1682us
[   1.367][d][vo/gpu/d3d11] GLSL source:
[   1.367][d][vo/gpu/d3d11] [  1] #version 450
[   1.367][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.367][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.367][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.367][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.367][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.367][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.367][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.367][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.367][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.367][d][vo/gpu/d3d11] [ 11] void main() {
[   1.367][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.367][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.367][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.367][d][vo/gpu/d3d11] [ 15] }
[   1.367][d][vo/gpu/d3d11] HLSL source:
[   1.367][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.367][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.367][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.367][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.367][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.367][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.367][d][vo/gpu/d3d11] [  7] 
[   1.367][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.367][d][vo/gpu/d3d11] [  9] {
[   1.367][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.367][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.367][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.367][d][vo/gpu/d3d11] [ 13] };
[   1.367][d][vo/gpu/d3d11] [ 14] 
[   1.367][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.367][d][vo/gpu/d3d11] [ 16] {
[   1.367][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.367][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.367][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.367][d][vo/gpu/d3d11] [ 20] };
[   1.367][d][vo/gpu/d3d11] [ 21] 
[   1.367][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.367][d][vo/gpu/d3d11] [ 23] {
[   1.367][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.367][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.367][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.367][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.367][d][vo/gpu/d3d11] [ 28] }
[   1.367][d][vo/gpu/d3d11] [ 29] 
[   1.367][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.367][d][vo/gpu/d3d11] [ 31] {
[   1.367][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.367][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.367][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.367][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.367][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.367][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.367][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.367][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.367][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.367][d][vo/gpu/d3d11] [ 41] }
[   1.393][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.443][v][vo/gpu/d3d11] Compiled a fragment shader in 76377us
[   1.443][v][vo/gpu/d3d11] shaderc: 26248us, SPIRV-Cross: 2729us, D3DCompile: 47400us
[   1.443][d][vo/gpu/d3d11] GLSL source:
[   1.443][d][vo/gpu/d3d11] [  1] #version 450
[   1.443][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.443][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.443][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.443][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.443][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.443][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.443][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.443][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.443][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.443][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.443][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.443][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.443][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.443][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.443][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.443][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.443][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.443][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.443][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.443][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.443][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.443][d][vo/gpu/d3d11] [ 23] };
[   1.443][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.443][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.443][d][vo/gpu/d3d11] [ 26] #define conv2d_tf_raw texture0
[   1.443][d][vo/gpu/d3d11] [ 27] #define conv2d_tf_pos texcoord0
[   1.443][d][vo/gpu/d3d11] [ 28] #define conv2d_tf_size texture_size0
[   1.443][d][vo/gpu/d3d11] [ 29] #define conv2d_tf_rot texture_rot0
[   1.443][d][vo/gpu/d3d11] [ 30] #define conv2d_tf_off texture_off0
[   1.443][d][vo/gpu/d3d11] [ 31] #define conv2d_tf_pt pixel_size0
[   1.443][d][vo/gpu/d3d11] [ 32] #define conv2d_tf_map texmap0
[   1.443][d][vo/gpu/d3d11] [ 33] #define conv2d_tf_mul 1.000000
[   1.443][d][vo/gpu/d3d11] [ 34] #define conv2d_tf_tex(pos) (conv2d_tf_mul * vec4(texture(conv2d_tf_raw, pos)).rgba)
[   1.443][d][vo/gpu/d3d11] [ 35] #define conv2d_tf_gather(pos, c) (conv2d_tf_mul * vec4(textureGather(conv2d_tf_raw, pos, c)))
[   1.443][d][vo/gpu/d3d11] [ 36] #define conv2d_tf_texOff(off) conv2d_tf_tex(conv2d_tf_pos + conv2d_tf_pt * vec2(off))
[   1.443][d][vo/gpu/d3d11] [ 37] #define conv2d_tf1_raw texture1
[   1.443][d][vo/gpu/d3d11] [ 38] #define conv2d_tf1_pos texcoord1
[   1.443][d][vo/gpu/d3d11] [ 39] #define conv2d_tf1_size texture_size1
[   1.443][d][vo/gpu/d3d11] [ 40] #define conv2d_tf1_rot texture_rot1
[   1.443][d][vo/gpu/d3d11] [ 41] #define conv2d_tf1_off texture_off1
[   1.443][d][vo/gpu/d3d11] [ 42] #define conv2d_tf1_pt pixel_size1
[   1.443][d][vo/gpu/d3d11] [ 43] #define conv2d_tf1_map texmap1
[   1.443][d][vo/gpu/d3d11] [ 44] #define conv2d_tf1_mul 1.000000
[   1.443][d][vo/gpu/d3d11] [ 45] #define conv2d_tf1_tex(pos) (conv2d_tf1_mul * vec4(texture(conv2d_tf1_raw, pos)).rgba)
[   1.443][d][vo/gpu/d3d11] [ 46] #define conv2d_tf1_gather(pos, c) (conv2d_tf1_mul * vec4(textureGather(conv2d_tf1_raw, pos, c)))
[   1.443][d][vo/gpu/d3d11] [ 47] #define conv2d_tf1_texOff(off) conv2d_tf1_tex(conv2d_tf1_pos + conv2d_tf1_pt * vec2(off))
[   1.443][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.443][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.443][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.444][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.444][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.444][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.040142782, 0.0288423, 0.07569487, -0.01490842, 0.14402796, -0.13682005, 0.027765118, 0.03907358, 0.07117706, 0.058157545, -0.23862502, -0.057674367, -0.19220531, 0.0147159435, -0.18028538, 0.0963821) * go_0(-1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.1676744, -0.11937339, 0.12137117, 0.07119485, 0.14148116, -0.043578617, -0.029261118, -0.0016938087, -0.057269357, -0.080076694, 0.12193026, 0.07326153, -0.056278303, -0.01630716, -0.03792076, 0.1483611) * go_0(-1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 55]     result += mat4(-0.3021578, 0.011601693, 0.11266048, 0.19086999, -0.0122412145, 0.08431291, 0.11615175, -0.008039614, -0.39987534, 0.07820729, 0.03509667, 0.1963505, -0.08839513, -0.21571854, 0.059425723, -0.06830175) * go_0(-1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 56]     result += mat4(0.23135209, -0.12452708, 0.0943565, 0.0028859286, -0.09836373, 0.10681712, -0.3535964, 0.08457615, 0.045332734, 0.16579892, -0.03809797, -0.021596594, 0.2937497, -0.028294371, 0.046484597, -0.037604347) * go_0(0.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 57]     result += mat4(0.072675414, -0.16431206, 0.28952035, 0.0076831076, -0.020242939, 0.029483542, -0.092415355, 0.08673106, 0.12109694, 0.14307201, 0.23134442, 0.11731775, 0.09981601, -0.16968462, 0.037470713, 0.14948717) * go_0(0.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 58]     result += mat4(0.0029752052, 0.06526503, 0.1866458, 0.07451277, -0.31836876, 0.17115082, -0.13969697, 0.23844297, -0.03244903, -0.08832665, 0.023691226, -0.18230624, -0.074933805, -0.00044301842, 0.050572682, 0.081511915) * go_0(0.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 59]     result += mat4(0.039502528, 0.051221415, -0.13968123, -0.091212444, -0.016925618, 0.15409444, -0.017455677, -0.11653652, 0.03539446, -0.00087720866, -0.12839639, 0.037198763, 0.03674469, -0.26444665, 0.019721227, -0.13013805) * go_0(1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 60]     result += mat4(0.039229527, 0.25667152, 0.0032586441, -0.00718359, 0.1617932, 0.10409968, 0.07182867, -0.09810605, 0.07789241, -0.02014911, 0.025767172, -0.14604759, 0.07175764, 0.32513744, -0.20473222, -0.16266066) * go_0(1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 61]     result += mat4(0.13418433, 0.061813723, -0.13927278, -0.2498272, 0.03468218, 0.29483125, 0.063289374, -0.04726235, 0.1898295, -0.33132064, 0.032045014, 0.02159535, -0.1148363, 0.31306976, 0.06456038, 0.048988886) * go_0(1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 62]     result += mat4(0.07151646, 0.2799246, -0.107190795, -0.16431166, -0.28007045, 0.07206954, 0.06775463, 0.009758042, 0.07032184, -0.20843789, 0.087045245, 0.1360676, -0.25718534, 0.028249472, -0.12614648, 0.009949602) * go_1(-1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 63]     result += mat4(0.020241471, -0.23390484, -0.0083223935, 0.08344701, 0.08222297, 0.12026539, -0.08652223, -0.08228822, -0.039576706, -0.24677879, -0.1157289, 0.2590508, -0.23809408, 0.19911982, -0.116798095, -0.035870325) * go_1(-1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 64]     result += mat4(0.024991842, 0.050509237, -0.024134455, -0.12659028, 0.24089767, 0.122712664, -0.10482493, -0.19403952, -0.19177693, -0.06538376, -0.041478425, 0.32176673, -0.1534002, -0.18680622, 0.06763643, 0.020806564) * go_1(-1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 65]     result += mat4(0.03437814, -0.28067374, 0.2830681, 0.038812317, -0.021698112, -0.120865285, 0.22695538, -0.045419116, -0.030475847, -0.01977341, -0.1265364, -0.3109814, 0.012255813, 0.053917278, -0.018620957, -0.14599285) * go_1(0.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.016204128, -0.04093018, 0.054571863, 0.02679643, 0.01756274, -0.057685968, 0.16148666, 0.17370272, -0.11065411, 0.06378157, -0.09331551, 0.22985275, 0.057905316, 0.12323568, 0.07748665, 0.09878629) * go_1(0.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.018112244, 0.063234635, -0.013184602, 0.16241394, 0.08877139, 0.02145378, -0.02490027, -0.038920373, 0.13127136, 0.14391647, 0.020553736, 0.14401346, 0.06685973, -0.25398204, 0.10369067, -0.055949755) * go_1(0.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 68]     result += mat4(0.07710333, 0.047412727, 0.13813803, 0.18624061, 0.16907091, -0.039532468, 0.06234584, 0.06408178, -0.054543987, -0.045220226, -0.11093376, -0.37399602, 0.20372874, 0.004580967, -0.07742308, 0.017989937) * go_1(1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 69]     result += mat4(0.003485311, -0.08897399, -0.013108594, -0.19473282, -0.27081844, -0.16812073, 0.0052992934, -0.055331517, 0.09446357, 0.019280333, 0.16560757, -0.3230032, 0.043096773, 0.059222896, -0.064184934, -0.059852477) * go_1(1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 70]     result += mat4(0.06794279, -0.034135245, 0.083064295, 0.13506731, 0.13064219, -0.44978833, -0.03513717, 0.08999715, 0.1124541, 0.42208397, -0.0038724816, -0.014332087, -0.13751853, -0.04929869, 0.09134992, -0.17687531) * go_1(1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 71]     result += mat4(0.100909084, -0.0131197255, 0.082274795, -0.2138443, -0.08515947, -0.021058358, 0.10951775, -0.06349191, -0.29129833, -0.029262653, 0.25235432, -0.11748315, 0.121980384, 0.062347785, 0.10916932, -0.15993518) * go_2(-1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 72]     result += mat4(0.28893283, -0.05677308, -0.2641288, -0.058937225, -0.16187571, 0.006647366, -0.063294955, 0.04766719, 0.60601914, -0.07831864, -0.15710756, -0.011491797, 0.15587467, -0.08105375, 0.07847514, -0.2803333) * go_2(-1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 73]     result += mat4(-0.077989794, -0.09871811, -0.3516344, 0.15292728, 0.010889273, 0.0011189661, -0.16118282, -0.018821161, -0.039708678, -0.00060983415, -0.06367813, 0.009148068, 0.03919827, 0.18782744, 0.028040757, -0.10230145) * go_2(-1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.4079609, 0.18640275, -0.12475227, 0.13891742, 0.25121725, 0.16942379, 0.14409852, 0.087600805, 0.045335658, -0.12683709, -0.0077387216, 0.06563413, -0.19857128, 0.106910795, -0.048285246, 0.10768945) * go_2(0.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 75]     result += mat4(0.5989075, 0.20941062, -0.20086494, 0.13344856, 0.073034994, 0.22358665, 0.101664364, -0.13463663, 0.18816395, -0.061176624, -0.14712185, 0.027320342, -0.09529667, 0.031148786, -0.28744993, 0.18698911) * go_2(0.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 76]     result += mat4(0.14799193, 0.39471942, -0.23340325, -0.4031061, 0.18926248, -0.11091216, 0.118981816, -0.09155061, 0.17049436, 0.19803695, -0.1513267, 0.023817873, 0.0090933135, -0.04134864, 0.060486555, 0.03536634) * go_2(0.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.39094314, 0.01779997, 0.12710269, 0.0067333193, -0.31255835, -0.08206612, -0.048528638, 0.369439, -0.19351655, -0.03420455, 0.15831526, -0.052294146, -0.08481741, 0.0787108, 0.1312136, -0.108919285) * go_2(1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.16068119, -0.42190582, 0.19383872, -0.018445708, 0.09803051, -0.020769652, -0.022599563, -0.052448895, -0.20645833, -0.031432863, 0.0025441595, 0.03410379, -0.20268854, 0.04481527, 0.05191063, 0.42317194) * go_2(1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.12786235, -0.23936178, 0.116561726, 0.30756372, -0.09420156, -0.044529166, -0.03585749, 0.1829332, -0.23939075, 0.24030831, 0.019878127, -0.015069802, 0.24300557, -0.22558568, -0.104956664, -0.09393648) * go_2(1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.04607054, 0.012677649, -0.027597688, 0.1618836, 0.29210827, 0.014221155, -0.13591036, -0.06895336, -0.09559534, 0.07956421, -0.11112994, -0.13325493, 0.24562472, 0.11046177, 0.057847694, 0.0016315983) * go_3(-1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.03365951, 0.027391057, 0.09653403, -0.14718771, -0.049631152, -0.06467214, -0.058545876, 0.1424002, -0.06320376, 0.181183, 0.10249362, -0.16052136, 0.3013475, -0.04156266, 0.08862033, 0.06888033) * go_3(-1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 82]     result += mat4(0.10045977, -0.004198456, -0.025856055, 0.05739418, -0.1328637, -0.025975171, 0.06553717, 0.11301186, 0.0704087, -0.083569765, 0.16066101, -0.24453588, 0.25370175, 0.037184533, 0.062386766, -0.20025635) * go_3(-1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.017958941, 0.06417776, -0.1525265, 0.12451173, 0.14567685, -0.0049682115, -0.23973411, -0.0783304, -0.010629432, 0.08055161, 0.2028341, 0.17640644, -0.20445108, -0.055524793, -0.019326134, 0.081288636) * go_3(0.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 84]     result += mat4(0.007882519, -0.03722546, 0.053249408, 0.00071846246, -0.07053029, -0.21583866, 0.1415364, -0.19486657, 0.20685542, 0.17660026, -0.32156837, 0.1746825, -0.14957622, -0.09224378, -0.098153435, -0.13054638) * go_3(0.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 85]     result += mat4(0.10051427, -0.17398237, 0.09842799, -0.14187703, 0.116901085, -0.1229543, -0.0007776771, -0.20410055, -0.11373484, -0.111150615, -0.1974002, -0.11641459, 0.024105398, 0.24985977, 0.015871854, -0.10724633) * go_3(0.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.18081793, 0.1209351, -0.12867971, -0.019415248, 0.062617876, -0.037130393, -0.07803658, -0.22862352, 0.2586428, -0.030090366, -0.11894069, 0.18087515, -0.40921417, 0.070013195, 0.030540073, 0.035120826) * go_3(1.0, -1.0);
[   1.444][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.13185939, 0.12992652, 0.08125049, 0.075331174, 0.064219765, 0.056629725, -0.020012032, -0.0855444, -0.044063166, -0.05396545, -0.028002812, 0.21837157, -0.15206428, -0.12681007, 0.14895032, 0.12339962) * go_3(1.0, 0.0);
[   1.444][d][vo/gpu/d3d11] [ 88]     result += mat4(0.08066341, -0.14773634, -0.0212227, -0.014011867, -0.048505764, 0.075407125, -0.020620076, 0.0003291325, -0.21815202, -0.23136546, 0.10853532, -0.036058456, 0.10952532, -0.052677035, -0.13005799, 0.18398996) * go_3(1.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 89]     result += vec4(0.022609137, -0.028548084, 0.024431901, 0.010504478);
[   1.444][d][vo/gpu/d3d11] [ 90]     return result;
[   1.444][d][vo/gpu/d3d11] [ 91] }
[   1.444][d][vo/gpu/d3d11] [ 92] void main() {
[   1.444][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.444][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.444][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.444][d][vo/gpu/d3d11] [ 96] }
[   1.444][d][vo/gpu/d3d11] HLSL source:
[   1.444][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.444][d][vo/gpu/d3d11] [  2] {
[   1.444][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.444][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.444][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.444][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.444][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.444][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.444][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.444][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.444][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.444][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.444][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.444][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.444][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.444][d][vo/gpu/d3d11] [ 16] };
[   1.444][d][vo/gpu/d3d11] [ 17] 
[   1.444][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.444][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.444][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.444][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.444][d][vo/gpu/d3d11] [ 22] 
[   1.444][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.444][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.444][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.444][d][vo/gpu/d3d11] [ 26] 
[   1.444][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.444][d][vo/gpu/d3d11] [ 28] {
[   1.444][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.444][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.444][d][vo/gpu/d3d11] [ 31] };
[   1.444][d][vo/gpu/d3d11] [ 32] 
[   1.444][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.444][d][vo/gpu/d3d11] [ 34] {
[   1.444][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.444][d][vo/gpu/d3d11] [ 36] };
[   1.444][d][vo/gpu/d3d11] [ 37] 
[   1.444][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.444][d][vo/gpu/d3d11] [ 39] {
[   1.444][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.444][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.040142782032489776611328125f, 0.0288423001766204833984375f, 0.075694866478443145751953125f, -0.01490841992199420928955078125f), float4(0.14402796328067779541015625f, -0.1368200480937957763671875f, 0.027765117585659027099609375f, 0.039073579013347625732421875f), float4(0.071177057921886444091796875f, 0.0581575445830821990966796875f, -0.2386250197887420654296875f, -0.0576743669807910919189453125f), float4(-0.19220530986785888671875f, 0.0147159434854984283447265625f, -0.18028537929058074951171875f, 0.09638209640979766845703125f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.16767440736293792724609375f, -0.119373388588428497314453125f, 0.121371172368526458740234375f, 0.071194849908351898193359375f), float4(0.1414811611175537109375f, -0.043578617274761199951171875f, -0.02926111780107021331787109375f, -0.00169380870647728443145751953125f), float4(-0.057269357144832611083984375f, -0.080076694488525390625f, 0.12193025648593902587890625f, 0.0732615292072296142578125f), float4(-0.05627830326557159423828125f, -0.01630716025829315185546875f, -0.0379207618534564971923828125f, 0.14836110174655914306640625f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(-0.3021577894687652587890625f, 0.011601692996919155120849609375f, 0.11266048252582550048828125f, 0.190869987010955810546875f), float4(-0.0122412145137786865234375f, 0.084312908351421356201171875f, 0.116151750087738037109375f, -0.00803961418569087982177734375f), float4(-0.399875342845916748046875f, 0.078207291662693023681640625f, 0.0350966714322566986083984375f, 0.19635049998760223388671875f), float4(-0.08839513361454010009765625f, -0.2157185375690460205078125f, 0.0594257228076457977294921875f, -0.06830175220966339111328125f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.2313520908355712890625f, -0.12452708184719085693359375f, 0.094356499612331390380859375f, 0.00288592861033976078033447265625f), float4(-0.0983637273311614990234375f, 0.106817118823528289794921875f, -0.353596389293670654296875f, 0.084576152265071868896484375f), float4(0.0453327335417270660400390625f, 0.16579891741275787353515625f, -0.038097970187664031982421875f, -0.02159659378230571746826171875f), float4(0.29374969005584716796875f, -0.02829437144100666046142578125f, 0.046484597027301788330078125f, -0.03760434687137603759765625f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(0.072675414383411407470703125f, -0.164312064647674560546875f, 0.2895203530788421630859375f, 0.00768310762941837310791015625f), float4(-0.02024293877184391021728515625f, 0.02948354184627532958984375f, -0.092415355145931243896484375f, 0.08673106133937835693359375f), float4(0.1210969388484954833984375f, 0.14307200908660888671875f, 0.23134441673755645751953125f, 0.11731775104999542236328125f), float4(0.09981600940227508544921875f, -0.1696846187114715576171875f, 0.03747071325778961181640625f, 0.1494871675968170166015625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.00297520519234240055084228515625f, 0.0652650296688079833984375f, 0.186645805835723876953125f, 0.074512772262096405029296875f), float4(-0.3183687627315521240234375f, 0.17115081846714019775390625f, -0.13969697058200836181640625f, 0.23844297230243682861328125f), float4(-0.032449029386043548583984375f, -0.08832664787769317626953125f, 0.0236912257969379425048828125f, -0.18230624496936798095703125f), float4(-0.074933804571628570556640625f, -0.00044301841990090906620025634765625f, 0.0505726821720600128173828125f, 0.081511914730072021484375f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.0395025275647640228271484375f, 0.05122141540050506591796875f, -0.13968123495578765869140625f, -0.091212444007396697998046875f), float4(-0.01692561805248260498046875f, 0.15409444272518157958984375f, -0.01745567657053470611572265625f, -0.116536520421504974365234375f), float4(0.0353944599628448486328125f, -0.000877208658494055271148681640625f, -0.12839639186859130859375f, 0.0371987633407115936279296875f), float4(0.036744691431522369384765625f, -0.2644466459751129150390625f, 0.01972122676670551300048828125f, -0.13013805449008941650390625f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.03922952711582183837890625f, 0.2566715180873870849609375f, 0.0032586441375315189361572265625f, -0.007183589972555637359619140625f), float4(0.1617932021617889404296875f, 0.104099683463573455810546875f, 0.071828670799732208251953125f, -0.098106049001216888427734375f), float4(0.07789240777492523193359375f, -0.02014910988509654998779296875f, 0.02576717175543308258056640625f, -0.1460475921630859375f), float4(0.071757636964321136474609375f, 0.325137436389923095703125f, -0.20473222434520721435546875f, -0.162660658359527587890625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.1341843307018280029296875f, 0.0618137232959270477294921875f, -0.1392727792263031005859375f, -0.249827206134796142578125f), float4(0.0346821807324886322021484375f, 0.2948312461376190185546875f, 0.0632893741130828857421875f, -0.047262348234653472900390625f), float4(0.1898294985294342041015625f, -0.33132064342498779296875f, 0.032045014202594757080078125f, 0.02159534953534603118896484375f), float4(-0.114836297929286956787109375f, 0.313069760799407958984375f, 0.0645603835582733154296875f, 0.048988886177539825439453125f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.071516461670398712158203125f, 0.2799246013164520263671875f, -0.107190795242786407470703125f, -0.16431166231632232666015625f), float4(-0.2800704538822174072265625f, 0.07206954061985015869140625f, 0.067754633724689483642578125f, 0.00975804217159748077392578125f), float4(0.07032184302806854248046875f, -0.2084378898143768310546875f, 0.087045244872570037841796875f, 0.1360675990581512451171875f), float4(-0.25718533992767333984375f, 0.0282494723796844482421875f, -0.12614648044109344482421875f, 0.009949602186679840087890625f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.02024147100746631622314453125f, -0.23390483856201171875f, -0.00832239352166652679443359375f, 0.0834470093250274658203125f), float4(0.0822229683399200439453125f, 0.120265386998653411865234375f, -0.086522229015827178955078125f, -0.08228822052478790283203125f), float4(-0.0395767055451869964599609375f, -0.246778786182403564453125f, -0.11572889983654022216796875f, 0.259050786495208740234375f), float4(-0.23809407651424407958984375f, 0.19911982119083404541015625f, -0.116798095405101776123046875f, -0.0358703248202800750732421875f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.02499184198677539825439453125f, 0.050509236752986907958984375f, -0.02413445524871349334716796875f, -0.1265902817249298095703125f), float4(0.24089767038822174072265625f, 0.122712664306163787841796875f, -0.1048249304294586181640625f, -0.194039523601531982421875f), float4(-0.191776931285858154296875f, -0.0653837621212005615234375f, -0.0414784252643585205078125f, 0.32176673412322998046875f), float4(-0.15340019762516021728515625f, -0.18680621683597564697265625f, 0.067636430263519287109375f, 0.02080656401813030242919921875f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(0.0343781411647796630859375f, -0.2806737422943115234375f, 0.2830680906772613525390625f, 0.038812316954135894775390625f), float4(-0.02169811166822910308837890625f, -0.120865285396575927734375f, 0.2269553840160369873046875f, -0.0454191155731678009033203125f), float4(-0.030475847423076629638671875f, -0.01977341063320636749267578125f, -0.1265363991260528564453125f, -0.31098139286041259765625f), float4(0.012255812995135784149169921875f, 0.0539172776043415069580078125f, -0.0186209566891193389892578125f, -0.1459928452968597412109375f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.01620412804186344146728515625f, -0.0409301817417144775390625f, 0.0545718632638454437255859375f, 0.0267964303493499755859375f), float4(0.017562739551067352294921875f, -0.0576859675347805023193359375f, 0.1614866554737091064453125f, 0.173702716827392578125f), float4(-0.110654108226299285888671875f, 0.063781566917896270751953125f, -0.0933155119419097900390625f, 0.22985275089740753173828125f), float4(0.05790531635284423828125f, 0.123235680162906646728515625f, 0.07748664915561676025390625f, 0.098786287009716033935546875f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.01811224408447742462158203125f, 0.063234634697437286376953125f, -0.013184602372348308563232421875f, 0.16241393983364105224609375f), float4(0.08877138793468475341796875f, 0.0214537791907787322998046875f, -0.02490027062594890594482421875f, -0.0389203727245330810546875f), float4(0.1312713623046875f, 0.14391647279262542724609375f, 0.02055373601615428924560546875f, 0.144013464450836181640625f), float4(0.066859729588031768798828125f, -0.2539820373058319091796875f, 0.10369066894054412841796875f, -0.055949755012989044189453125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.07710333168506622314453125f, 0.0474127270281314849853515625f, 0.1381380259990692138671875f, 0.186240613460540771484375f), float4(0.16907091438770294189453125f, -0.03953246772289276123046875f, 0.062345840036869049072265625f, 0.064081780612468719482421875f), float4(-0.05454398691654205322265625f, -0.0452202260494232177734375f, -0.110933758318424224853515625f, -0.3739960193634033203125f), float4(0.203728735446929931640625f, 0.004580967128276824951171875f, -0.07742308080196380615234375f, 0.0179899372160434722900390625f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.00348531105555593967437744140625f, -0.088973991572856903076171875f, -0.01310859434306621551513671875f, -0.1947328150272369384765625f), float4(-0.2708184421062469482421875f, -0.16812072694301605224609375f, 0.005299293436110019683837890625f, -0.0553315170109272003173828125f), float4(0.09446357190608978271484375f, 0.0192803330719470977783203125f, 0.16560757160186767578125f, -0.3230032026767730712890625f), float4(0.043096773326396942138671875f, 0.0592228956520557403564453125f, -0.0641849339008331298828125f, -0.0598524771630764007568359375f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.067942790687084197998046875f, -0.034135244786739349365234375f, 0.083064295351505279541015625f, 0.1350673139095306396484375f), float4(0.13064219057559967041015625f, -0.4497883319854736328125f, -0.035137169063091278076171875f, 0.089997150003910064697265625f), float4(0.11245410144329071044921875f, 0.42208397388458251953125f, -0.0038724816404283046722412109375f, -0.014332086779177188873291015625f), float4(-0.13751852512359619140625f, -0.04929868876934051513671875f, 0.091349922120571136474609375f, -0.17687530815601348876953125f)));
[   1.445][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.1009090840816497802734375f, -0.01311972551047801971435546875f, 0.08227479457855224609375f, -0.21384429931640625f), float4(-0.085159473121166229248046875f, -0.021058358252048492431640625f, 0.109517753124237060546875f, -0.0634919106960296630859375f), float4(-0.291298329830169677734375f, -0.02926265262067317962646484375f, 0.252354323863983154296875f, -0.117483146488666534423828125f), float4(0.12198038399219512939453125f, 0.06234778463840484619140625f, 0.10916931927204132080078125f, -0.159935176372528076171875f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.2889328300952911376953125f, -0.05677308142185211181640625f, -0.26412880420684814453125f, -0.0589372254908084869384765625f), float4(-0.16187570989131927490234375f, 0.006647366099059581756591796875f, -0.063294954597949981689453125f, 0.04766719043254852294921875f), float4(0.60601913928985595703125f, -0.07831864058971405029296875f, -0.1571075618267059326171875f, -0.011491796933114528656005859375f), float4(0.155874669551849365234375f, -0.08105374872684478759765625f, 0.078475140035152435302734375f, -0.2803333103656768798828125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(-0.077989794313907623291015625f, -0.098718106746673583984375f, -0.3516344130039215087890625f, 0.15292727947235107421875f), float4(0.0108892731368541717529296875f, 0.00111896614544093608856201171875f, -0.161182820796966552734375f, -0.0188211612403392791748046875f), float4(-0.0397086776793003082275390625f, -0.0006098341546021401882171630859375f, -0.06367813050746917724609375f, 0.009148067794740200042724609375f), float4(0.0391982682049274444580078125f, 0.1878274381160736083984375f, 0.02804075740277767181396484375f, -0.1023014485836029052734375f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.4079608917236328125f, 0.18640275299549102783203125f, -0.12475226819515228271484375f, 0.1389174163341522216796875f), float4(0.25121724605560302734375f, 0.1694237887859344482421875f, 0.1440985202789306640625f, 0.087600804865360260009765625f), float4(0.045335657894611358642578125f, -0.12683708965778350830078125f, -0.007738721556961536407470703125f, 0.06563413143157958984375f), float4(-0.19857127964496612548828125f, 0.1069107949733734130859375f, -0.0482852458953857421875f, 0.107689447700977325439453125f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.598907470703125f, 0.20941062271595001220703125f, -0.2008649408817291259765625f, 0.13344855606555938720703125f), float4(0.073034994304180145263671875f, 0.2235866487026214599609375f, 0.101664364337921142578125f, -0.13463662564754486083984375f), float4(0.18816395103931427001953125f, -0.0611766241490840911865234375f, -0.147121846675872802734375f, 0.02732034213840961456298828125f), float4(-0.095296673476696014404296875f, 0.03114878572523593902587890625f, -0.2874499261379241943359375f, 0.18698911368846893310546875f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.1479919254779815673828125f, 0.394719421863555908203125f, -0.23340325057506561279296875f, -0.40310609340667724609375f), float4(0.1892624795436859130859375f, -0.11091215908527374267578125f, 0.118981815874576568603515625f, -0.091550610959529876708984375f), float4(0.17049436271190643310546875f, 0.19803695380687713623046875f, -0.15132670104503631591796875f, 0.02381787262856960296630859375f), float4(0.009093313477933406829833984375f, -0.0413486398756504058837890625f, 0.0604865550994873046875f, 0.03536634147167205810546875f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.3909431397914886474609375f, 0.0177999697625637054443359375f, 0.12710268795490264892578125f, 0.0067333192564547061920166015625f), float4(-0.312558352947235107421875f, -0.082066118717193603515625f, -0.0485286377370357513427734375f, 0.36943900585174560546875f), float4(-0.193516552448272705078125f, -0.034204550087451934814453125f, 0.15831525623798370361328125f, -0.0522941462695598602294921875f), float4(-0.084817409515380859375f, 0.078710801899433135986328125f, 0.131213605403900146484375f, -0.108919285237789154052734375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.160681188106536865234375f, -0.421905815601348876953125f, 0.19383871555328369140625f, -0.018445707857608795166015625f), float4(0.098030507564544677734375f, -0.0207696519792079925537109375f, -0.02259956300258636474609375f, -0.0524488948285579681396484375f), float4(-0.2064583301544189453125f, -0.0314328633248805999755859375f, 0.0025441595353186130523681640625f, 0.034103788435459136962890625f), float4(-0.2026885449886322021484375f, 0.0448152683675289154052734375f, 0.051910631358623504638671875f, 0.423171937465667724609375f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.12786234915256500244140625f, -0.23936177790164947509765625f, 0.11656172573566436767578125f, 0.307563722133636474609375f), float4(-0.094201557338237762451171875f, -0.0445291660726070404052734375f, -0.035857491195201873779296875f, 0.18293319642543792724609375f), float4(-0.23939074575901031494140625f, 0.2403083145618438720703125f, 0.019878126680850982666015625f, -0.015069802291691303253173828125f), float4(0.243005573749542236328125f, -0.22558568418025970458984375f, -0.104956664144992828369140625f, -0.093936480581760406494140625f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.046070538461208343505859375f, 0.01267764903604984283447265625f, -0.027597688138484954833984375f, 0.1618835926055908203125f), float4(0.2921082675457000732421875f, 0.014221155084669589996337890625f, -0.1359103620052337646484375f, -0.068953357636928558349609375f), float4(-0.095595337450504302978515625f, 0.079564206302165985107421875f, -0.111129939556121826171875f, -0.13325493037700653076171875f), float4(0.245624721050262451171875f, 0.110461771488189697265625f, 0.05784769356250762939453125f, 0.001631598337553441524505615234375f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.033659510314464569091796875f, 0.0273910574615001678466796875f, 0.09653402864933013916015625f, -0.147187709808349609375f), float4(-0.0496311523020267486572265625f, -0.0646721422672271728515625f, -0.0585458762943744659423828125f, 0.142400205135345458984375f), float4(-0.063203759491443634033203125f, 0.18118299543857574462890625f, 0.102493621408939361572265625f, -0.1605213582515716552734375f), float4(0.3013474941253662109375f, -0.04156266152858734130859375f, 0.088620327413082122802734375f, 0.068880327045917510986328125f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.10045976936817169189453125f, -0.00419845618307590484619140625f, -0.025856055319309234619140625f, 0.0573941804468631744384765625f), float4(-0.132863700389862060546875f, -0.0259751714766025543212890625f, 0.06553716957569122314453125f, 0.113011859357357025146484375f), float4(0.07040870189666748046875f, -0.0835697650909423828125f, 0.1606610119342803955078125f, -0.24453587830066680908203125f), float4(0.253701746463775634765625f, 0.0371845327317714691162109375f, 0.06238676607608795166015625f, -0.20025634765625f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.01795894093811511993408203125f, 0.064177758991718292236328125f, -0.15252649784088134765625f, 0.12451173365116119384765625f), float4(0.1456768512725830078125f, -0.0049682115204632282257080078125f, -0.239734113216400146484375f, -0.07833039760589599609375f), float4(-0.01062943227589130401611328125f, 0.08055160939693450927734375f, 0.2028340995311737060546875f, 0.176406443119049072265625f), float4(-0.204451084136962890625f, -0.0555247925221920013427734375f, -0.01932613365352153778076171875f, 0.081288635730743408203125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.00788251869380474090576171875f, -0.0372254587709903717041015625f, 0.0532494075596332550048828125f, 0.0007184624555520713329315185546875f), float4(-0.070530287921428680419921875f, -0.21583865582942962646484375f, 0.14153639972209930419921875f, -0.1948665678501129150390625f), float4(0.20685541629791259765625f, 0.17660026252269744873046875f, -0.32156836986541748046875f, 0.17468249797821044921875f), float4(-0.1495762169361114501953125f, -0.092243783175945281982421875f, -0.098153434693813323974609375f, -0.13054637610912322998046875f)));
[   1.445][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.100514270365238189697265625f, -0.17398236691951751708984375f, 0.098427988588809967041015625f, -0.1418770253658294677734375f), float4(0.11690108478069305419921875f, -0.122954301536083221435546875f, -0.0007776771089993417263031005859375f, -0.204100549221038818359375f), float4(-0.11373484134674072265625f, -0.111150614917278289794921875f, -0.19740019738674163818359375f, -0.11641459167003631591796875f), float4(0.02410539798438549041748046875f, 0.24985976517200469970703125f, 0.01587185449898242950439453125f, -0.107246331870555877685546875f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.1808179318904876708984375f, 0.12093509733676910400390625f, -0.12867970764636993408203125f, -0.0194152481853961944580078125f), float4(0.062617875635623931884765625f, -0.037130393087863922119140625f, -0.0780365765094757080078125f, -0.22862352430820465087890625f), float4(0.25864279270172119140625f, -0.0300903655588626861572265625f, -0.118940688669681549072265625f, 0.1808751523494720458984375f), float4(-0.4092141687870025634765625f, 0.0700131952762603759765625f, 0.03054007329046726226806640625f, 0.0351208262145519256591796875f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.1318593919277191162109375f, 0.12992651760578155517578125f, 0.081250488758087158203125f, 0.075331173837184906005859375f), float4(0.064219765365123748779296875f, 0.056629724800586700439453125f, -0.0200120322406291961669921875f, -0.085544399917125701904296875f), float4(-0.04406316578388214111328125f, -0.05396544933319091796875f, -0.02800281159579753875732421875f, 0.218371570110321044921875f), float4(-0.15206427872180938720703125f, -0.1268100738525390625f, 0.14895032346248626708984375f, 0.123399622738361358642578125f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.0806634128093719482421875f, -0.1477363407611846923828125f, -0.0212226994335651397705078125f, -0.014011867344379425048828125f), float4(-0.0485057644546031951904296875f, 0.075407125055789947509765625f, -0.02062007598578929901123046875f, 0.00032913251197896897792816162109375f), float4(-0.2181520164012908935546875f, -0.23136545717716217041015625f, 0.1085353195667266845703125f, -0.0360584557056427001953125f), float4(0.10952532291412353515625f, -0.05267703533172607421875f, -0.130057990550994873046875f, 0.18398995697498321533203125f)))) + float4(0.022609136998653411865234375f, -0.028548084199428558349609375f, 0.02443190105259418487548828125f, 0.010504477657377719879150390625f);
[   1.445][d][vo/gpu/d3d11] [ 61] }
[   1.445][d][vo/gpu/d3d11] [ 62] 
[   1.445][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.445][d][vo/gpu/d3d11] [ 64] {
[   1.445][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.445][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.445][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.445][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.445][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.445][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.445][d][vo/gpu/d3d11] [ 71] }
[   1.445][d][vo/gpu] Resizing texture: 1920x800
[   1.447][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.449][v][vo/gpu/d3d11] Compiled a vertex shader in 4776us
[   1.449][v][vo/gpu/d3d11] shaderc: 2730us, SPIRV-Cross: 124us, D3DCompile: 1922us
[   1.449][d][vo/gpu/d3d11] GLSL source:
[   1.449][d][vo/gpu/d3d11] [  1] #version 450
[   1.449][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.449][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.449][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.449][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.449][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.449][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.449][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.449][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.449][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.449][d][vo/gpu/d3d11] [ 11] void main() {
[   1.449][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.449][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.449][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.449][d][vo/gpu/d3d11] [ 15] }
[   1.450][d][vo/gpu/d3d11] HLSL source:
[   1.450][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.450][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.450][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.450][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.450][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.450][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.450][d][vo/gpu/d3d11] [  7] 
[   1.450][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.450][d][vo/gpu/d3d11] [  9] {
[   1.450][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.450][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.450][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.450][d][vo/gpu/d3d11] [ 13] };
[   1.450][d][vo/gpu/d3d11] [ 14] 
[   1.450][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.450][d][vo/gpu/d3d11] [ 16] {
[   1.450][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.450][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.450][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.450][d][vo/gpu/d3d11] [ 20] };
[   1.450][d][vo/gpu/d3d11] [ 21] 
[   1.450][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.450][d][vo/gpu/d3d11] [ 23] {
[   1.450][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.450][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.450][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.450][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.450][d][vo/gpu/d3d11] [ 28] }
[   1.450][d][vo/gpu/d3d11] [ 29] 
[   1.450][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.450][d][vo/gpu/d3d11] [ 31] {
[   1.450][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.450][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.450][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.450][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.450][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.450][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.450][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.450][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.450][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.450][d][vo/gpu/d3d11] [ 41] }
[   1.476][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.524][v][vo/gpu/d3d11] Compiled a fragment shader in 74598us
[   1.524][v][vo/gpu/d3d11] shaderc: 26632us, SPIRV-Cross: 2577us, D3DCompile: 45389us
[   1.524][d][vo/gpu/d3d11] GLSL source:
[   1.524][d][vo/gpu/d3d11] [  1] #version 450
[   1.524][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.524][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.524][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.524][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.524][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.524][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.524][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.524][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.524][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.524][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.524][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.524][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.524][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.524][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.524][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.524][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.524][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.524][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.524][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.524][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.524][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.524][d][vo/gpu/d3d11] [ 23] };
[   1.524][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.524][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.524][d][vo/gpu/d3d11] [ 26] #define conv2d_1_tf_raw texture0
[   1.524][d][vo/gpu/d3d11] [ 27] #define conv2d_1_tf_pos texcoord0
[   1.524][d][vo/gpu/d3d11] [ 28] #define conv2d_1_tf_size texture_size0
[   1.524][d][vo/gpu/d3d11] [ 29] #define conv2d_1_tf_rot texture_rot0
[   1.524][d][vo/gpu/d3d11] [ 30] #define conv2d_1_tf_off texture_off0
[   1.524][d][vo/gpu/d3d11] [ 31] #define conv2d_1_tf_pt pixel_size0
[   1.524][d][vo/gpu/d3d11] [ 32] #define conv2d_1_tf_map texmap0
[   1.524][d][vo/gpu/d3d11] [ 33] #define conv2d_1_tf_mul 1.000000
[   1.524][d][vo/gpu/d3d11] [ 34] #define conv2d_1_tf_tex(pos) (conv2d_1_tf_mul * vec4(texture(conv2d_1_tf_raw, pos)).rgba)
[   1.524][d][vo/gpu/d3d11] [ 35] #define conv2d_1_tf_gather(pos, c) (conv2d_1_tf_mul * vec4(textureGather(conv2d_1_tf_raw, pos, c)))
[   1.524][d][vo/gpu/d3d11] [ 36] #define conv2d_1_tf_texOff(off) conv2d_1_tf_tex(conv2d_1_tf_pos + conv2d_1_tf_pt * vec2(off))
[   1.524][d][vo/gpu/d3d11] [ 37] #define conv2d_1_tf1_raw texture1
[   1.524][d][vo/gpu/d3d11] [ 38] #define conv2d_1_tf1_pos texcoord1
[   1.524][d][vo/gpu/d3d11] [ 39] #define conv2d_1_tf1_size texture_size1
[   1.524][d][vo/gpu/d3d11] [ 40] #define conv2d_1_tf1_rot texture_rot1
[   1.524][d][vo/gpu/d3d11] [ 41] #define conv2d_1_tf1_off texture_off1
[   1.524][d][vo/gpu/d3d11] [ 42] #define conv2d_1_tf1_pt pixel_size1
[   1.524][d][vo/gpu/d3d11] [ 43] #define conv2d_1_tf1_map texmap1
[   1.524][d][vo/gpu/d3d11] [ 44] #define conv2d_1_tf1_mul 1.000000
[   1.524][d][vo/gpu/d3d11] [ 45] #define conv2d_1_tf1_tex(pos) (conv2d_1_tf1_mul * vec4(texture(conv2d_1_tf1_raw, pos)).rgba)
[   1.524][d][vo/gpu/d3d11] [ 46] #define conv2d_1_tf1_gather(pos, c) (conv2d_1_tf1_mul * vec4(textureGather(conv2d_1_tf1_raw, pos, c)))
[   1.524][d][vo/gpu/d3d11] [ 47] #define conv2d_1_tf1_texOff(off) conv2d_1_tf1_tex(conv2d_1_tf1_pos + conv2d_1_tf1_pt * vec2(off))
[   1.524][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.524][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.524][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.524][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.524][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.524][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.069641694, 0.104958326, 0.14786446, 0.027633663, -0.004279524, -0.020451711, 0.0883571, -0.016224537, 0.13585235, 0.11078269, 0.20198658, -0.042161036, 0.020466218, 0.20994963, 0.20072585, -0.028024657) * go_0(-1.0, -1.0);
[   1.524][d][vo/gpu/d3d11] [ 54]     result += mat4(0.050872434, 0.12874635, 0.1298729, 0.115810685, 0.07087254, 0.09885682, 0.23018982, 0.19187538, 0.10953604, 0.0033836907, -0.13325337, 0.09830315, -0.06528767, 0.05096927, -0.016355392, -0.039334368) * go_0(-1.0, 0.0);
[   1.524][d][vo/gpu/d3d11] [ 55]     result += mat4(0.027010268, 0.018263958, 0.0360758, 0.016791478, 0.2815702, 0.15517488, 0.43415815, 0.044976447, -0.0070842914, -0.12546758, 0.16874593, 0.077622116, 0.02252915, 0.1769774, 0.07181055, -0.15128697) * go_0(-1.0, 1.0);
[   1.524][d][vo/gpu/d3d11] [ 56]     result += mat4(0.057129618, 0.118046716, 0.07237424, -0.07842637, -0.044214778, -0.12886304, 0.08603301, -0.10416606, -0.15852053, 0.3788151, 0.26181692, -0.09092249, 0.31635332, 0.064212754, 0.21923725, 0.07500004) * go_0(0.0, -1.0);
[   1.524][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.16981383, 0.044409662, -0.3717617, -0.031610407, 0.03658662, -0.09459229, -0.09449437, -0.014000666, -0.19656453, 0.03934163, -0.16304104, -0.12761801, -0.06235523, 0.16438273, -0.036933117, -0.095564745) * go_0(0.0, 0.0);
[   1.524][d][vo/gpu/d3d11] [ 58]     result += mat4(0.09725091, 0.034022827, 0.17699842, 0.1079676, -0.13236652, 0.03718181, -0.06968635, -0.23288171, 0.10275666, 0.08464966, -0.37162134, -0.35782215, -0.11023659, 0.2519236, -0.035197742, -0.019324787) * go_0(0.0, 1.0);
[   1.524][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.09968464, 0.01102193, 0.0073735216, 0.011999313, -0.004998707, 0.09518938, 0.045727003, -0.21544908, 0.006879454, -0.06398254, -0.12584935, -0.06759933, -0.0820037, -0.07775104, 0.021957919, -0.122708224) * go_0(1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.08869767, 0.031296413, -0.0034280645, 0.13778855, 0.10073061, -0.08393937, -0.032959275, -0.0500518, 0.010908757, -0.09189417, -0.057760105, 0.17652664, -0.08729078, -0.09639096, -0.25654703, 0.055152636) * go_0(1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 61]     result += mat4(0.0027847723, -0.12885433, 0.038065907, 0.17450769, 0.0864409, 0.04592345, -0.015443841, 0.077010944, 0.08967368, 0.06800111, -0.23636387, 0.35023567, 0.03165923, 0.03132063, 0.17964344, 0.035610788) * go_0(1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.032017227, -0.0022808525, -0.08470573, 0.05332408, -0.14674746, 0.025374275, -0.018281924, 0.041163016, 0.00096549373, 0.014724006, 0.004913065, 0.18494442, 0.034953076, -0.15731992, -0.13792977, 0.08041999) * go_1(-1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 63]     result += mat4(0.08305006, 8.6318905e-05, -0.007895379, 0.02731387, -0.061324496, 0.050034665, 0.22662131, -0.013876427, -0.074468784, -0.008136604, -0.23337875, -0.1742574, 0.011753501, -0.11666686, -0.22541048, -0.14549944) * go_1(-1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.028333234, 0.121047184, 0.06720256, -0.058930036, 0.030258363, 0.07292774, 0.06455556, 0.0019076486, 0.0073987027, 0.17144889, 0.06084024, -0.08762086, -0.114422195, -0.16595861, -0.08706028, -0.10736261) * go_1(-1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.02519315, -0.14611271, 0.0388848, 0.19481422, -0.05970354, -0.08391417, 0.18982239, -0.10447052, 0.15587378, -0.023997072, 0.0781739, 0.2182389, -0.023886079, -0.1422596, -0.13352804, 0.005008043) * go_1(0.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 66]     result += mat4(0.08842712, -0.100292705, 0.18925671, 0.12198875, 0.061771665, -0.04473232, 0.025053164, 0.039047796, -0.1672479, -0.08934517, 0.33099812, -0.20269585, -0.21640155, -0.22029749, 0.16539703, -0.2442679) * go_1(0.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.16332205, -0.101898365, 0.02919932, -0.11900455, 0.14442924, 0.0916815, 0.037550304, 0.024123482, 0.02042624, 0.033472955, -0.059437107, -0.18735693, -0.013749093, -0.06199881, -0.08685079, 0.04252364) * go_1(0.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.09047013, -0.055188328, -0.09106191, -0.048969727, 0.05114009, -0.12753403, 0.07116141, 0.060749624, -0.074034564, -0.21952136, -0.09479503, 0.2753584, -0.014141759, -0.14883812, -0.0673838, -0.012279045) * go_1(1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 69]     result += mat4(0.013816464, -0.0747162, -0.19202435, -0.064403646, 0.34980014, 0.04375546, 0.20264609, 0.006684355, 0.11523799, 0.024674915, -0.08697566, -0.04662527, -0.12743855, -0.39463726, 0.0057380227, 0.01286557) * go_1(1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.08146522, 0.074080914, -0.16856177, -0.183158, 0.19228102, 0.12373886, 0.017574452, -0.01753772, 0.045071773, 0.07725093, 0.023422163, -0.011545186, 0.20751388, -0.10795588, 0.07606346, 0.10282933) * go_1(1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 71]     result += mat4(0.12512013, -0.102208994, -0.09125398, 0.12043188, -0.066011876, 0.08831903, -0.017038671, -0.005541508, -0.049607087, 0.08654939, -0.02037085, 0.26887566, 0.005012545, 0.01869507, -0.013064982, -0.010649147) * go_2(-1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 72]     result += mat4(0.006824864, -0.05071593, -0.20786697, -0.07327317, 0.011382597, 0.030494886, -0.04754353, -0.018284699, 0.01305972, -0.036589053, 0.26637617, 0.021887446, -0.026669119, -0.037982125, -0.063445956, -0.009104248) * go_2(-1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 73]     result += mat4(0.032602567, 0.07094331, 0.052653246, 0.08342047, -0.085082285, -0.14674088, -0.23073354, -0.07915851, 0.0017120204, 0.032407638, -0.039819505, 0.16942178, 0.023192152, -0.0353237, 0.10930186, 0.22939779) * go_2(-1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 74]     result += mat4(0.0010455973, -0.11821993, -0.12639599, 0.12250084, -0.12756817, 0.11478416, -0.1862587, 0.016819192, 0.02110181, -0.25492984, -0.1766048, 0.22188173, -0.21305011, 0.113442205, 0.04599144, -0.15840286) * go_2(0.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 75]     result += mat4(-0.15086032, -0.17428935, 0.39080557, 0.07576757, 0.121703945, 0.17944208, -0.003140103, -0.11231332, 0.12102969, 0.15310267, 0.17578171, 0.40631834, -0.21299168, 0.024928993, 0.030104794, 0.020753227) * go_2(0.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.098734386, -0.020072265, -0.14308836, -0.08490801, 0.017175158, 0.02250534, 0.04060829, 0.033022214, 0.0046218676, 0.17923212, 0.0112105915, 0.09574084, 0.14819936, -0.14692923, 0.12634254, 0.060762513) * go_2(0.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 77]     result += mat4(0.030521613, -0.097913325, -0.016720278, 0.11273997, 0.013019863, -0.06557118, 0.0405774, 0.0915019, 0.022414956, -0.053254984, 0.18639986, 0.07820968, 0.06498986, 0.058922634, -0.02240318, -0.086019725) * go_2(1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 78]     result += mat4(0.2058775, 0.01502064, 0.05847032, 0.007249146, 0.086483665, 0.19420148, 0.03892261, -0.013546935, -0.07980237, 0.04347281, -0.10376214, -0.1366535, 0.05285337, 0.07213318, 0.3642818, -0.11331124) * go_2(1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.025740806, 0.14551482, -0.037410017, -0.17477523, -0.11853099, -0.060820814, -0.102599286, -0.13267937, -0.103053465, -0.014044828, -0.01888072, -0.06499249, 0.22311528, -0.051850274, -0.034120858, 0.044562567) * go_2(1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.21360217, 0.10093803, -0.0016407765, -0.1473997, 0.26524043, 0.02112132, 0.23173104, -0.013157391, 0.05945182, 0.044635538, 0.06031638, -0.21435826, -0.10147484, 0.069090195, 0.09641844, -0.09581093) * go_3(-1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.08576515, -0.122861005, 0.049567085, -0.085854456, 0.23809357, -0.024966082, -0.10294079, 0.046241313, 0.008621132, -0.08323767, 0.20277941, 0.163423, -0.07386535, -0.088738985, 0.05274358, -0.025479877) * go_3(-1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.041135542, -0.008365642, 0.17088248, 0.04025207, 0.13809255, -0.056895368, -0.01582834, 0.07361908, -0.00068995473, -0.09300962, 0.19117641, 0.24832036, -0.06572358, -0.026025, -0.019093119, -0.049720034) * go_3(-1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 83]     result += mat4(0.024900286, 0.11525501, 0.025882801, 0.037742402, 0.36976853, 0.052211333, -0.15143296, 0.1802276, -0.059080046, 0.017990451, 0.026395092, -0.12689115, -0.07705386, 0.1232379, 0.13273561, -0.12521964) * go_3(0.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.19788785, 0.044887315, 0.07663442, 0.16688696, -0.2842248, -0.15684547, 0.028387763, 0.0063470444, -0.012245601, -0.038382255, -0.8187406, -0.25245667, 0.23014604, 0.22746666, 0.1594356, 0.16469443) * go_3(0.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.12663333, 0.014730006, 0.03765697, 0.15704912, -0.106595434, -0.05317512, -0.081759915, -0.08797109, 0.064620756, -0.06341419, 0.16493447, 0.23102313, 0.068325415, -0.088058695, 0.16885915, 0.036382258) * go_3(0.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 86]     result += mat4(0.035389822, -0.11811836, -0.035656307, -0.0680554, 0.1338908, 0.065852076, 0.023307983, 0.0675308, 0.09690683, 0.18170924, 0.09862692, -0.20964378, -0.08601271, -0.20016764, -0.01879598, -0.14629345) * go_3(1.0, -1.0);
[   1.525][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.27183273, 0.013525998, -0.14995874, -0.23938845, -0.26218823, -0.0009874097, -0.13385512, -0.10664239, -0.048931994, 0.039898522, 0.047444753, 0.10934722, 0.10969629, 0.123539805, 0.11692802, 0.14172275) * go_3(1.0, 0.0);
[   1.525][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.1656506, 0.019683002, 0.0221048, 0.12596753, 0.20420644, -0.07930122, 0.04653823, 0.11492255, -0.0050175437, -0.03271697, 0.013389486, 0.034583613, -0.2196601, -0.1615663, -0.013763388, -0.056037936) * go_3(1.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.022956269, 0.029688787, -0.070148066, -0.07163476);
[   1.525][d][vo/gpu/d3d11] [ 90]     return result;
[   1.525][d][vo/gpu/d3d11] [ 91] }
[   1.525][d][vo/gpu/d3d11] [ 92] void main() {
[   1.525][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.525][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.525][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.525][d][vo/gpu/d3d11] [ 96] }
[   1.525][d][vo/gpu/d3d11] HLSL source:
[   1.525][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.525][d][vo/gpu/d3d11] [  2] {
[   1.525][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.525][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.525][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.525][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.525][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.525][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.525][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.525][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.525][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.525][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.525][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.525][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.525][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.525][d][vo/gpu/d3d11] [ 16] };
[   1.525][d][vo/gpu/d3d11] [ 17] 
[   1.525][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.525][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.525][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.525][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.525][d][vo/gpu/d3d11] [ 22] 
[   1.525][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.525][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.525][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.525][d][vo/gpu/d3d11] [ 26] 
[   1.525][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.525][d][vo/gpu/d3d11] [ 28] {
[   1.525][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.525][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.525][d][vo/gpu/d3d11] [ 31] };
[   1.525][d][vo/gpu/d3d11] [ 32] 
[   1.525][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.525][d][vo/gpu/d3d11] [ 34] {
[   1.525][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.525][d][vo/gpu/d3d11] [ 36] };
[   1.525][d][vo/gpu/d3d11] [ 37] 
[   1.525][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.525][d][vo/gpu/d3d11] [ 39] {
[   1.525][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.525][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.06964169442653656005859375f, 0.1049583256244659423828125f, 0.14786446094512939453125f, 0.0276336632668972015380859375f), float4(-0.0042795240879058837890625f, -0.02045171149075031280517578125f, 0.088357098400592803955078125f, -0.0162245370447635650634765625f), float4(0.13585235178470611572265625f, 0.110782690346240997314453125f, 0.2019865810871124267578125f, -0.0421610362827777862548828125f), float4(0.02046621777117252349853515625f, 0.20994962751865386962890625f, 0.200725853443145751953125f, -0.02802465669810771942138671875f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.0508724339306354522705078125f, 0.12874634563922882080078125f, 0.12987290322780609130859375f, 0.115810684859752655029296875f), float4(0.070872537791728973388671875f, 0.09885682165622711181640625f, 0.23018981516361236572265625f, 0.19187538325786590576171875f), float4(0.10953603684902191162109375f, 0.00338369072414934635162353515625f, -0.1332533657550811767578125f, 0.098303146660327911376953125f), float4(-0.065287671983242034912109375f, 0.0509692691266536712646484375f, -0.0163553915917873382568359375f, -0.0393343679606914520263671875f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.02701026760041713714599609375f, 0.018263958394527435302734375f, 0.0360758006572723388671875f, 0.01679147779941558837890625f), float4(0.2815701961517333984375f, 0.1551748812198638916015625f, 0.434158146381378173828125f, 0.0449764467775821685791015625f), float4(-0.0070842914283275604248046875f, -0.12546758353710174560546875f, 0.168745934963226318359375f, 0.077622115612030029296875f), float4(0.02252914942800998687744140625f, 0.1769773960113525390625f, 0.071810550987720489501953125f, -0.15128697454929351806640625f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.0571296177804470062255859375f, 0.11804671585559844970703125f, 0.07237423956394195556640625f, -0.078426368534564971923828125f), float4(-0.044214777648448944091796875f, -0.128863036632537841796875f, 0.086033008992671966552734375f, -0.1041660606861114501953125f), float4(-0.15852053463459014892578125f, 0.378815114498138427734375f, 0.261816918849945068359375f, -0.09092248976230621337890625f), float4(0.316353321075439453125f, 0.06421275436878204345703125f, 0.21923725306987762451171875f, 0.075000040233135223388671875f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.16981382668018341064453125f, 0.0444096624851226806640625f, -0.3717617094516754150390625f, -0.031610406935214996337890625f), float4(0.036586619913578033447265625f, -0.09459228813648223876953125f, -0.0944943726062774658203125f, -0.014000666327774524688720703125f), float4(-0.1965645253658294677734375f, 0.039341628551483154296875f, -0.16304104030132293701171875f, -0.127618014812469482421875f), float4(-0.0623552314937114715576171875f, 0.1643827259540557861328125f, -0.036933116614818572998046875f, -0.095564745366573333740234375f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.0972509086132049560546875f, 0.0340228267014026641845703125f, 0.17699842154979705810546875f, 0.10796760022640228271484375f), float4(-0.13236652314662933349609375f, 0.03718180954456329345703125f, -0.069686353206634521484375f, -0.23288170993328094482421875f), float4(0.102756656706333160400390625f, 0.084649659693241119384765625f, -0.3716213405132293701171875f, -0.3578221499919891357421875f), float4(-0.110236592590808868408203125f, 0.2519235908985137939453125f, -0.035197742283344268798828125f, -0.019324786961078643798828125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.09968464076519012451171875f, 0.011021929793059825897216796875f, 0.0073735215701162815093994140625f, 0.0119993127882480621337890625f), float4(-0.004998707212507724761962890625f, 0.09518937766551971435546875f, 0.0457270033657550811767578125f, -0.21544907987117767333984375f), float4(0.0068794540129601955413818359375f, -0.063982538878917694091796875f, -0.12584935128688812255859375f, -0.0675993263721466064453125f), float4(-0.08200369775295257568359375f, -0.07775104045867919921875f, 0.02195791900157928466796875f, -0.122708223760128021240234375f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.0886976718902587890625f, 0.0312964133918285369873046875f, -0.00342806451953947544097900390625f, 0.13778854906558990478515625f), float4(0.10073061287403106689453125f, -0.083939373493194580078125f, -0.032959274947643280029296875f, -0.050051800906658172607421875f), float4(0.010908757336437702178955078125f, -0.091894172132015228271484375f, -0.05776010453701019287109375f, 0.1765266358852386474609375f), float4(-0.08729077875614166259765625f, -0.0963909626007080078125f, -0.256547033786773681640625f, 0.0551526360213756561279296875f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.0027847723104059696197509765625f, -0.128854334354400634765625f, 0.0380659066140651702880859375f, 0.17450769245624542236328125f), float4(0.086440898478031158447265625f, 0.045923449099063873291015625f, -0.01544384099543094635009765625f, 0.07701094448566436767578125f), float4(0.08967368304729461669921875f, 0.06800110638141632080078125f, -0.23636387288570404052734375f, 0.3502356708049774169921875f), float4(0.03165923058986663818359375f, 0.031320631504058837890625f, 0.17964343726634979248046875f, 0.035610787570476531982421875f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.0320172272622585296630859375f, -0.00228085252456367015838623046875f, -0.084705732762813568115234375f, 0.053324081003665924072265625f), float4(-0.14674745500087738037109375f, 0.0253742747008800506591796875f, -0.01828192360699176788330078125f, 0.0411630161106586456298828125f), float4(0.000965493731200695037841796875f, 0.014724005945026874542236328125f, 0.0049130651168525218963623046875f, 0.1849444210529327392578125f), float4(0.0349530763924121856689453125f, -0.15731991827487945556640625f, -0.1379297673702239990234375f, 0.0804199874401092529296875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.08305005729198455810546875f, 8.631890523247420787811279296875e-05f, -0.007895379327237606048583984375f, 0.0273138694465160369873046875f), float4(-0.0613244958221912384033203125f, 0.050034664571285247802734375f, 0.22662131488323211669921875f, -0.0138764269649982452392578125f), float4(-0.074468784034252166748046875f, -0.0081366039812564849853515625f, -0.23337875306606292724609375f, -0.17425739765167236328125f), float4(0.01175350137054920196533203125f, -0.116666860878467559814453125f, -0.22541047632694244384765625f, -0.1454994380474090576171875f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.02833323366940021514892578125f, 0.12104718387126922607421875f, 0.067202560603618621826171875f, -0.0589300356805324554443359375f), float4(0.03025836311280727386474609375f, 0.0729277431964874267578125f, 0.064555563032627105712890625f, 0.001907648635096848011016845703125f), float4(0.0073987026698887348175048828125f, 0.171448886394500732421875f, 0.060840241611003875732421875f, -0.087620861828327178955078125f), float4(-0.114422194659709930419921875f, -0.1659586131572723388671875f, -0.087060280144214630126953125f, -0.10736261308193206787109375f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.02519314922392368316650390625f, -0.1461127102375030517578125f, 0.0388847999274730682373046875f, 0.19481422007083892822265625f), float4(-0.0597035400569438934326171875f, -0.083914168179035186767578125f, 0.18982239067554473876953125f, -0.1044705212116241455078125f), float4(0.155873775482177734375f, -0.0239970721304416656494140625f, 0.078173898160457611083984375f, 0.21823890507221221923828125f), float4(-0.02388607896864414215087890625f, -0.1422595977783203125f, -0.13352803885936737060546875f, 0.005008042789995670318603515625f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(0.088427118957042694091796875f, -0.100292704999446868896484375f, 0.18925671279430389404296875f, 0.121988750994205474853515625f), float4(0.0617716647684574127197265625f, -0.0447323210537433624267578125f, 0.02505316399037837982177734375f, 0.0390477962791919708251953125f), float4(-0.16724790632724761962890625f, -0.08934517204761505126953125f, 0.330998122692108154296875f, -0.2026958465576171875f), float4(-0.2164015471935272216796875f, -0.2202974855899810791015625f, 0.16539703309535980224609375f, -0.24426789581775665283203125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.16332204639911651611328125f, -0.101898364722728729248046875f, 0.0291993208229541778564453125f, -0.119004547595977783203125f), float4(0.1444292366504669189453125f, 0.091681502759456634521484375f, 0.0375503040850162506103515625f, 0.024123482406139373779296875f), float4(0.0204262398183345794677734375f, 0.033472955226898193359375f, -0.0594371072947978973388671875f, -0.18735693395137786865234375f), float4(-0.0137490928173065185546875f, -0.0619988106191158294677734375f, -0.0868507921695709228515625f, 0.0425236411392688751220703125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.090470127761363983154296875f, -0.0551883280277252197265625f, -0.091061912477016448974609375f, -0.0489697270095348358154296875f), float4(0.0511400885879993438720703125f, -0.12753403186798095703125f, 0.071161411702632904052734375f, 0.0607496239244937896728515625f), float4(-0.074034564197063446044921875f, -0.21952135860919952392578125f, -0.09479503333568572998046875f, 0.2753584086894989013671875f), float4(-0.01414175890386104583740234375f, -0.14883811771869659423828125f, -0.067383803427219390869140625f, -0.0122790448367595672607421875f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.013816463761031627655029296875f, -0.074716202914714813232421875f, -0.19202435016632080078125f, -0.064403645694255828857421875f), float4(0.3498001396656036376953125f, 0.0437554605305194854736328125f, 0.20264609158039093017578125f, 0.0066843549720942974090576171875f), float4(0.115237988531589508056640625f, 0.024674914777278900146484375f, -0.086975656449794769287109375f, -0.04662527143955230712890625f), float4(-0.12743854522705078125f, -0.3946372568607330322265625f, 0.005738022737205028533935546875f, 0.012865570373833179473876953125f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.081465221941471099853515625f, 0.0740809142589569091796875f, -0.16856177151203155517578125f, -0.18315799534320831298828125f), float4(0.19228102266788482666015625f, 0.123738862574100494384765625f, 0.017574451863765716552734375f, -0.017537720501422882080078125f), float4(0.045071773231029510498046875f, 0.0772509276866912841796875f, 0.0234221629798412322998046875f, -0.011545185931026935577392578125f), float4(0.20751388370990753173828125f, -0.107955880463123321533203125f, 0.076063461601734161376953125f, 0.102829329669475555419921875f)));
[   1.525][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.1251201331615447998046875f, -0.102208994328975677490234375f, -0.09125398099422454833984375f, 0.120431877672672271728515625f), float4(-0.0660118758678436279296875f, 0.0883190333843231201171875f, -0.01703867129981517791748046875f, -0.005541508086025714874267578125f), float4(-0.0496070869266986846923828125f, 0.08654938638210296630859375f, -0.02037085033953189849853515625f, 0.268875658512115478515625f), float4(0.005012544803321361541748046875f, 0.01869506947696208953857421875f, -0.01306498236954212188720703125f, -0.010649147443473339080810546875f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.00682486407458782196044921875f, -0.050715930759906768798828125f, -0.207866966724395751953125f, -0.07327316701412200927734375f), float4(0.01138259656727313995361328125f, 0.03049488551914691925048828125f, -0.0475435294210910797119140625f, -0.01828469894826412200927734375f), float4(0.01305972039699554443359375f, -0.0365890525281429290771484375f, 0.2663761675357818603515625f, 0.02188744582235813140869140625f), float4(-0.0266691185534000396728515625f, -0.0379821248352527618408203125f, -0.0634459555149078369140625f, -0.0091042481362819671630859375f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.0326025672256946563720703125f, 0.07094331085681915283203125f, 0.052653245627880096435546875f, 0.08342047035694122314453125f), float4(-0.085082285106182098388671875f, -0.1467408835887908935546875f, -0.2307335436344146728515625f, -0.079158507287502288818359375f), float4(0.001712020370177924633026123046875f, 0.0324076376855373382568359375f, -0.0398195050656795501708984375f, 0.16942177712917327880859375f), float4(0.02319215238094329833984375f, -0.035323701798915863037109375f, 0.109301857650279998779296875f, 0.22939778864383697509765625f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.0010455972515046596527099609375f, -0.11821992695331573486328125f, -0.12639598548412322998046875f, 0.122500836849212646484375f), float4(-0.12756817042827606201171875f, 0.114784158766269683837890625f, -0.1862587034702301025390625f, 0.01681919209659099578857421875f), float4(0.021101810038089752197265625f, -0.254929840564727783203125f, -0.176604807376861572265625f, 0.22188173234462738037109375f), float4(-0.21305011212825775146484375f, 0.113442204892635345458984375f, 0.0459914393723011016845703125f, -0.158402860164642333984375f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(-0.15086032450199127197265625f, -0.17428934574127197265625f, 0.3908055722713470458984375f, 0.075767569243907928466796875f), float4(0.121703945100307464599609375f, 0.1794420778751373291015625f, -0.0031401030719280242919921875f, -0.112313322722911834716796875f), float4(0.12102968990802764892578125f, 0.1531026661396026611328125f, 0.17578171193599700927734375f, 0.4063183367252349853515625f), float4(-0.2129916846752166748046875f, 0.02492899261415004730224609375f, 0.030104793608188629150390625f, 0.020753227174282073974609375f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.098734386265277862548828125f, -0.02007226459681987762451171875f, -0.14308835566043853759765625f, -0.084908008575439453125f), float4(0.01717515848577022552490234375f, 0.0225053392350673675537109375f, 0.0406082905828952789306640625f, 0.0330222137272357940673828125f), float4(0.0046218675561249256134033203125f, 0.179232120513916015625f, 0.011210591532289981842041015625f, 0.09574083983898162841796875f), float4(0.14819936454296112060546875f, -0.1469292342662811279296875f, 0.1263425350189208984375f, 0.0607625134289264678955078125f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.0305216126143932342529296875f, -0.097913324832916259765625f, -0.01672027818858623504638671875f, 0.112739972770214080810546875f), float4(0.013019862584769725799560546875f, -0.065571181476116180419921875f, 0.0405774004757404327392578125f, 0.091501899063587188720703125f), float4(0.0224149562418460845947265625f, -0.053254984319210052490234375f, 0.18639986217021942138671875f, 0.07820968329906463623046875f), float4(0.064989857375621795654296875f, 0.05892263352870941162109375f, -0.022403180599212646484375f, -0.0860197246074676513671875f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.20587749779224395751953125f, 0.015020639635622501373291015625f, 0.0584703199565410614013671875f, 0.007249145768582820892333984375f), float4(0.086483664810657501220703125f, 0.19420148432254791259765625f, 0.0389226116240024566650390625f, -0.013546935282647609710693359375f), float4(-0.079802371561527252197265625f, 0.04347281157970428466796875f, -0.103762142360210418701171875f, -0.13665349781513214111328125f), float4(0.052853368222713470458984375f, 0.07213318347930908203125f, 0.3642818033695220947265625f, -0.113311238586902618408203125f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.0257408060133457183837890625f, 0.1455148160457611083984375f, -0.0374100171029567718505859375f, -0.17477522790431976318359375f), float4(-0.1185309886932373046875f, -0.0608208142220973968505859375f, -0.102599285542964935302734375f, -0.1326793730258941650390625f), float4(-0.10305346548557281494140625f, -0.014044827781617641448974609375f, -0.01888071931898593902587890625f, -0.064992487430572509765625f), float4(0.22311528027057647705078125f, -0.05185027420520782470703125f, -0.034120857715606689453125f, 0.0445625670254230499267578125f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.21360217034816741943359375f, 0.100938029587268829345703125f, -0.001640776521526277065277099609375f, -0.1473996937274932861328125f), float4(0.2652404308319091796875f, 0.0211213193833827972412109375f, 0.23173104226589202880859375f, -0.013157390989363193511962890625f), float4(0.0594518184661865234375f, 0.0446355380117893218994140625f, 0.0603163801133632659912109375f, -0.21435825526714324951171875f), float4(-0.10147483646869659423828125f, 0.069090195000171661376953125f, 0.096418440341949462890625f, -0.095810927450656890869140625f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.0857651531696319580078125f, -0.122861005365848541259765625f, 0.0495670847594738006591796875f, -0.08585445582866668701171875f), float4(0.23809356987476348876953125f, -0.02496608160436153411865234375f, -0.102940790355205535888671875f, 0.0462413132190704345703125f), float4(0.00862113200128078460693359375f, -0.083237670361995697021484375f, 0.20277941226959228515625f, 0.163423001766204833984375f), float4(-0.073865346610546112060546875f, -0.088738985359668731689453125f, 0.0527435801923274993896484375f, -0.02547987736761569976806640625f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.041135542094707489013671875f, -0.0083656422793865203857421875f, 0.17088247835636138916015625f, 0.0402520708739757537841796875f), float4(0.1380925476551055908203125f, -0.056895367801189422607421875f, -0.01582833938300609588623046875f, 0.07361908257007598876953125f), float4(-0.00068995472975075244903564453125f, -0.0930096209049224853515625f, 0.19117641448974609375f, 0.24832035601139068603515625f), float4(-0.06572358310222625732421875f, -0.02602499909698963165283203125f, -0.019093118607997894287109375f, -0.04972003400325775146484375f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.02490028552711009979248046875f, 0.11525501310825347900390625f, 0.02588280104100704193115234375f, 0.0377424024045467376708984375f), float4(0.3697685301303863525390625f, 0.0522113330662250518798828125f, -0.1514329612255096435546875f, 0.18022759258747100830078125f), float4(-0.0590800456702709197998046875f, 0.0179904513061046600341796875f, 0.02639509178698062896728515625f, -0.12689115107059478759765625f), float4(-0.07705385982990264892578125f, 0.123237900435924530029296875f, 0.13273561000823974609375f, -0.125219643115997314453125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.19788785278797149658203125f, 0.0448873154819011688232421875f, 0.07663442194461822509765625f, 0.1668869554996490478515625f), float4(-0.284224808216094970703125f, -0.15684546530246734619140625f, 0.028387762606143951416015625f, 0.006347044371068477630615234375f), float4(-0.01224560104310512542724609375f, -0.038382254540920257568359375f, -0.8187406063079833984375f, -0.2524566650390625f), float4(0.23014603555202484130859375f, 0.22746665775775909423828125f, 0.1594356000423431396484375f, 0.16469442844390869140625f)));
[   1.525][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.12663333117961883544921875f, 0.0147300064563751220703125f, 0.037656970322132110595703125f, 0.157049119472503662109375f), float4(-0.106595434248447418212890625f, -0.0531751215457916259765625f, -0.08175991475582122802734375f, -0.08797109127044677734375f), float4(0.064620755612850189208984375f, -0.063414193689823150634765625f, 0.16493447124958038330078125f, 0.231023132801055908203125f), float4(0.06832541525363922119140625f, -0.08805869519710540771484375f, 0.1688591539859771728515625f, 0.036382257938385009765625f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.0353898219764232635498046875f, -0.11811836063861846923828125f, -0.0356563068926334381103515625f, -0.068055398762226104736328125f), float4(0.13389079272747039794921875f, 0.0658520758152008056640625f, 0.0233079828321933746337890625f, 0.067530803382396697998046875f), float4(0.096906833350658416748046875f, 0.18170924484729766845703125f, 0.098626919090747833251953125f, -0.209643781185150146484375f), float4(-0.086012713611125946044921875f, -0.20016764104366302490234375f, -0.01879598014056682586669921875f, -0.14629344642162322998046875f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.2718327343463897705078125f, 0.01352599821984767913818359375f, -0.14995874464511871337890625f, -0.23938845098018646240234375f), float4(-0.2621882259845733642578125f, -0.000987409730441868305206298828125f, -0.13385511934757232666015625f, -0.106642387807369232177734375f), float4(-0.048931993544101715087890625f, 0.039898522198200225830078125f, 0.047444753348827362060546875f, 0.109347216784954071044921875f), float4(0.109696291387081146240234375f, 0.12353980541229248046875f, 0.116928018629550933837890625f, 0.14172275364398956298828125f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.1656506061553955078125f, 0.01968300156295299530029296875f, 0.022104799747467041015625f, 0.1259675323963165283203125f), float4(0.2042064368724822998046875f, -0.07930122315883636474609375f, 0.0465382300317287445068359375f, 0.1149225533008575439453125f), float4(-0.0050175436772406101226806640625f, -0.0327169708907604217529296875f, 0.013389485888183116912841796875f, 0.03458361327648162841796875f), float4(-0.219660103321075439453125f, -0.16156630218029022216796875f, -0.013763387687504291534423828125f, -0.0560379363596439361572265625f)))) + float4(-0.02295626886188983917236328125f, 0.0296887867152690887451171875f, -0.07014806568622589111328125f, -0.071634761989116668701171875f);
[   1.526][d][vo/gpu/d3d11] [ 61] }
[   1.526][d][vo/gpu/d3d11] [ 62] 
[   1.526][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.526][d][vo/gpu/d3d11] [ 64] {
[   1.526][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.526][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.526][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.526][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.526][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.526][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.526][d][vo/gpu/d3d11] [ 71] }
[   1.526][d][vo/gpu] Resizing texture: 1920x800
[   1.528][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.529][v][vo/gpu/d3d11] Compiled a vertex shader in 4100us
[   1.529][v][vo/gpu/d3d11] shaderc: 2346us, SPIRV-Cross: 126us, D3DCompile: 1628us
[   1.530][d][vo/gpu/d3d11] GLSL source:
[   1.530][d][vo/gpu/d3d11] [  1] #version 450
[   1.530][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.530][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.530][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.530][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.530][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.530][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.530][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.530][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.530][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.530][d][vo/gpu/d3d11] [ 11] void main() {
[   1.530][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.530][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.530][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.530][d][vo/gpu/d3d11] [ 15] }
[   1.530][d][vo/gpu/d3d11] HLSL source:
[   1.530][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.530][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.530][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.530][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.530][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.530][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.530][d][vo/gpu/d3d11] [  7] 
[   1.530][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.530][d][vo/gpu/d3d11] [  9] {
[   1.530][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.530][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.530][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.530][d][vo/gpu/d3d11] [ 13] };
[   1.530][d][vo/gpu/d3d11] [ 14] 
[   1.530][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.530][d][vo/gpu/d3d11] [ 16] {
[   1.530][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.530][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.530][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.530][d][vo/gpu/d3d11] [ 20] };
[   1.530][d][vo/gpu/d3d11] [ 21] 
[   1.530][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.530][d][vo/gpu/d3d11] [ 23] {
[   1.530][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.530][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.530][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.530][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.530][d][vo/gpu/d3d11] [ 28] }
[   1.530][d][vo/gpu/d3d11] [ 29] 
[   1.530][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.530][d][vo/gpu/d3d11] [ 31] {
[   1.530][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.530][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.530][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.530][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.530][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.530][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.530][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.530][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.530][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.530][d][vo/gpu/d3d11] [ 41] }
[   1.554][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.603][v][vo/gpu/d3d11] Compiled a fragment shader in 73561us
[   1.603][v][vo/gpu/d3d11] shaderc: 24789us, SPIRV-Cross: 2642us, D3DCompile: 46130us
[   1.603][d][vo/gpu/d3d11] GLSL source:
[   1.603][d][vo/gpu/d3d11] [  1] #version 450
[   1.603][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.603][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.603][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.603][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.603][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.603][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.603][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.603][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.603][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.603][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.603][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.603][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.603][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.603][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.603][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.603][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.603][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.603][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.603][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.603][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.603][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.603][d][vo/gpu/d3d11] [ 23] };
[   1.603][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.603][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.603][d][vo/gpu/d3d11] [ 26] #define conv2d_1_tf_raw texture0
[   1.603][d][vo/gpu/d3d11] [ 27] #define conv2d_1_tf_pos texcoord0
[   1.603][d][vo/gpu/d3d11] [ 28] #define conv2d_1_tf_size texture_size0
[   1.603][d][vo/gpu/d3d11] [ 29] #define conv2d_1_tf_rot texture_rot0
[   1.603][d][vo/gpu/d3d11] [ 30] #define conv2d_1_tf_off texture_off0
[   1.603][d][vo/gpu/d3d11] [ 31] #define conv2d_1_tf_pt pixel_size0
[   1.603][d][vo/gpu/d3d11] [ 32] #define conv2d_1_tf_map texmap0
[   1.603][d][vo/gpu/d3d11] [ 33] #define conv2d_1_tf_mul 1.000000
[   1.603][d][vo/gpu/d3d11] [ 34] #define conv2d_1_tf_tex(pos) (conv2d_1_tf_mul * vec4(texture(conv2d_1_tf_raw, pos)).rgba)
[   1.603][d][vo/gpu/d3d11] [ 35] #define conv2d_1_tf_gather(pos, c) (conv2d_1_tf_mul * vec4(textureGather(conv2d_1_tf_raw, pos, c)))
[   1.603][d][vo/gpu/d3d11] [ 36] #define conv2d_1_tf_texOff(off) conv2d_1_tf_tex(conv2d_1_tf_pos + conv2d_1_tf_pt * vec2(off))
[   1.603][d][vo/gpu/d3d11] [ 37] #define conv2d_1_tf1_raw texture1
[   1.603][d][vo/gpu/d3d11] [ 38] #define conv2d_1_tf1_pos texcoord1
[   1.603][d][vo/gpu/d3d11] [ 39] #define conv2d_1_tf1_size texture_size1
[   1.603][d][vo/gpu/d3d11] [ 40] #define conv2d_1_tf1_rot texture_rot1
[   1.603][d][vo/gpu/d3d11] [ 41] #define conv2d_1_tf1_off texture_off1
[   1.603][d][vo/gpu/d3d11] [ 42] #define conv2d_1_tf1_pt pixel_size1
[   1.603][d][vo/gpu/d3d11] [ 43] #define conv2d_1_tf1_map texmap1
[   1.603][d][vo/gpu/d3d11] [ 44] #define conv2d_1_tf1_mul 1.000000
[   1.603][d][vo/gpu/d3d11] [ 45] #define conv2d_1_tf1_tex(pos) (conv2d_1_tf1_mul * vec4(texture(conv2d_1_tf1_raw, pos)).rgba)
[   1.603][d][vo/gpu/d3d11] [ 46] #define conv2d_1_tf1_gather(pos, c) (conv2d_1_tf1_mul * vec4(textureGather(conv2d_1_tf1_raw, pos, c)))
[   1.603][d][vo/gpu/d3d11] [ 47] #define conv2d_1_tf1_texOff(off) conv2d_1_tf1_tex(conv2d_1_tf1_pos + conv2d_1_tf1_pt * vec2(off))
[   1.603][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.603][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.603][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.603][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.603][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.603][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.15104648, 0.05522861, -0.0654341, -0.053517453, -0.08264124, -0.0062249107, -0.20364265, -0.05015117, -0.18837251, 0.030655831, 0.046844713, -0.20673253, -0.14042036, -0.05655449, 0.13994302, 0.011745607) * go_0(-1.0, -1.0);
[   1.603][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.16517559, 0.1489214, -0.09149559, 0.025003506, -0.124926426, 0.16974348, -0.020857265, 0.08017403, 0.21836148, 0.0025619378, 0.2331612, 0.085599184, -0.030934382, -0.055194855, 0.09527726, -0.10081552) * go_0(-1.0, 0.0);
[   1.603][d][vo/gpu/d3d11] [ 55]     result += mat4(0.041800212, 0.028859638, 0.09395546, 0.05211183, -0.038541477, 0.021495212, 0.04862346, -0.007864793, 0.038407274, -0.13841268, -0.14963801, 0.26470762, 0.16691841, -0.07262008, 0.034374326, -0.14709206) * go_0(-1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 56]     result += mat4(0.00094978884, -0.028974704, -0.0900548, -0.08401967, -0.08935931, -0.043606587, -0.14497143, -0.05226239, -0.21516493, 0.19410603, -0.089924194, -0.04335071, -0.012618276, -0.2671613, 0.020422975, -0.037739716) * go_0(0.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.13403237, -0.02524383, -0.03474901, 0.054432765, 0.11946775, 0.107336655, -0.1431715, -0.13370377, 0.015087512, -0.1917613, 0.073493585, 0.2788855, -0.010510839, 0.06891479, -0.06741307, -0.05271205) * go_0(0.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.15432046, 0.04021662, -0.16979513, 0.13660534, -0.10518303, -0.10095502, -0.13092068, 0.022805348, -0.16676381, -0.4273298, 0.020867536, 0.3506733, -0.29459694, -0.055828743, -0.069241956, 0.04106382) * go_0(0.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.08890133, 0.07549666, -0.040735144, -0.1506932, -0.22227979, -0.0762723, -0.17766447, -0.05741318, -0.21885683, 0.2379157, -0.15525854, -0.07306285, 0.15580738, -0.04394069, -0.19175608, 0.018283797) * go_0(1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.08503275, -0.105500385, -0.114987396, -0.07166016, -0.2147138, 0.09378708, 0.24550334, -0.0834075, -0.033147786, -0.022304727, -0.31062204, 0.027651973, 0.109098755, 0.18889032, 0.1163026, 0.13863255) * go_0(1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 61]     result += mat4(0.15266588, -0.14901319, 0.033916786, 0.09381096, -0.08196443, -0.16194504, 0.035789456, 0.21234898, -0.48724765, 0.2619442, -0.11215393, 0.25061038, 0.022344576, 0.0116525125, 0.111661114, -0.15242295) * go_0(1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 62]     result += mat4(0.020475458, 0.0797404, -0.13576819, 0.009681671, 0.030504882, 0.049232908, 0.022025917, 0.16912088, -0.23914136, -0.084663324, 0.020925451, -0.1023938, 0.035916872, -0.07538111, -0.11470242, 0.15238516) * go_1(-1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.12941381, 0.08509899, -0.029489802, -0.09148447, -0.089406274, -0.116145454, -0.08979843, 0.11908148, 0.15473351, -0.21687616, 0.12607013, -0.08244334, -0.079580925, -0.16613089, -0.09287793, -0.03412643) * go_1(-1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.023578499, 0.07394217, -0.13069086, -0.1060499, -0.07559958, -0.21839201, 0.1090753, 0.0787872, 0.07677037, -0.25998843, 0.20039314, 0.046882212, 0.31871012, -0.3048051, 0.15118991, -0.00518087) * go_1(-1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.15338503, -0.11057532, 0.075839415, -0.18592294, -0.0155324, 0.038140323, -0.10498194, 0.09070477, 0.05108992, -0.047939524, -0.091004305, 0.09649005, -0.10967152, -0.051909525, -0.05314551, 0.09661584) * go_1(0.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.14458802, -0.053263694, -0.0010885567, 0.23342133, 0.01918937, 0.12026143, -0.15691495, 0.30480555, -0.08725869, 0.19082253, 0.3594973, 0.016653897, 0.045152336, -0.088590585, 0.0069655925, 0.1392425) * go_1(0.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 67]     result += mat4(0.17944881, -0.17950764, 0.13282645, 0.030974053, 0.32233685, 0.18067117, -0.11472813, 0.097301506, -0.047649745, -0.1053861, -0.081039384, 0.035132434, 0.10204545, 0.085582554, -0.13153993, -0.021741152) * go_1(0.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.15573682, 0.16409989, -0.22574787, -0.03877603, -0.18285516, 0.11638645, 0.18321282, -0.017770218, 0.18230622, 0.16433364, -0.12795393, -0.03805153, 0.14386104, -0.0891527, -0.056928284, -0.10961495) * go_1(1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 69]     result += mat4(0.257622, 0.052519716, -0.25421762, -0.1887382, -0.083568096, -0.0064690276, -0.029110614, 0.103327505, -0.17006217, 0.2254096, -0.29366904, 0.04302887, -0.10198446, -0.24423616, 0.16781262, -0.005019004) * go_1(1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 70]     result += mat4(0.103393994, -0.059044626, -0.18192382, 0.0990813, -0.26143607, 0.11036474, 0.04788275, -0.096738026, 0.12825653, 0.13631694, -0.077904984, -0.020790676, -0.25118098, 0.122588515, -0.049440473, -0.10758222) * go_1(1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 71]     result += mat4(0.06693113, -0.13647175, 0.131139, 0.13143918, 0.081720434, 0.117537096, 0.15387627, -0.008771362, 0.08513583, 0.023794742, -0.0661625, 0.115793936, 0.0023350024, 0.02215075, -0.0494433, -0.013404977) * go_2(-1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 72]     result += mat4(0.041419264, -0.17622781, 0.028418267, 0.12114493, -0.23587078, 0.08457395, 0.014364018, -0.103271864, -0.051572207, -0.026424447, 0.16755055, -0.10763651, -0.033440586, 0.068594255, -0.050668504, 0.1941505) * go_2(-1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 73]     result += mat4(-0.2780181, 0.037816502, -0.11516711, -0.09822884, 0.13762361, -0.14317706, 0.14350282, 0.000623895, -0.08601606, 0.08118504, 0.15497385, -0.04721711, -0.008936935, -0.014223618, -0.09641698, -0.013884213) * go_2(-1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 74]     result += mat4(0.14349665, -0.03144472, -0.057813704, 0.0667044, 0.09026094, 0.051366236, 0.11139983, -0.015782114, -0.18314016, -0.18774192, 0.0014838242, 0.15759028, 0.062388215, 0.13626057, 0.02576217, -0.06317815) * go_2(0.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 75]     result += mat4(0.07151769, 0.14508991, 0.1736844, -0.11487795, -0.07999805, -0.07797908, 0.037923355, -0.059138823, -0.23531209, -0.040207293, -0.068355694, -0.024296658, -0.114820175, 0.19726487, 0.21772414, 0.03659222) * go_2(0.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 76]     result += mat4(0.16858695, -0.12135113, 0.009391182, -0.081519485, 0.13340487, 0.07007004, 0.094124354, 0.035519842, -0.3320139, -0.06624027, -0.14716229, -0.09205287, 0.12664132, -0.05655441, 0.0123263765, 0.04641279) * go_2(0.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 77]     result += mat4(0.19018422, -0.15428329, -0.009354114, 0.04165953, 0.11024837, -0.107493006, -0.05807292, -0.048029456, 0.24319384, -0.10542357, -0.013699952, 0.06228662, -0.06808749, -0.023227982, 0.16528323, -0.05610251) * go_2(1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.008616222, 0.077674195, -0.08638503, 0.09293109, 0.072474636, 0.05004233, -0.20591061, -0.005301386, -0.15486047, 0.15038474, 0.1262478, 0.021724822, 0.02274613, -0.3088281, -0.08437887, -0.10684698) * go_2(1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.16960032, 0.09365251, -0.030414175, -0.010766254, 0.18181023, 0.12130318, 0.08913089, -0.06070321, 0.05200306, 0.092584535, 0.17694671, 0.033796314, -0.038107123, -0.04335955, -0.049443472, 0.30465958) * go_2(1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 80]     result += mat4(0.07661484, -0.009945252, 0.12866217, -0.07592757, -0.21030053, 0.014371748, -0.072458774, -0.04700072, 0.15534303, 0.2007125, -0.15699059, -0.032897495, 0.08110436, -0.11243608, 0.008632577, -0.10153441) * go_3(-1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.034697928, 0.06928288, -0.2796273, 0.14405379, 0.12248569, 0.036539096, 0.06607706, 0.077684596, -0.16473202, 0.1665916, -0.29977503, 0.21047153, 0.13114224, -0.091579035, -0.045458574, 0.03254245) * go_3(-1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 82]     result += mat4(0.053284872, 0.053366095, -0.26152626, -0.03123967, -0.031794485, 0.17670582, -0.07450994, 0.017521491, -0.040290453, 0.38342363, -0.25021288, -0.014660264, 0.1621895, 0.25041878, -0.12124821, 0.068036206) * go_3(-1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 83]     result += mat4(0.11366693, -0.030863572, -0.07411263, 0.12475283, -0.046070684, -0.09033321, 0.013222701, 0.06798592, -0.32814804, 0.057653826, -0.14082801, -0.00217398, -0.22856179, -0.19058353, -0.20992154, -0.03701372) * go_3(0.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 84]     result += mat4(0.20345633, -0.1332355, 0.27152926, -0.13477845, -0.25242096, -0.28281286, 0.31289554, 0.14284514, 0.53362453, -0.46766588, 0.4518293, -0.39291728, -0.3573227, -0.014670052, 0.0051881406, 0.16552156) * go_3(0.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.15017267, -0.07792945, -0.204405, 0.13964304, -0.13642666, -0.10228306, 0.03238279, -0.08689329, -0.072262034, -0.0258388, 0.05689183, 0.055701543, -0.19800112, 0.012217054, -0.033292748, -0.047611095) * go_3(0.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.014704416, -0.12203891, 0.066083655, -0.1409769, 0.0041513643, -0.087383606, -0.17498164, 0.11327789, -0.25947225, -0.0016027623, 0.08202566, 0.042270098, 0.006429511, -0.26576808, -0.08461341, 0.049376782) * go_3(1.0, -1.0);
[   1.604][d][vo/gpu/d3d11] [ 87]     result += mat4(0.0695189, -0.14753938, 0.09578246, -0.16607563, -0.0105561055, 0.17166016, 0.027422488, -0.14175262, -0.009492696, -0.23449713, 0.018270867, 0.14635146, 0.33451268, 0.030959005, -0.46468422, 0.024256868) * go_3(1.0, 0.0);
[   1.604][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.16865666, -0.00015881563, -0.054488145, -0.06222717, -0.032101758, 0.06485387, -0.0028512608, 0.046645947, 0.017593225, -0.19447896, -0.024742266, 0.03970127, 0.29845607, -0.16168733, 0.035172883, 0.07924657) * go_3(1.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 89]     result += vec4(0.103826486, 0.045373913, 0.11565896, -0.06568643);
[   1.604][d][vo/gpu/d3d11] [ 90]     return result;
[   1.604][d][vo/gpu/d3d11] [ 91] }
[   1.604][d][vo/gpu/d3d11] [ 92] void main() {
[   1.604][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.604][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.604][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.604][d][vo/gpu/d3d11] [ 96] }
[   1.604][d][vo/gpu/d3d11] HLSL source:
[   1.604][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.604][d][vo/gpu/d3d11] [  2] {
[   1.604][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.604][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.604][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.604][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.604][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.604][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.604][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.604][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.604][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.604][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.604][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.604][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.604][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.604][d][vo/gpu/d3d11] [ 16] };
[   1.604][d][vo/gpu/d3d11] [ 17] 
[   1.604][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.604][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.604][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.604][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.604][d][vo/gpu/d3d11] [ 22] 
[   1.604][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.604][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.604][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.604][d][vo/gpu/d3d11] [ 26] 
[   1.604][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.604][d][vo/gpu/d3d11] [ 28] {
[   1.604][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.604][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.604][d][vo/gpu/d3d11] [ 31] };
[   1.604][d][vo/gpu/d3d11] [ 32] 
[   1.604][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.604][d][vo/gpu/d3d11] [ 34] {
[   1.604][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.604][d][vo/gpu/d3d11] [ 36] };
[   1.604][d][vo/gpu/d3d11] [ 37] 
[   1.604][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.604][d][vo/gpu/d3d11] [ 39] {
[   1.604][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.604][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.1510464847087860107421875f, 0.0552286095917224884033203125f, -0.06543409824371337890625f, -0.053517453372478485107421875f), float4(-0.082641236484050750732421875f, -0.006224910728633403778076171875f, -0.20364265143871307373046875f, -0.050151169300079345703125f), float4(-0.18837250769138336181640625f, 0.0306558310985565185546875f, 0.046844713389873504638671875f, -0.20673252642154693603515625f), float4(-0.14042036235332489013671875f, -0.056554488837718963623046875f, 0.13994301855564117431640625f, 0.011745606549084186553955078125f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.1651755869388580322265625f, 0.1489214003086090087890625f, -0.09149558842182159423828125f, 0.02500350587069988250732421875f), float4(-0.124926425516605377197265625f, 0.169743478298187255859375f, -0.02085726521909236907958984375f, 0.080174028873443603515625f), float4(0.21836148202419281005859375f, 0.00256193778477609157562255859375f, 0.23316119611263275146484375f, 0.0855991840362548828125f), float4(-0.0309343822300434112548828125f, -0.055194854736328125f, 0.095277257263660430908203125f, -0.10081551969051361083984375f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.0418002121150493621826171875f, 0.028859637677669525146484375f, 0.093955457210540771484375f, 0.0521118305623531341552734375f), float4(-0.0385414771735668182373046875f, 0.0214952118694782257080078125f, 0.0486234612762928009033203125f, -0.007864792831242084503173828125f), float4(0.038407273590564727783203125f, -0.1384126842021942138671875f, -0.14963801205158233642578125f, 0.264707624912261962890625f), float4(0.16691841185092926025390625f, -0.07262007892131805419921875f, 0.0343743264675140380859375f, -0.14709205925464630126953125f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.0009497888386249542236328125f, -0.028974704444408416748046875f, -0.090054802596569061279296875f, -0.084019668400287628173828125f), float4(-0.0893593132495880126953125f, -0.043606586754322052001953125f, -0.144971430301666259765625f, -0.052262388169765472412109375f), float4(-0.2151649296283721923828125f, 0.19410602748394012451171875f, -0.089924193918704986572265625f, -0.04335071146488189697265625f), float4(-0.012618276290595531463623046875f, -0.267161309719085693359375f, 0.02042297460138797760009765625f, -0.037739716470241546630859375f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.13403236865997314453125f, -0.0252438299357891082763671875f, -0.034749008715152740478515625f, 0.05443276464939117431640625f), float4(0.11946775019168853759765625f, 0.10733665525913238525390625f, -0.14317150413990020751953125f, -0.133703768253326416015625f), float4(0.015087512321770191192626953125f, -0.19176129996776580810546875f, 0.07349358499050140380859375f, 0.2788855135440826416015625f), float4(-0.010510838590562343597412109375f, 0.068914793431758880615234375f, -0.067413069307804107666015625f, -0.0527120493352413177490234375f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.15432046353816986083984375f, 0.0402166210114955902099609375f, -0.1697951257228851318359375f, 0.13660533726215362548828125f), float4(-0.105183027684688568115234375f, -0.100955016911029815673828125f, -0.1309206783771514892578125f, 0.02280534803867340087890625f), float4(-0.1667638123035430908203125f, -0.4273298084735870361328125f, 0.02086753584444522857666015625f, 0.3506732881069183349609375f), float4(-0.2945969402790069580078125f, -0.055828742682933807373046875f, -0.06924195587635040283203125f, 0.0410638190805912017822265625f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.088901333510875701904296875f, 0.07549665868282318115234375f, -0.0407351441681385040283203125f, -0.15069319307804107666015625f), float4(-0.2222797870635986328125f, -0.076272301375865936279296875f, -0.17766447365283966064453125f, -0.0574131794273853302001953125f), float4(-0.21885682642459869384765625f, 0.237915694713592529296875f, -0.15525853633880615234375f, -0.07306285202503204345703125f), float4(0.15580737590789794921875f, -0.0439406894147396087646484375f, -0.19175608456134796142578125f, 0.01828379742801189422607421875f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.085032753646373748779296875f, -0.10550038516521453857421875f, -0.114987395703792572021484375f, -0.07166016101837158203125f), float4(-0.21471379697322845458984375f, 0.093787081539630889892578125f, 0.2455033361911773681640625f, -0.083407498896121978759765625f), float4(-0.0331477858126163482666015625f, -0.02230472676455974578857421875f, -0.310622036457061767578125f, 0.027651973068714141845703125f), float4(0.109098754823207855224609375f, 0.18889032304286956787109375f, 0.116302601993083953857421875f, 0.13863255083560943603515625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.1526658833026885986328125f, -0.1490131914615631103515625f, 0.03391678631305694580078125f, 0.09381096065044403076171875f), float4(-0.081964433193206787109375f, -0.161945044994354248046875f, 0.0357894562184810638427734375f, 0.21234898269176483154296875f), float4(-0.487247645854949951171875f, 0.2619442045688629150390625f, -0.11215393245220184326171875f, 0.2506103813648223876953125f), float4(0.02234457619488239288330078125f, 0.01165251247584819793701171875f, 0.111661113798618316650390625f, -0.15242294967174530029296875f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.0204754583537578582763671875f, 0.079740397632122039794921875f, -0.13576819002628326416015625f, 0.009681670926511287689208984375f), float4(0.030504882335662841796875f, 0.049232907593250274658203125f, 0.0220259167253971099853515625f, 0.1691208779811859130859375f), float4(-0.23914135992527008056640625f, -0.084663324058055877685546875f, 0.0209254510700702667236328125f, -0.102393798530101776123046875f), float4(0.035916872322559356689453125f, -0.075381107628345489501953125f, -0.11470241844654083251953125f, 0.15238516032695770263671875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.1294138133525848388671875f, 0.085098989307880401611328125f, -0.02948980219662189483642578125f, -0.09148447215557098388671875f), float4(-0.089406274259090423583984375f, -0.116145454347133636474609375f, -0.089798428118228912353515625f, 0.11908148229122161865234375f), float4(0.1547335088253021240234375f, -0.21687616407871246337890625f, 0.12607012689113616943359375f, -0.08244334161281585693359375f), float4(-0.079580925405025482177734375f, -0.16613088548183441162109375f, -0.092877931892871856689453125f, -0.0341264307498931884765625f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.0235784985125064849853515625f, 0.07394216954708099365234375f, -0.13069085776805877685546875f, -0.106049902737140655517578125f), float4(-0.0755995810031890869140625f, -0.21839201450347900390625f, 0.109075300395488739013671875f, 0.078787200152873992919921875f), float4(0.076770372688770294189453125f, -0.25998842716217041015625f, 0.200393140316009521484375f, 0.046882212162017822265625f), float4(0.3187101185321807861328125f, -0.304805099964141845703125f, 0.15118990838527679443359375f, -0.005180870182812213897705078125f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.15338502824306488037109375f, -0.11057531833648681640625f, 0.07583941519260406494140625f, -0.18592293560504913330078125f), float4(-0.0155324004590511322021484375f, 0.0381403230130672454833984375f, -0.104981936514377593994140625f, 0.0907047688961029052734375f), float4(0.051089920103549957275390625f, -0.04793952405452728271484375f, -0.091004304587841033935546875f, 0.096490047872066497802734375f), float4(-0.10967151820659637451171875f, -0.0519095249474048614501953125f, -0.0531455092132091522216796875f, 0.096615843474864959716796875f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.1445880234241485595703125f, -0.0532636940479278564453125f, -0.001088556717149913311004638671875f, 0.23342132568359375f), float4(0.01918937079608440399169921875f, 0.1202614307403564453125f, -0.1569149494171142578125f, 0.3048055469989776611328125f), float4(-0.087258689105510711669921875f, 0.19082252681255340576171875f, 0.3594973087310791015625f, 0.01665389724075794219970703125f), float4(0.0451523363590240478515625f, -0.088590584695339202880859375f, 0.00696559250354766845703125f, 0.1392425000667572021484375f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(0.1794488131999969482421875f, -0.1795076429843902587890625f, 0.13282644748687744140625f, 0.030974052846431732177734375f), float4(0.322336852550506591796875f, 0.18067117035388946533203125f, -0.114728130400180816650390625f, 0.097301505506038665771484375f), float4(-0.0476497448980808258056640625f, -0.105386100709438323974609375f, -0.08103938400745391845703125f, 0.0351324342191219329833984375f), float4(0.1020454466342926025390625f, 0.085582554340362548828125f, -0.13153992593288421630859375f, -0.0217411518096923828125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.15573681890964508056640625f, 0.16409988701343536376953125f, -0.22574786841869354248046875f, -0.0387760289013385772705078125f), float4(-0.1828551590442657470703125f, 0.116386450827121734619140625f, 0.183212816715240478515625f, -0.01777021773159503936767578125f), float4(0.18230621516704559326171875f, 0.164333641529083251953125f, -0.12795393168926239013671875f, -0.03805153071880340576171875f), float4(0.14386104047298431396484375f, -0.089152701199054718017578125f, -0.056928284466266632080078125f, -0.10961495339870452880859375f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.2576220035552978515625f, 0.052519716322422027587890625f, -0.254217624664306640625f, -0.1887381970882415771484375f), float4(-0.083568096160888671875f, -0.0064690276049077510833740234375f, -0.0291106142103672027587890625f, 0.103327505290508270263671875f), float4(-0.17006216943264007568359375f, 0.2254095971584320068359375f, -0.293669044971466064453125f, 0.043028868734836578369140625f), float4(-0.101984463632106781005859375f, -0.24423615634441375732421875f, 0.1678126156330108642578125f, -0.0050190039910376071929931640625f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.103393994271755218505859375f, -0.0590446256101131439208984375f, -0.18192382156848907470703125f, 0.099081300199031829833984375f), float4(-0.2614360749721527099609375f, 0.110364742577075958251953125f, 0.04788275063037872314453125f, -0.09673802554607391357421875f), float4(0.1282565295696258544921875f, 0.13631694018840789794921875f, -0.07790498435497283935546875f, -0.02079067565500736236572265625f), float4(-0.2511809766292572021484375f, 0.12258851528167724609375f, -0.0494404733180999755859375f, -0.107582218945026397705078125f)));
[   1.604][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.06693112850189208984375f, -0.13647174835205078125f, 0.13113899528980255126953125f, 0.1314391791820526123046875f), float4(0.081720434129238128662109375f, 0.11753709614276885986328125f, 0.1538762748241424560546875f, -0.00877136178314685821533203125f), float4(0.08513583242893218994140625f, 0.02379474230110645294189453125f, -0.0661624968051910400390625f, 0.115793935954570770263671875f), float4(0.00233500241301953792572021484375f, 0.02215074934065341949462890625f, -0.0494433008134365081787109375f, -0.0134049765765666961669921875f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.0414192639291286468505859375f, -0.1762278079986572265625f, 0.02841826714575290679931640625f, 0.121144928038120269775390625f), float4(-0.235870778560638427734375f, 0.084573946893215179443359375f, 0.014364018104970455169677734375f, -0.103271864354610443115234375f), float4(-0.0515722073614597320556640625f, -0.02642444707453250885009765625f, 0.16755054891109466552734375f, -0.107636511325836181640625f), float4(-0.0334405861794948577880859375f, 0.068594254553318023681640625f, -0.0506685040891170501708984375f, 0.194150507450103759765625f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(-0.2780180871486663818359375f, 0.037816502153873443603515625f, -0.1151671111583709716796875f, -0.0982288420200347900390625f), float4(0.137623608112335205078125f, -0.1431770622730255126953125f, 0.14350281655788421630859375f, 0.000623894971795380115509033203125f), float4(-0.08601605892181396484375f, 0.081185042858123779296875f, 0.15497384965419769287109375f, -0.047217108309268951416015625f), float4(-0.008936935104429721832275390625f, -0.01422361843287944793701171875f, -0.0964169800281524658203125f, -0.0138842128217220306396484375f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.14349664747714996337890625f, -0.031444720923900604248046875f, -0.057813704013824462890625f, 0.066704399883747100830078125f), float4(0.09026093780994415283203125f, 0.0513662360608577728271484375f, 0.111399829387664794921875f, -0.0157821141183376312255859375f), float4(-0.18314015865325927734375f, -0.18774192035198211669921875f, 0.001483824220485985279083251953125f, 0.15759028494358062744140625f), float4(0.0623882152140140533447265625f, 0.136260569095611572265625f, 0.0257621705532073974609375f, -0.0631781518459320068359375f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.07151769101619720458984375f, 0.14508990943431854248046875f, 0.17368440330028533935546875f, -0.114877946674823760986328125f), float4(-0.079998053610324859619140625f, -0.077979080379009246826171875f, 0.0379233546555042266845703125f, -0.0591388233006000518798828125f), float4(-0.23531208932399749755859375f, -0.0402072928845882415771484375f, -0.06835569441318511962890625f, -0.02429665811359882354736328125f), float4(-0.114820174872875213623046875f, 0.19726486504077911376953125f, 0.217724144458770751953125f, 0.0365922190248966217041015625f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.16858695447444915771484375f, -0.121351130306720733642578125f, 0.009391182102262973785400390625f, -0.08151948451995849609375f), float4(0.13340486586093902587890625f, 0.07007004320621490478515625f, 0.094124354422092437744140625f, 0.0355198420584201812744140625f), float4(-0.332013905048370361328125f, -0.066240273416042327880859375f, -0.1471622884273529052734375f, -0.092052869498729705810546875f), float4(0.12664131820201873779296875f, -0.0565544106066226959228515625f, 0.01232637651264667510986328125f, 0.046412788331508636474609375f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.19018422067165374755859375f, -0.1542832851409912109375f, -0.009354113601148128509521484375f, 0.0416595302522182464599609375f), float4(0.11024837195873260498046875f, -0.107493005692958831787109375f, -0.0580729208886623382568359375f, -0.0480294562876224517822265625f), float4(0.2431938350200653076171875f, -0.10542356967926025390625f, -0.013699951581656932830810546875f, 0.0622866190969944000244140625f), float4(-0.0680874884128570556640625f, -0.023227982223033905029296875f, 0.1652832329273223876953125f, -0.0561025105416774749755859375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.00861622206866741180419921875f, 0.07767419517040252685546875f, -0.08638502657413482666015625f, 0.092931091785430908203125f), float4(0.072474636137485504150390625f, 0.050042331218719482421875f, -0.20591060817241668701171875f, -0.0053013861179351806640625f), float4(-0.1548604667186737060546875f, 0.15038473904132843017578125f, 0.1262477934360504150390625f, 0.02172482199966907501220703125f), float4(0.02274613082408905029296875f, -0.3088280856609344482421875f, -0.0843788683414459228515625f, -0.106846980750560760498046875f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.16960032284259796142578125f, 0.093652509152889251708984375f, -0.0304141752421855926513671875f, -0.010766253806650638580322265625f), float4(0.1818102300167083740234375f, 0.121303178369998931884765625f, 0.08913089334964752197265625f, -0.060703210532665252685546875f), float4(0.0520030595362186431884765625f, 0.09258453547954559326171875f, 0.17694671452045440673828125f, 0.0337963141500949859619140625f), float4(-0.0381071232259273529052734375f, -0.0433595515787601470947265625f, -0.0494434721767902374267578125f, 0.3046595752239227294921875f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(0.07661484181880950927734375f, -0.009945251978933811187744140625f, 0.128662168979644775390625f, -0.07592757046222686767578125f), float4(-0.2103005349636077880859375f, 0.014371748082339763641357421875f, -0.0724587738513946533203125f, -0.04700072109699249267578125f), float4(0.1553430259227752685546875f, 0.200712502002716064453125f, -0.156990587711334228515625f, -0.032897494733333587646484375f), float4(0.081104360520839691162109375f, -0.112436078488826751708984375f, 0.008632577024400234222412109375f, -0.10153441131114959716796875f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.034697927534580230712890625f, 0.069282881915569305419921875f, -0.2796272933483123779296875f, 0.1440537869930267333984375f), float4(0.122485689818859100341796875f, 0.0365390963852405548095703125f, 0.066077060997486114501953125f, 0.07768459618091583251953125f), float4(-0.16473202407360076904296875f, 0.16659159958362579345703125f, -0.2997750341892242431640625f, 0.21047152578830718994140625f), float4(0.13114224374294281005859375f, -0.09157903492450714111328125f, -0.0454585738480091094970703125f, 0.0325424484908580780029296875f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.0532848723232746124267578125f, 0.0533660948276519775390625f, -0.2615262567996978759765625f, -0.0312396697700023651123046875f), float4(-0.0317944847047328948974609375f, 0.17670582234859466552734375f, -0.074509941041469573974609375f, 0.01752149127423763275146484375f), float4(-0.040290452539920806884765625f, 0.383423626422882080078125f, -0.2502128779888153076171875f, -0.014660264365375041961669921875f), float4(0.16218949854373931884765625f, 0.25041878223419189453125f, -0.121248207986354827880859375f, 0.068036206066608428955078125f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.113666929304599761962890625f, -0.0308635719120502471923828125f, -0.074112631380558013916015625f, 0.124752826988697052001953125f), float4(-0.0460706837475299835205078125f, -0.09033320844173431396484375f, 0.013222700916230678558349609375f, 0.0679859220981597900390625f), float4(-0.3281480371952056884765625f, 0.0576538257300853729248046875f, -0.14082801342010498046875f, -0.00217397999949753284454345703125f), float4(-0.2285617887973785400390625f, -0.190583527088165283203125f, -0.209921538829803466796875f, -0.0370137207210063934326171875f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.20345632731914520263671875f, -0.13323549926280975341796875f, 0.271529257297515869140625f, -0.13477845489978790283203125f), float4(-0.252420961856842041015625f, -0.2828128635883331298828125f, 0.3128955364227294921875f, 0.14284513890743255615234375f), float4(0.53362452983856201171875f, -0.4676658809185028076171875f, 0.45182931423187255859375f, -0.39291727542877197265625f), float4(-0.35732269287109375f, -0.014670051634311676025390625f, 0.0051881405524909496307373046875f, 0.165521562099456787109375f)));
[   1.604][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.15017266571521759033203125f, -0.07792945206165313720703125f, -0.20440499484539031982421875f, 0.1396430432796478271484375f), float4(-0.1364266574382781982421875f, -0.102283060550689697265625f, 0.0323827899992465972900390625f, -0.0868932902812957763671875f), float4(-0.07226203382015228271484375f, -0.025838799774646759033203125f, 0.0568918287754058837890625f, 0.0557015426456928253173828125f), float4(-0.1980011165142059326171875f, 0.01221705414354801177978515625f, -0.033292748034000396728515625f, -0.047611095011234283447265625f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.01470441557466983795166015625f, -0.122038908302783966064453125f, 0.06608365476131439208984375f, -0.14097690582275390625f), float4(0.0041513643227517604827880859375f, -0.087383605539798736572265625f, -0.17498163878917694091796875f, 0.113277889788150787353515625f), float4(-0.25947225093841552734375f, -0.001602762262336909770965576171875f, 0.08202566206455230712890625f, 0.0422700978815555572509765625f), float4(0.006429511122405529022216796875f, -0.2657680809497833251953125f, -0.0846134126186370849609375f, 0.0493767820298671722412109375f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.069518901407718658447265625f, -0.1475393772125244140625f, 0.095782458782196044921875f, -0.16607563197612762451171875f), float4(-0.0105561055243015289306640625f, 0.1716601550579071044921875f, 0.027422487735748291015625f, -0.14175261557102203369140625f), float4(-0.009492696262896060943603515625f, -0.234497129917144775390625f, 0.01827086694538593292236328125f, 0.14635145664215087890625f), float4(0.3345126807689666748046875f, 0.03095900453627109527587890625f, -0.4646842181682586669921875f, 0.02425686828792095184326171875f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.16865666210651397705078125f, -0.00015881563012953847646713256835938f, -0.054488144814968109130859375f, -0.0622271709144115447998046875f), float4(-0.032101757824420928955078125f, 0.064853869378566741943359375f, -0.00285126082599163055419921875f, 0.046645946800708770751953125f), float4(0.01759322546422481536865234375f, -0.1944789588451385498046875f, -0.02474226616322994232177734375f, 0.0397012718021869659423828125f), float4(0.29845607280731201171875f, -0.16168732941150665283203125f, 0.0351728834211826324462890625f, 0.079246573150157928466796875f)))) + float4(0.103826485574245452880859375f, 0.0453739129006862640380859375f, 0.115658961236476898193359375f, -0.065686427056789398193359375f);
[   1.605][d][vo/gpu/d3d11] [ 61] }
[   1.605][d][vo/gpu/d3d11] [ 62] 
[   1.605][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.605][d][vo/gpu/d3d11] [ 64] {
[   1.605][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.605][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.605][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.605][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.605][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.605][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.605][d][vo/gpu/d3d11] [ 71] }
[   1.605][d][vo/gpu] Resizing texture: 1920x800
[   1.607][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.609][v][vo/gpu/d3d11] Compiled a vertex shader in 4855us
[   1.609][v][vo/gpu/d3d11] shaderc: 2658us, SPIRV-Cross: 122us, D3DCompile: 2075us
[   1.609][d][vo/gpu/d3d11] GLSL source:
[   1.609][d][vo/gpu/d3d11] [  1] #version 450
[   1.609][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.609][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.609][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.609][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.609][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.609][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.609][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.609][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.609][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.609][d][vo/gpu/d3d11] [ 11] void main() {
[   1.609][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.609][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.609][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.609][d][vo/gpu/d3d11] [ 15] }
[   1.609][d][vo/gpu/d3d11] HLSL source:
[   1.609][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.609][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.609][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.609][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.609][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.609][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.609][d][vo/gpu/d3d11] [  7] 
[   1.609][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.609][d][vo/gpu/d3d11] [  9] {
[   1.609][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.609][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.609][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.609][d][vo/gpu/d3d11] [ 13] };
[   1.609][d][vo/gpu/d3d11] [ 14] 
[   1.609][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.609][d][vo/gpu/d3d11] [ 16] {
[   1.609][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.609][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.609][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.609][d][vo/gpu/d3d11] [ 20] };
[   1.610][d][vo/gpu/d3d11] [ 21] 
[   1.610][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.610][d][vo/gpu/d3d11] [ 23] {
[   1.610][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.610][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.610][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.610][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.610][d][vo/gpu/d3d11] [ 28] }
[   1.610][d][vo/gpu/d3d11] [ 29] 
[   1.610][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.610][d][vo/gpu/d3d11] [ 31] {
[   1.610][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.610][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.610][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.610][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.610][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.610][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.610][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.610][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.610][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.610][d][vo/gpu/d3d11] [ 41] }
[   1.635][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.683][v][vo/gpu/d3d11] Compiled a fragment shader in 73837us
[   1.683][v][vo/gpu/d3d11] shaderc: 25872us, SPIRV-Cross: 2468us, D3DCompile: 45497us
[   1.683][d][vo/gpu/d3d11] GLSL source:
[   1.683][d][vo/gpu/d3d11] [  1] #version 450
[   1.683][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.683][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.683][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.683][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.683][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.683][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.683][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.683][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.683][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.683][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.683][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.683][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.683][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.683][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.683][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.683][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.683][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.683][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.683][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.683][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.683][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.683][d][vo/gpu/d3d11] [ 23] };
[   1.683][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.683][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.683][d][vo/gpu/d3d11] [ 26] #define conv2d_2_tf_raw texture0
[   1.683][d][vo/gpu/d3d11] [ 27] #define conv2d_2_tf_pos texcoord0
[   1.683][d][vo/gpu/d3d11] [ 28] #define conv2d_2_tf_size texture_size0
[   1.683][d][vo/gpu/d3d11] [ 29] #define conv2d_2_tf_rot texture_rot0
[   1.683][d][vo/gpu/d3d11] [ 30] #define conv2d_2_tf_off texture_off0
[   1.683][d][vo/gpu/d3d11] [ 31] #define conv2d_2_tf_pt pixel_size0
[   1.683][d][vo/gpu/d3d11] [ 32] #define conv2d_2_tf_map texmap0
[   1.683][d][vo/gpu/d3d11] [ 33] #define conv2d_2_tf_mul 1.000000
[   1.683][d][vo/gpu/d3d11] [ 34] #define conv2d_2_tf_tex(pos) (conv2d_2_tf_mul * vec4(texture(conv2d_2_tf_raw, pos)).rgba)
[   1.683][d][vo/gpu/d3d11] [ 35] #define conv2d_2_tf_gather(pos, c) (conv2d_2_tf_mul * vec4(textureGather(conv2d_2_tf_raw, pos, c)))
[   1.683][d][vo/gpu/d3d11] [ 36] #define conv2d_2_tf_texOff(off) conv2d_2_tf_tex(conv2d_2_tf_pos + conv2d_2_tf_pt * vec2(off))
[   1.683][d][vo/gpu/d3d11] [ 37] #define conv2d_2_tf1_raw texture1
[   1.683][d][vo/gpu/d3d11] [ 38] #define conv2d_2_tf1_pos texcoord1
[   1.683][d][vo/gpu/d3d11] [ 39] #define conv2d_2_tf1_size texture_size1
[   1.683][d][vo/gpu/d3d11] [ 40] #define conv2d_2_tf1_rot texture_rot1
[   1.683][d][vo/gpu/d3d11] [ 41] #define conv2d_2_tf1_off texture_off1
[   1.683][d][vo/gpu/d3d11] [ 42] #define conv2d_2_tf1_pt pixel_size1
[   1.683][d][vo/gpu/d3d11] [ 43] #define conv2d_2_tf1_map texmap1
[   1.683][d][vo/gpu/d3d11] [ 44] #define conv2d_2_tf1_mul 1.000000
[   1.684][d][vo/gpu/d3d11] [ 45] #define conv2d_2_tf1_tex(pos) (conv2d_2_tf1_mul * vec4(texture(conv2d_2_tf1_raw, pos)).rgba)
[   1.684][d][vo/gpu/d3d11] [ 46] #define conv2d_2_tf1_gather(pos, c) (conv2d_2_tf1_mul * vec4(textureGather(conv2d_2_tf1_raw, pos, c)))
[   1.684][d][vo/gpu/d3d11] [ 47] #define conv2d_2_tf1_texOff(off) conv2d_2_tf1_tex(conv2d_2_tf1_pos + conv2d_2_tf1_pt * vec2(off))
[   1.684][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.684][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.684][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.684][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.684][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.684][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.1851775, 0.053705044, 0.033816848, -0.018555025, -0.21204336, -0.01706974, 0.088259794, -0.13126148, 0.10729598, -0.043457437, 0.08634712, 0.09220895, 0.062131613, -0.01995871, 0.05181067, 0.18520063) * go_0(-1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 54]     result += mat4(0.1662002, -0.14197104, -0.052809287, 0.025287712, -0.08330898, -0.08998097, -0.15642618, -0.14941245, -0.03481203, 0.061857622, 0.26051775, -0.0005498248, 0.086427025, 0.024108192, -0.12418039, 0.022286376) * go_0(-1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 55]     result += mat4(0.058200672, -0.3073398, 0.17150162, -0.13394679, -0.075118184, -0.14607768, -0.006172172, 0.007731589, -0.21818224, -0.06449433, -0.038958784, 0.037722416, 0.28699976, -0.027563032, 0.23295315, 0.028444216) * go_0(-1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 56]     result += mat4(0.12871371, 0.0064904913, 0.14985761, -0.10923005, 0.17413563, 0.1599109, -0.08457703, 0.108153716, -0.08871187, -0.06661137, 0.2754416, -0.009667768, 0.39819396, 0.12392097, 0.14145902, 0.0019376524) * go_0(0.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 57]     result += mat4(0.13893189, 0.12715353, 0.015191678, -0.21003054, -0.030412354, -0.01676613, -0.19799289, -0.006130075, 0.37676954, -0.14475077, -0.2065198, -0.30432892, -0.14944535, -0.09121536, -0.107600585, -0.24462196) * go_0(0.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.11653076, -0.0068671284, -0.02249137, -0.17877012, -0.15063138, -0.13514869, 0.107643366, -0.03196477, -0.086422764, 0.3079287, 0.17584166, -0.032449376, -0.06917114, -0.2682637, -0.18978168, -0.037039287) * go_0(0.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 59]     result += mat4(0.12014731, -0.030360512, -0.12954475, -0.110275604, -0.077214256, 0.019689744, 0.22149551, -0.002266716, 0.09697784, -0.124532826, -0.16776511, -0.034212478, -0.36935154, 0.016926935, 0.1363609, 0.20415346) * go_0(1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.11199535, -0.001692563, -0.09058429, -0.08437503, 0.092625685, 0.06046257, 0.25509837, -0.011657033, -0.17949764, -0.10718947, -0.1180669, -0.24681842, -0.1747311, 0.0014518246, -0.042863015, 0.06103357) * go_0(1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 61]     result += mat4(0.14979295, -0.037154514, 0.01957725, 0.012282435, 0.09168596, -0.05552286, 0.111671515, 0.0078630615, -0.10319766, -0.06416261, -0.23097566, -0.13931875, 0.2110811, 0.013095802, -0.2306504, -0.025639111) * go_0(1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.10091975, -0.10095426, -0.023449723, -0.022170888, 0.054953706, -0.13049407, 0.08289061, 0.023241632, 0.08735388, -0.0058387457, 0.17897247, 0.011434436, 0.008181139, -0.0034718404, -0.015372735, -0.07657766) * go_1(-1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.023442164, 0.07535702, 0.024391165, -0.050532013, 0.044168636, 0.0062343236, -0.019756999, -0.009695123, 0.10102337, 0.0052776975, -0.14944167, -0.060957722, 0.24367364, -0.08069369, 0.12170072, -0.047048368) * go_1(-1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.18376935, -0.08407229, -0.12943378, 0.0738419, -0.12404976, -0.13367929, 0.11265896, -0.021353, 0.003783386, 0.50088304, 0.14058582, 0.041053623, 0.038247623, -0.014179976, 0.007905778, -0.042492237) * go_1(-1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.046272535, 0.052449115, 0.17190954, -0.004745371, -0.045572635, -0.09292636, 0.36309823, 0.16673928, -0.099154025, -0.109614775, 0.17803112, 0.19907133, -0.14306267, 0.06898593, 0.11493454, 0.06795014) * go_1(0.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 66]     result += mat4(0.26181114, -0.044014625, -0.21605036, -0.08646438, 0.21038742, -0.084986, 0.0504626, 0.17514943, -0.25218952, -0.18691514, 0.057650108, 0.08653614, -0.101205684, 0.03176334, 0.18569492, 0.17973189) * go_1(0.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.0339215, 0.20112811, -0.12986277, 0.028961731, -0.056813832, 0.04451147, -0.07827432, -0.0860976, 0.096853435, 0.3483546, -0.35758162, -0.11749375, -0.035918653, 0.06140711, -0.08520154, 0.02418808) * go_1(0.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.09643022, -0.10491069, 0.0068604187, 0.023679713, 0.096521445, -0.29323488, 0.33353668, 0.112864286, -0.1172182, -0.07233183, 0.06607239, 0.08589609, 0.055790007, 0.14396138, -0.14191268, 0.00034840964) * go_1(1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 69]     result += mat4(0.15357164, -0.038462736, 0.08143956, 0.1744909, 0.40503287, -0.114508316, 0.003937322, 0.2536635, -0.042445306, -0.15622465, 0.09155284, 0.010992155, -0.20646071, 0.022801135, 0.08894491, 0.069300614) * go_1(1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.12663515, 0.023849454, -0.053604446, 0.12082873, -0.247968, -0.020969635, -0.03831894, -0.014617553, 0.22630337, 0.037801865, 0.052950703, 0.04285706, -0.14487264, 0.20786528, -0.08719664, 0.1752347) * go_1(1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.073527604, -0.050752833, 0.051830504, 0.32868716, 0.17474994, 0.016937364, -0.08792601, -0.024481766, -0.022229593, 0.030706186, 0.09213566, -0.076506205, 0.073404044, 0.10368055, -0.175889, -0.08453031) * go_2(-1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 72]     result += mat4(-0.06838216, 0.007698341, 0.063972116, -0.015604406, 0.16135305, 0.18044342, 0.024137018, -0.23326185, 0.13235588, -0.009096587, -0.058368143, -0.077040404, 0.0011419816, -0.09246194, 0.061036937, 0.049564146) * go_2(-1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 73]     result += mat4(0.023225296, -0.00060856267, -0.07775185, 0.016958566, -0.2641349, -0.08263046, -0.15350416, -0.30203494, 0.113956556, -0.010813236, -0.017738314, -0.13689043, -0.10318342, 0.025793184, -0.010336172, 0.09733422) * go_2(-1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.04462596, 0.052866418, -0.34754288, 0.05540498, -0.24492586, -0.32016864, 0.18145293, 0.24873725, 0.32388234, -0.034801524, -0.1347588, -0.07565546, 0.015183539, 0.05059595, 0.08090056, 0.05930932) * go_2(0.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 75]     result += mat4(0.045346696, -0.052527856, 0.052270077, 0.13417454, 0.05200045, 0.028119288, 0.005115497, 0.22952151, -0.2158375, 0.12241308, 0.3507457, 0.08616576, 0.07592416, 0.28470486, 0.3432788, 0.24857087) * go_2(0.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 76]     result += mat4(0.21311626, 0.052607164, 0.1248861, 0.20193806, 0.045226507, 0.14512901, -0.15103437, -0.17926466, 0.11657411, -0.32711068, -0.16332194, -0.07793982, -0.21802668, 0.5183869, -0.13567342, 0.07823041) * go_2(0.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 77]     result += mat4(0.00796368, 0.048073012, -0.14537893, -0.021708772, 0.036246423, 0.1062395, 0.12605369, 0.007073524, -0.1572743, 0.07439501, 0.089162275, -0.0039608316, 0.332032, -0.05461242, -0.17615359, -0.10240517) * go_2(1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 78]     result += mat4(0.20636982, -0.0024615112, -0.10625786, 0.024270926, 0.061810836, -0.13585201, -0.16581286, 0.23549418, 0.01928842, 0.07404979, -0.054449487, 0.04096373, 0.046939734, 0.003980803, 0.02111498, 0.064925276) * go_2(1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 79]     result += mat4(0.10485388, 0.06850885, -0.11292169, 0.16991565, -0.15282536, 0.124175504, -0.050431166, -0.06689582, -0.00059811946, 0.033696912, 0.11055047, 0.033060126, -0.17472714, 0.0048819613, -0.04478706, -0.1344572) * go_2(1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.20473132, 0.056477875, 0.059559986, 0.115130566, -0.058425788, -0.035971727, 0.08334707, -0.096510135, -0.23206294, 0.10635798, -0.21575621, -0.07063254, 0.03877511, -0.107549034, 0.22248401, 0.21702304) * go_3(-1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.02557767, 0.09886609, -0.100499466, 0.16687396, -0.084830604, 0.03150401, -0.049512494, 0.05595696, -0.13193256, -0.08585273, 0.14247662, 0.12290477, -0.07168309, 0.14531752, -0.048359327, 0.27716598) * go_3(-1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 82]     result += mat4(0.13297586, 0.20674329, 0.14469388, 0.08981846, -0.004231366, -0.02819193, 0.15470329, 0.17299837, 0.113062344, -0.22716297, -0.21754944, -0.00083956274, -0.14160508, 0.1808253, 0.11268379, 0.27335623) * go_3(-1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 83]     result += mat4(0.07497518, -0.06799594, -0.018158078, -0.00038999433, -0.15169668, -0.06928238, -0.33672288, -0.105485775, 0.33106267, 0.06698315, 0.019718744, -0.06810211, -0.35186404, -0.29145968, -0.056863394, 0.21498048) * go_3(0.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.013215512, -0.24763754, 0.20965266, 0.1068435, -0.13234195, 0.053566497, 0.05061848, -0.28645232, 0.15518288, 0.23247199, 0.017553907, -0.25181335, -0.048030723, -0.06663929, -0.111026704, -0.12663394) * go_3(0.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.010501938, -0.17995767, 0.06010859, 0.050185587, 0.108627126, -0.101203434, 0.07558728, 0.060466755, -0.106942676, -0.35854608, 0.16015992, 0.16823332, -0.06543775, -0.37310675, 0.014043972, -0.18328045) * go_3(0.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 86]     result += mat4(0.09712849, 0.013983463, 0.07291423, 0.031715546, 0.030862397, 0.045510456, -0.22066842, 0.063464865, 0.11721659, -0.10596602, -0.20611264, 0.052158818, -0.3961766, -0.03781582, 0.17633812, 0.1316111) * go_3(1.0, -1.0);
[   1.684][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.25029674, 0.07153423, -0.35125682, -0.18255402, -0.19569087, 0.00432772, -0.0969035, -0.24648514, -0.0040922165, 0.037500706, -0.038137026, 0.056214277, -0.048258524, 0.03567822, -0.05033007, -0.24696785) * go_3(1.0, 0.0);
[   1.684][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.03465209, -0.012495964, 0.22782089, 0.012034795, 0.2916752, 0.08264436, 0.15387125, -0.1473455, -0.15614432, 0.05536727, -0.027079755, 0.010725311, -0.03325222, -0.089212805, -0.10559839, -0.19647683) * go_3(1.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 89]     result += vec4(0.0001705175, -0.031081453, 0.010100773, -0.027214011);
[   1.684][d][vo/gpu/d3d11] [ 90]     return result;
[   1.684][d][vo/gpu/d3d11] [ 91] }
[   1.684][d][vo/gpu/d3d11] [ 92] void main() {
[   1.684][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.684][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.684][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.684][d][vo/gpu/d3d11] [ 96] }
[   1.684][d][vo/gpu/d3d11] HLSL source:
[   1.684][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.684][d][vo/gpu/d3d11] [  2] {
[   1.684][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.684][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.684][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.684][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.684][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.684][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.684][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.684][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.684][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.684][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.684][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.684][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.684][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.684][d][vo/gpu/d3d11] [ 16] };
[   1.684][d][vo/gpu/d3d11] [ 17] 
[   1.684][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.684][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.684][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.684][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.684][d][vo/gpu/d3d11] [ 22] 
[   1.684][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.684][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.684][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.684][d][vo/gpu/d3d11] [ 26] 
[   1.684][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.684][d][vo/gpu/d3d11] [ 28] {
[   1.684][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.684][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.684][d][vo/gpu/d3d11] [ 31] };
[   1.684][d][vo/gpu/d3d11] [ 32] 
[   1.684][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.684][d][vo/gpu/d3d11] [ 34] {
[   1.684][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.684][d][vo/gpu/d3d11] [ 36] };
[   1.684][d][vo/gpu/d3d11] [ 37] 
[   1.684][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.684][d][vo/gpu/d3d11] [ 39] {
[   1.684][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.684][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.185177505016326904296875f, 0.053705044090747833251953125f, 0.0338168479502201080322265625f, -0.01855502463877201080322265625f), float4(-0.21204335987567901611328125f, -0.01706974022090435028076171875f, 0.088259793817996978759765625f, -0.13126148283481597900390625f), float4(0.107295982539653778076171875f, -0.0434574373066425323486328125f, 0.08634711802005767822265625f, 0.0922089517116546630859375f), float4(0.0621316134929656982421875f, -0.01995871029794216156005859375f, 0.0518106706440448760986328125f, 0.185200631618499755859375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.16620020568370819091796875f, -0.14197103679180145263671875f, -0.0528092868626117706298828125f, 0.02528771199285984039306640625f), float4(-0.08330897986888885498046875f, -0.089980967342853546142578125f, -0.15642617642879486083984375f, -0.149412453174591064453125f), float4(-0.0348120294511318206787109375f, 0.0618576221168041229248046875f, 0.2605177462100982666015625f, -0.000549824791960418224334716796875f), float4(0.086427025496959686279296875f, 0.02410819195210933685302734375f, -0.12418039143085479736328125f, 0.02228637598454952239990234375f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.05820067226886749267578125f, -0.30733978748321533203125f, 0.17150162160396575927734375f, -0.13394679129123687744140625f), float4(-0.07511818408966064453125f, -0.14607767760753631591796875f, -0.006172171793878078460693359375f, 0.0077315890230238437652587890625f), float4(-0.2181822359561920166015625f, -0.06449432671070098876953125f, -0.0389587841928005218505859375f, 0.037722416222095489501953125f), float4(0.286999762058258056640625f, -0.0275630317628383636474609375f, 0.23295314610004425048828125f, 0.02844421565532684326171875f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.12871371209621429443359375f, 0.006490491330623626708984375f, 0.1498576104640960693359375f, -0.109230048954486846923828125f), float4(0.174135625362396240234375f, 0.15991090238094329833984375f, -0.084577031433582305908203125f, 0.10815371572971343994140625f), float4(-0.08871187269687652587890625f, -0.066611371934413909912109375f, 0.275441586971282958984375f, -0.009667768143117427825927734375f), float4(0.39819395542144775390625f, 0.123920969665050506591796875f, 0.1414590179920196533203125f, 0.001937652355991303920745849609375f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(0.13893188536167144775390625f, 0.12715353071689605712890625f, 0.0151916779577732086181640625f, -0.21003054082393646240234375f), float4(-0.030412353575229644775390625f, -0.016766130924224853515625f, -0.1979928910732269287109375f, -0.00613007508218288421630859375f), float4(0.376769542694091796875f, -0.144750773906707763671875f, -0.20651979744434356689453125f, -0.30432891845703125f), float4(-0.149445354938507080078125f, -0.09121535718441009521484375f, -0.10760058462619781494140625f, -0.2446219623088836669921875f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.11653076112270355224609375f, -0.006867128424346446990966796875f, -0.0224913693964481353759765625f, -0.178770124912261962890625f), float4(-0.15063138306140899658203125f, -0.13514868915081024169921875f, 0.1076433658599853515625f, -0.031964771449565887451171875f), float4(-0.086422763764858245849609375f, 0.3079287111759185791015625f, 0.1758416593074798583984375f, -0.0324493758380413055419921875f), float4(-0.069171138107776641845703125f, -0.26826369762420654296875f, -0.18978168070316314697265625f, -0.037039287388324737548828125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.120147310197353363037109375f, -0.030360512435436248779296875f, -0.12954474985599517822265625f, -0.110275603830814361572265625f), float4(-0.07721425592899322509765625f, 0.01968974433839321136474609375f, 0.22149550914764404296875f, -0.00226671597920358180999755859375f), float4(0.096977837383747100830078125f, -0.124532826244831085205078125f, -0.1677651107311248779296875f, -0.034212477505207061767578125f), float4(-0.3693515360355377197265625f, 0.01692693494260311126708984375f, 0.13636089861392974853515625f, 0.20415346324443817138671875f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.111995346844196319580078125f, -0.001692562946118414402008056640625f, -0.09058429300785064697265625f, -0.084375031292438507080078125f), float4(0.092625685036182403564453125f, 0.060462571680545806884765625f, 0.2550983726978302001953125f, -0.0116570331156253814697265625f), float4(-0.17949764430522918701171875f, -0.107189469039440155029296875f, -0.118066899478435516357421875f, -0.24681842327117919921875f), float4(-0.1747311055660247802734375f, 0.00145182455889880657196044921875f, -0.0428630150854587554931640625f, 0.061033569276332855224609375f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.14979295432567596435546875f, -0.0371545143425464630126953125f, 0.01957724988460540771484375f, 0.0122824348509311676025390625f), float4(0.091685958206653594970703125f, -0.055522859096527099609375f, 0.111671514809131622314453125f, 0.00786306150257587432861328125f), float4(-0.103197656571865081787109375f, -0.06416261196136474609375f, -0.2309756577014923095703125f, -0.13931874930858612060546875f), float4(0.21108110249042510986328125f, 0.01309580169618129730224609375f, -0.2306503951549530029296875f, -0.02563911117613315582275390625f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.1009197533130645751953125f, -0.100954256951808929443359375f, -0.0234497226774692535400390625f, -0.02217088826000690460205078125f), float4(0.0549537055194377899169921875f, -0.13049407303333282470703125f, 0.082890607416629791259765625f, 0.023241631686687469482421875f), float4(0.087353877723217010498046875f, -0.0058387457393109798431396484375f, 0.17897246778011322021484375f, 0.01143443584442138671875f), float4(0.008181138895452022552490234375f, -0.00347184040583670139312744140625f, -0.015372735448181629180908203125f, -0.076577663421630859375f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.02344216406345367431640625f, 0.075357019901275634765625f, 0.02439116500318050384521484375f, -0.0505320131778717041015625f), float4(0.04416863620281219482421875f, 0.00623432360589504241943359375f, -0.0197569988667964935302734375f, -0.009695122949779033660888671875f), float4(0.101023368537425994873046875f, 0.0052776974625885486602783203125f, -0.14944167435169219970703125f, -0.060957722365856170654296875f), float4(0.24367363750934600830078125f, -0.0806936919689178466796875f, 0.12170071899890899658203125f, -0.047048367559909820556640625f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.18376934528350830078125f, -0.084072291851043701171875f, -0.1294337809085845947265625f, 0.0738418996334075927734375f), float4(-0.124049760401248931884765625f, -0.13367928564548492431640625f, 0.11265896260738372802734375f, -0.02135300077497959136962890625f), float4(0.00378338596783578395843505859375f, 0.500883042812347412109375f, 0.14058582484722137451171875f, 0.0410536229610443115234375f), float4(0.038247622549533843994140625f, -0.014179975725710391998291015625f, 0.0079057775437831878662109375f, -0.0424922369420528411865234375f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.0462725348770618438720703125f, 0.052449114620685577392578125f, 0.1719095408916473388671875f, -0.0047453711740672588348388671875f), float4(-0.0455726347863674163818359375f, -0.092926360666751861572265625f, 0.3630982339382171630859375f, 0.166739284992218017578125f), float4(-0.0991540253162384033203125f, -0.10961477458477020263671875f, 0.1780311167240142822265625f, 0.19907133281230926513671875f), float4(-0.14306266605854034423828125f, 0.068985931575298309326171875f, 0.114934541285037994384765625f, 0.067950136959552764892578125f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(0.26181113719940185546875f, -0.044014625251293182373046875f, -0.2160503566265106201171875f, -0.086464382708072662353515625f), float4(0.21038742363452911376953125f, -0.0849860012531280517578125f, 0.0504625998437404632568359375f, 0.17514942586421966552734375f), float4(-0.25218951702117919921875f, -0.18691514432430267333984375f, 0.0576501078903675079345703125f, 0.0865361392498016357421875f), float4(-0.101205684244632720947265625f, 0.0317633412778377532958984375f, 0.18569491803646087646484375f, 0.17973189055919647216796875f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.0339214988052845001220703125f, 0.20112811028957366943359375f, -0.12986277043819427490234375f, 0.02896173112094402313232421875f), float4(-0.0568138323724269866943359375f, 0.0445114709436893463134765625f, -0.078274317085742950439453125f, -0.08609759807586669921875f), float4(0.096853435039520263671875f, 0.3483546078205108642578125f, -0.357581615447998046875f, -0.11749374866485595703125f), float4(-0.035918653011322021484375f, 0.061407111585140228271484375f, -0.085201539099216461181640625f, 0.02418808080255985260009765625f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.096430219709873199462890625f, -0.10491068661212921142578125f, 0.0068604187108576297760009765625f, 0.02367971278727054595947265625f), float4(0.096521444618701934814453125f, -0.293234884738922119140625f, 0.333536684513092041015625f, 0.1128642857074737548828125f), float4(-0.117218196392059326171875f, -0.07233183085918426513671875f, 0.06607238948345184326171875f, 0.08589608967304229736328125f), float4(0.055790007114410400390625f, 0.14396138489246368408203125f, -0.14191268384456634521484375f, 0.00034840963780879974365234375f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.1535716354846954345703125f, -0.038462735712528228759765625f, 0.081439562141895294189453125f, 0.1744908988475799560546875f), float4(0.4050328731536865234375f, -0.11450831592082977294921875f, 0.0039373221807181835174560546875f, 0.2536635100841522216796875f), float4(-0.0424453057348728179931640625f, -0.15622465312480926513671875f, 0.09155283868312835693359375f, 0.010992155410349369049072265625f), float4(-0.2064607143402099609375f, 0.0228011347353458404541015625f, 0.088944911956787109375f, 0.069300614297389984130859375f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.12663514912128448486328125f, 0.0238494537770748138427734375f, -0.053604446351528167724609375f, 0.12082873284816741943359375f), float4(-0.24796800315380096435546875f, -0.02096963487565517425537109375f, -0.038318939507007598876953125f, -0.01461755298078060150146484375f), float4(0.2263033688068389892578125f, 0.0378018654882907867431640625f, 0.052950702607631683349609375f, 0.042857058346271514892578125f), float4(-0.1448726356029510498046875f, 0.20786528289318084716796875f, -0.087196640670299530029296875f, 0.1752347052097320556640625f)));
[   1.684][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.0735276043415069580078125f, -0.05075283348560333251953125f, 0.0518305040895938873291015625f, 0.3286871612071990966796875f), float4(0.1747499406337738037109375f, 0.0169373638927936553955078125f, -0.087926007807254791259765625f, -0.024481765925884246826171875f), float4(-0.0222295932471752166748046875f, 0.0307061858475208282470703125f, 0.092135660350322723388671875f, -0.076506204903125762939453125f), float4(0.0734040439128875732421875f, 0.103680551052093505859375f, -0.17588900029659271240234375f, -0.08453030884265899658203125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(-0.06838215887546539306640625f, 0.0076983408071100711822509765625f, 0.06397211551666259765625f, -0.015604405663907527923583984375f), float4(0.161353051662445068359375f, 0.18044342100620269775390625f, 0.02413701824843883514404296875f, -0.2332618534564971923828125f), float4(0.13235588371753692626953125f, -0.00909658707678318023681640625f, -0.0583681426942348480224609375f, -0.0770404040813446044921875f), float4(0.001141981570981442928314208984375f, -0.09246194362640380859375f, 0.061036936938762664794921875f, 0.049564145505428314208984375f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.0232252962887287139892578125f, -0.0006085626664571464061737060546875f, -0.077751852571964263916015625f, 0.01695856638252735137939453125f), float4(-0.2641349136829376220703125f, -0.082630462944507598876953125f, -0.1535041630268096923828125f, -0.3020349442958831787109375f), float4(0.11395655572414398193359375f, -0.010813236236572265625f, -0.01773831434547901153564453125f, -0.13689042627811431884765625f), float4(-0.1031834185123443603515625f, 0.0257931835949420928955078125f, -0.0103361718356609344482421875f, 0.09733422100543975830078125f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.044625960290431976318359375f, 0.0528664179146289825439453125f, -0.34754288196563720703125f, 0.0554049797356128692626953125f), float4(-0.24492585659027099609375f, -0.3201686441898345947265625f, 0.181452929973602294921875f, 0.2487372457981109619140625f), float4(0.3238823413848876953125f, -0.0348015241324901580810546875f, -0.1347588002681732177734375f, -0.075655460357666015625f), float4(0.015183539129793643951416015625f, 0.0505959503352642059326171875f, 0.080900557339191436767578125f, 0.05930931866168975830078125f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.0453466959297657012939453125f, -0.0525278560817241668701171875f, 0.052270077168941497802734375f, 0.13417454063892364501953125f), float4(0.0520004518330097198486328125f, 0.028119288384914398193359375f, 0.005115496926009654998779296875f, 0.2295215129852294921875f), float4(-0.21583749353885650634765625f, 0.122413076460361480712890625f, 0.3507457077503204345703125f, 0.086165763437747955322265625f), float4(0.0759241580963134765625f, 0.284704864025115966796875f, 0.3432787954807281494140625f, 0.24857087433338165283203125f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.2131162583827972412109375f, 0.05260716378688812255859375f, 0.124886102974414825439453125f, 0.2019380629062652587890625f), float4(0.045226506888866424560546875f, 0.14512901008129119873046875f, -0.15103437006473541259765625f, -0.17926466464996337890625f), float4(0.116574108600616455078125f, -0.3271106779575347900390625f, -0.1633219420909881591796875f, -0.07793982326984405517578125f), float4(-0.21802668273448944091796875f, 0.518386900424957275390625f, -0.13567341864109039306640625f, 0.0782304108142852783203125f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.007963679730892181396484375f, 0.0480730123817920684814453125f, -0.14537893235683441162109375f, -0.02170877158641815185546875f), float4(0.0362464226782321929931640625f, 0.106239497661590576171875f, 0.12605369091033935546875f, 0.0070735239423811435699462890625f), float4(-0.157274305820465087890625f, 0.074395008385181427001953125f, 0.08916227519512176513671875f, -0.0039608315564692020416259765625f), float4(0.3320319950580596923828125f, -0.054612420499324798583984375f, -0.17615358531475067138671875f, -0.102405168116092681884765625f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.206369817256927490234375f, -0.0024615111760795116424560546875f, -0.106257863342761993408203125f, 0.0242709256708621978759765625f), float4(0.06181083619594573974609375f, -0.1358520090579986572265625f, -0.16581286489963531494140625f, 0.23549418151378631591796875f), float4(0.01928842067718505859375f, 0.074049793183803558349609375f, -0.0544494874775409698486328125f, 0.040963731706142425537109375f), float4(0.0469397343695163726806640625f, 0.0039808028377592563629150390625f, 0.02111498080193996429443359375f, 0.064925275743007659912109375f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.10485388338565826416015625f, 0.06850884854793548583984375f, -0.112921692430973052978515625f, 0.1699156463146209716796875f), float4(-0.15282535552978515625f, 0.12417550384998321533203125f, -0.0504311658442020416259765625f, -0.066895820200443267822265625f), float4(-0.000598119455389678478240966796875f, 0.033696912229061126708984375f, 0.110550470650196075439453125f, 0.033060126006603240966796875f), float4(-0.174727141857147216796875f, 0.00488196127116680145263671875f, -0.0447870604693889617919921875f, -0.1344572007656097412109375f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.2047313153743743896484375f, 0.0564778745174407958984375f, 0.05955998599529266357421875f, 0.115130566060543060302734375f), float4(-0.0584257878363132476806640625f, -0.0359717272222042083740234375f, 0.08334706723690032958984375f, -0.096510134637355804443359375f), float4(-0.23206293582916259765625f, 0.10635797679424285888671875f, -0.2157562077045440673828125f, -0.070632539689540863037109375f), float4(0.038775108754634857177734375f, -0.107549034059047698974609375f, 0.22248400747776031494140625f, 0.2170230448246002197265625f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.02557766996324062347412109375f, 0.09886609017848968505859375f, -0.10049946606159210205078125f, 0.1668739616870880126953125f), float4(-0.084830604493618011474609375f, 0.0315040089190006256103515625f, -0.0495124943554401397705078125f, 0.05595695972442626953125f), float4(-0.131932556629180908203125f, -0.08585272729396820068359375f, 0.142476618289947509765625f, 0.122904770076274871826171875f), float4(-0.071683086454868316650390625f, 0.1453175246715545654296875f, -0.048359327018260955810546875f, 0.2771659791469573974609375f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.13297586143016815185546875f, 0.20674328505992889404296875f, 0.1446938812732696533203125f, 0.08981846272945404052734375f), float4(-0.0042313658632338047027587890625f, -0.02819192968308925628662109375f, 0.1547032892704010009765625f, 0.172998368740081787109375f), float4(0.113062344491481781005859375f, -0.22716297209262847900390625f, -0.21754944324493408203125f, -0.000839562737382948398590087890625f), float4(-0.141605079174041748046875f, 0.180825293064117431640625f, 0.11268378794193267822265625f, 0.2733562290668487548828125f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.07497517764568328857421875f, -0.067995943129062652587890625f, -0.01815807819366455078125f, -0.00038999432581476867198944091796875f), float4(-0.151696681976318359375f, -0.0692823827266693115234375f, -0.3367228806018829345703125f, -0.105485774576663970947265625f), float4(0.33106267452239990234375f, 0.06698314845561981201171875f, 0.019718743860721588134765625f, -0.06810210645198822021484375f), float4(-0.351864039897918701171875f, -0.29145967960357666015625f, -0.0568633936345577239990234375f, 0.21498048305511474609375f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.0132155120372772216796875f, -0.2476375401020050048828125f, 0.2096526622772216796875f, 0.1068435013294219970703125f), float4(-0.1323419511318206787109375f, 0.0535664968192577362060546875f, 0.0506184808909893035888671875f, -0.2864523231983184814453125f), float4(0.15518288314342498779296875f, 0.23247198760509490966796875f, 0.0175539068877696990966796875f, -0.251813352108001708984375f), float4(-0.0480307228863239288330078125f, -0.06663928925991058349609375f, -0.111026704311370849609375f, -0.126633942127227783203125f)));
[   1.684][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.01050193794071674346923828125f, -0.17995767295360565185546875f, 0.0601085908710956573486328125f, 0.0501855872571468353271484375f), float4(0.10862712562084197998046875f, -0.101203434169292449951171875f, 0.075587280094623565673828125f, 0.0604667551815509796142578125f), float4(-0.106942676007747650146484375f, -0.358546078205108642578125f, 0.1601599156856536865234375f, 0.16823332011699676513671875f), float4(-0.06543774902820587158203125f, -0.3731067478656768798828125f, 0.01404397189617156982421875f, -0.18328045308589935302734375f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.097128488123416900634765625f, 0.013983462937176227569580078125f, 0.07291422784328460693359375f, 0.0317155458033084869384765625f), float4(0.03086239658296108245849609375f, 0.04551045596599578857421875f, -0.22066842019557952880859375f, 0.06346486508846282958984375f), float4(0.117216587066650390625f, -0.10596601665019989013671875f, -0.20611263811588287353515625f, 0.05215881764888763427734375f), float4(-0.3961766064167022705078125f, -0.0378158204257488250732421875f, 0.17633812129497528076171875f, 0.13161109387874603271484375f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.2502967417240142822265625f, 0.07153423130512237548828125f, -0.3512568175792694091796875f, -0.18255402147769927978515625f), float4(-0.1956908702850341796875f, 0.00432772003114223480224609375f, -0.096903502941131591796875f, -0.2464851438999176025390625f), float4(-0.00409221649169921875f, 0.0375007055699825286865234375f, -0.038137026131153106689453125f, 0.0562142767012119293212890625f), float4(-0.0482585243880748748779296875f, 0.0356782190501689910888671875f, -0.0503300689160823822021484375f, -0.246967852115631103515625f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.034652091562747955322265625f, -0.012495963834226131439208984375f, 0.22782088816165924072265625f, 0.012034795247018337249755859375f), float4(0.29167520999908447265625f, 0.08264435827732086181640625f, 0.15387125313282012939453125f, -0.14734549820423126220703125f), float4(-0.156144320964813232421875f, 0.055367268621921539306640625f, -0.02707975544035434722900390625f, 0.010725311003625392913818359375f), float4(-0.0332522206008434295654296875f, -0.0892128050327301025390625f, -0.105598390102386474609375f, -0.19647683203220367431640625f)))) + float4(0.00017051749455276876688003540039062f, -0.03108145296573638916015625f, 0.01010077260434627532958984375f, -0.02721401117742061614990234375f);
[   1.685][d][vo/gpu/d3d11] [ 61] }
[   1.685][d][vo/gpu/d3d11] [ 62] 
[   1.685][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.685][d][vo/gpu/d3d11] [ 64] {
[   1.685][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.685][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.685][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.685][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.685][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.685][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.685][d][vo/gpu/d3d11] [ 71] }
[   1.685][d][vo/gpu] Resizing texture: 1920x800
[   1.687][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.688][v][vo/gpu/d3d11] Compiled a vertex shader in 3931us
[   1.688][v][vo/gpu/d3d11] shaderc: 2193us, SPIRV-Cross: 121us, D3DCompile: 1617us
[   1.688][d][vo/gpu/d3d11] GLSL source:
[   1.688][d][vo/gpu/d3d11] [  1] #version 450
[   1.688][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.688][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.688][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.688][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.688][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.688][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.688][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.688][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.688][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.688][d][vo/gpu/d3d11] [ 11] void main() {
[   1.688][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.688][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.688][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.688][d][vo/gpu/d3d11] [ 15] }
[   1.688][d][vo/gpu/d3d11] HLSL source:
[   1.688][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.688][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.688][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.688][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.688][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.688][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.688][d][vo/gpu/d3d11] [  7] 
[   1.689][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.689][d][vo/gpu/d3d11] [  9] {
[   1.689][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.689][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.689][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.689][d][vo/gpu/d3d11] [ 13] };
[   1.689][d][vo/gpu/d3d11] [ 14] 
[   1.689][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.689][d][vo/gpu/d3d11] [ 16] {
[   1.689][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.689][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.689][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.689][d][vo/gpu/d3d11] [ 20] };
[   1.689][d][vo/gpu/d3d11] [ 21] 
[   1.689][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.689][d][vo/gpu/d3d11] [ 23] {
[   1.689][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.689][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.689][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.689][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.689][d][vo/gpu/d3d11] [ 28] }
[   1.689][d][vo/gpu/d3d11] [ 29] 
[   1.689][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.689][d][vo/gpu/d3d11] [ 31] {
[   1.689][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.689][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.689][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.689][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.689][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.689][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.689][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.689][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.689][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.689][d][vo/gpu/d3d11] [ 41] }
[   1.714][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.764][v][vo/gpu/d3d11] Compiled a fragment shader in 75664us
[   1.764][v][vo/gpu/d3d11] shaderc: 25935us, SPIRV-Cross: 2410us, D3DCompile: 47319us
[   1.764][d][vo/gpu/d3d11] GLSL source:
[   1.764][d][vo/gpu/d3d11] [  1] #version 450
[   1.764][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.764][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.764][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.764][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.764][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.764][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.764][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.764][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.764][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.764][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.764][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.764][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.764][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.764][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.764][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.764][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.764][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.764][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.764][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.764][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.764][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.764][d][vo/gpu/d3d11] [ 23] };
[   1.764][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.764][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.764][d][vo/gpu/d3d11] [ 26] #define conv2d_2_tf_raw texture0
[   1.764][d][vo/gpu/d3d11] [ 27] #define conv2d_2_tf_pos texcoord0
[   1.764][d][vo/gpu/d3d11] [ 28] #define conv2d_2_tf_size texture_size0
[   1.764][d][vo/gpu/d3d11] [ 29] #define conv2d_2_tf_rot texture_rot0
[   1.764][d][vo/gpu/d3d11] [ 30] #define conv2d_2_tf_off texture_off0
[   1.764][d][vo/gpu/d3d11] [ 31] #define conv2d_2_tf_pt pixel_size0
[   1.764][d][vo/gpu/d3d11] [ 32] #define conv2d_2_tf_map texmap0
[   1.764][d][vo/gpu/d3d11] [ 33] #define conv2d_2_tf_mul 1.000000
[   1.764][d][vo/gpu/d3d11] [ 34] #define conv2d_2_tf_tex(pos) (conv2d_2_tf_mul * vec4(texture(conv2d_2_tf_raw, pos)).rgba)
[   1.764][d][vo/gpu/d3d11] [ 35] #define conv2d_2_tf_gather(pos, c) (conv2d_2_tf_mul * vec4(textureGather(conv2d_2_tf_raw, pos, c)))
[   1.764][d][vo/gpu/d3d11] [ 36] #define conv2d_2_tf_texOff(off) conv2d_2_tf_tex(conv2d_2_tf_pos + conv2d_2_tf_pt * vec2(off))
[   1.764][d][vo/gpu/d3d11] [ 37] #define conv2d_2_tf1_raw texture1
[   1.764][d][vo/gpu/d3d11] [ 38] #define conv2d_2_tf1_pos texcoord1
[   1.764][d][vo/gpu/d3d11] [ 39] #define conv2d_2_tf1_size texture_size1
[   1.764][d][vo/gpu/d3d11] [ 40] #define conv2d_2_tf1_rot texture_rot1
[   1.764][d][vo/gpu/d3d11] [ 41] #define conv2d_2_tf1_off texture_off1
[   1.764][d][vo/gpu/d3d11] [ 42] #define conv2d_2_tf1_pt pixel_size1
[   1.764][d][vo/gpu/d3d11] [ 43] #define conv2d_2_tf1_map texmap1
[   1.764][d][vo/gpu/d3d11] [ 44] #define conv2d_2_tf1_mul 1.000000
[   1.765][d][vo/gpu/d3d11] [ 45] #define conv2d_2_tf1_tex(pos) (conv2d_2_tf1_mul * vec4(texture(conv2d_2_tf1_raw, pos)).rgba)
[   1.765][d][vo/gpu/d3d11] [ 46] #define conv2d_2_tf1_gather(pos, c) (conv2d_2_tf1_mul * vec4(textureGather(conv2d_2_tf1_raw, pos, c)))
[   1.765][d][vo/gpu/d3d11] [ 47] #define conv2d_2_tf1_texOff(off) conv2d_2_tf1_tex(conv2d_2_tf1_pos + conv2d_2_tf1_pt * vec2(off))
[   1.765][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.765][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.765][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.765][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.765][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.765][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.026301445, -0.021575214, 0.22165509, 0.059994068, 0.03341161, 0.1831188, 0.20342293, 0.110160105, 0.03908121, 0.020673111, 0.07239561, 0.038754333, 0.15266368, 0.16526422, 0.062376205, -0.09759537) * go_0(-1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 54]     result += mat4(0.19817191, 0.10267733, 0.17744653, 0.23283184, 0.18810122, 0.2708428, -0.12651879, 0.020756349, 0.039632563, -0.22201295, 0.04873703, 0.09159713, 0.13838065, 0.21169297, 0.30816007, 0.044463675) * go_0(-1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 55]     result += mat4(-0.27859214, 0.07277634, 0.0021458792, 0.0089682285, -0.069680706, 0.090415835, -0.057762265, 0.18703683, -0.03514389, -0.102816254, -0.036509827, 0.038066104, -0.0168311, 0.094478935, 0.04079697, -0.049064912) * go_0(-1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.20913245, -0.110538535, -0.08584027, -0.1222067, 0.05414807, -0.045247085, 0.07351766, -0.002078549, -0.1270987, -0.10164512, -0.1857815, 0.08845066, -0.03743333, -0.098948084, 0.21244387, 0.10441866) * go_0(0.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 57]     result += mat4(0.015990427, 0.36396438, -0.24094687, 0.30236533, -0.13271736, 0.06057376, -0.19678196, -0.28577125, -0.25427434, -0.08400598, 0.07284403, -0.18552442, -0.16425897, 0.097259276, -0.32386774, -0.2190484) * go_0(0.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.004581924, -0.13954072, -0.122360416, 0.14132866, -0.08529257, -0.013296556, 0.0848472, 0.09336581, 0.10332182, -0.016313016, 0.07103558, 0.032564916, -0.13478759, -0.20207484, 0.12986964, 0.1219679) * go_0(0.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 59]     result += mat4(0.09817874, -0.10573357, 0.100535244, 0.19608764, -0.13303067, 0.024192972, -0.030689823, 0.02574889, 0.051233094, 0.03489235, -0.18465245, -0.06943822, -0.031604882, 0.1519888, 0.09348508, 0.09187296) * go_0(1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.21365458, -0.23696984, 0.13097638, -0.09435498, 0.16467983, -0.066370346, 0.1269104, -0.095128186, 0.09954892, 0.12489504, -0.43418056, 0.106512725, -0.17860703, -0.07114084, -0.07630834, -0.26642478) * go_0(1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.009044342, 0.02711196, -0.14873673, 0.015405045, 0.0071443473, -0.025285944, 0.07409282, 0.06338527, 0.0149676185, 0.011741382, -0.2133069, -0.028912885, 0.19420496, 0.039629057, 0.057636812, 0.15214856) * go_0(1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 62]     result += mat4(0.07629928, 0.25540486, -0.050925937, -0.18136702, 0.02261603, 0.22343902, 0.003270321, 0.10735731, -0.12541203, -0.10208828, 0.012832783, 0.2591262, 0.08122926, -0.009837677, 0.10308358, 0.19236866) * go_1(-1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 63]     result += mat4(0.0896358, 0.27571487, 0.04406029, -0.047453407, -0.08587119, 0.16366854, 0.20622262, 0.08347545, -0.3501584, -0.28434548, -0.07592983, 0.09098784, 0.07605388, 0.09677056, 0.0015295541, 0.05102585) * go_1(-1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 64]     result += mat4(0.18255898, 0.18618028, 0.0017002645, -0.013004655, -0.06436534, 0.13967068, 0.063077755, -0.10632303, -0.20803222, -0.028537111, -0.03144366, -0.08555215, 0.05154303, 0.02431626, 0.15246728, -0.013708507) * go_1(-1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.020998938, -0.05026291, 0.03700117, 0.00830308, -0.1949294, 0.0026698054, -0.034649856, 0.19784226, -0.083901435, -0.069783084, -0.1504053, 0.16595264, -0.07480141, 0.16067508, 0.06010996, -0.021359695) * go_1(0.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.040828142, -0.20158486, 0.034770954, -0.1894161, 0.11665004, 0.29729164, -0.10584386, 0.13165873, -0.18863006, -0.26719162, -0.047613148, -0.12728356, -0.2033613, 0.10550052, 0.20095508, -0.11275811) * go_1(0.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.0785033, -0.1896073, -0.051492307, -0.1694358, 0.1368308, 0.049355216, -0.05707422, 0.079159185, 0.024578957, -0.0923136, 0.089215435, 0.28670043, 0.027932687, 0.06510816, 0.10810999, 0.05990052) * go_1(0.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 68]     result += mat4(0.08135192, 0.0001326522, -0.16098668, -0.18663193, -0.10280192, 0.078255914, 0.047648013, 0.08326376, 0.055962667, 0.06302574, -0.080121025, -0.031820554, -0.019117938, 0.12515336, 0.09794088, -0.03276838) * go_1(1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 69]     result += mat4(0.280923, 0.24079335, 0.007883573, 0.06270414, 0.3055441, 0.19291803, -0.16041607, 0.14836526, 0.0013885222, 0.04538063, 0.10742898, -0.064491205, 0.048174977, 4.237692e-05, -0.15194727, 0.024381457) * go_1(1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.0009164131, -0.031949926, 0.0076425644, -0.036870714, -0.0031292974, 0.017726978, -0.20172147, -0.0770472, 0.26379177, 0.108997814, 0.08069395, 0.2126177, 0.012075376, -0.029457828, 0.062730506, -0.15754452) * go_1(1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 71]     result += mat4(0.09167904, -0.2657421, -0.03443356, 0.03315832, -0.015365421, -0.1029612, -0.108251, 0.04261033, -0.097120754, -0.05616668, -0.09275983, 0.024902184, 0.050058514, -0.013761632, 0.07555132, -0.0046676896) * go_2(-1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 72]     result += mat4(-0.10743835, -0.0007361781, -0.042085417, -0.08237517, -0.10094376, -0.24007876, 0.13924706, -0.07526801, 0.01158322, 0.15491122, 0.0069442675, -0.004242352, 0.11429785, 0.02994726, -0.11829945, -0.04108612) * go_2(-1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 73]     result += mat4(0.073622055, -0.064717196, -0.0025231615, 0.13256475, 0.20159899, 0.047977835, -0.10289233, -0.18419135, -0.00888952, 0.059428576, -0.053062655, -0.02730631, 0.14545685, -0.08686949, 0.17454128, 0.035443828) * go_2(-1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.010146019, 0.06712568, 0.12614638, 0.023590917, 0.025756737, 0.06603747, -0.17108095, -0.06179699, 0.027241204, -0.13196802, 0.043475866, -0.0397495, 0.05306092, 0.035672903, 0.047219284, -0.16680142) * go_2(0.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 75]     result += mat4(0.079427816, -0.06716479, 0.19028603, -0.19694683, -0.061598092, -0.07471188, 0.21170339, 0.30140215, -0.0023369973, 0.04688297, -0.14154115, 0.19283508, 0.1339858, -0.09116279, 0.15305163, 0.029108394) * go_2(0.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.14902157, -0.03339153, -0.08532003, -0.10736339, 0.08702709, 0.07607574, -0.09955836, -0.016585784, -0.030078214, -0.060374748, -0.2854279, 0.02441719, 0.034877967, 0.2099041, 0.11125731, -0.059071556) * go_2(0.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.08436325, 0.06893047, -0.045362443, -0.02237741, -0.07583875, -0.034830183, -0.024008518, -0.2882329, -0.011109783, 0.101859994, 0.091137715, 0.0020565533, -0.044729806, -0.18168025, 0.069466636, 0.04994174) * go_2(1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 78]     result += mat4(0.11915174, 0.089596465, -0.18965814, 0.015218237, 0.13500094, 0.19921367, -0.008298205, 0.29650384, -0.049439427, -0.27590424, 0.36169067, -0.030582754, 0.02151196, 0.019915426, 0.04543398, 0.16126189) * go_2(1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 79]     result += mat4(0.1620274, -0.08264547, 0.082442135, -0.0034478644, 0.09888509, -0.0034957859, -0.107241705, -0.17729597, -0.05138647, 0.02052103, -0.019507123, 0.037574988, -0.1694345, 0.17871588, -0.22510391, 0.019049853) * go_2(1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.10962245, -0.1329873, -0.060855392, 0.025941676, -0.19536193, -0.120365486, -0.04313703, -0.052912965, 0.20854498, 0.08341353, 0.008687068, -0.20432276, 0.15677948, -0.19000018, 0.01821201, -0.041512605) * go_3(-1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 81]     result += mat4(0.012287526, -0.14180368, -0.098788455, 0.025949089, 0.09442778, 0.2247651, -0.12453263, 0.10435483, 0.274603, 0.06133054, 0.10506106, 0.14727746, -0.048299775, -0.082819685, 0.07319359, -0.047460355) * go_3(-1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.070726536, -0.034744017, 0.07521428, 0.070649154, -0.05958955, -0.100232825, -0.010651838, 0.045392875, 0.2930271, -0.04952355, 0.3112155, 0.117203265, 0.025166962, 0.11176862, 0.06716659, 0.07175864) * go_3(-1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.011560962, -0.14032063, -0.17424704, 0.07652749, -0.04220116, 0.052874275, -0.00225693, -0.031843517, -0.07520102, -0.13775803, 0.2449317, 0.069658786, 0.052280303, -0.105218224, 0.03574522, -0.020500354) * go_3(0.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 84]     result += mat4(0.08793712, 0.26712346, 0.08315631, 0.23813692, -0.04439029, 0.031587064, 0.09561177, -0.13380238, -0.24982157, 0.31701845, -0.3875432, 0.10487225, 0.09201869, -0.037252493, -0.006935219, -0.14650282) * go_3(0.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 85]     result += mat4(0.077635325, 0.13732299, -0.071563005, 0.096517466, -0.15051986, -0.111744404, 0.03996857, -0.052670125, -0.1819665, 0.054554947, -0.13774712, -0.20061246, -0.0023742192, 0.15647805, -0.024121126, 0.075497724) * go_3(0.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 86]     result += mat4(0.0073632775, -0.06535298, 0.039895996, 0.20666869, 0.13625242, 0.04823007, -0.07135618, 0.04787906, 0.01383074, 0.15382123, -0.15519714, 0.056721795, 0.061946746, -0.0586851, 0.028934354, -0.02264129) * go_3(1.0, -1.0);
[   1.765][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.19791882, -0.111910924, -0.010451344, -0.30566537, -0.1416239, -0.14523096, 0.116883226, -0.18241516, 0.2680614, -0.18487626, 0.17472346, 0.08346682, -0.14510359, -0.029229192, -0.005879142, 0.050247498) * go_3(1.0, 0.0);
[   1.765][d][vo/gpu/d3d11] [ 88]     result += mat4(0.030153519, -0.092469186, -0.022912916, 0.10200855, -0.04237032, -0.05917764, 0.10479645, -0.05619482, -0.18949397, -0.019547248, 0.013868889, -0.1524476, 0.14048979, -0.032521486, 0.1322921, 0.070972025) * go_3(1.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 89]     result += vec4(0.012053958, -4.6962363e-05, 0.0020099226, -0.033494607);
[   1.765][d][vo/gpu/d3d11] [ 90]     return result;
[   1.765][d][vo/gpu/d3d11] [ 91] }
[   1.765][d][vo/gpu/d3d11] [ 92] void main() {
[   1.765][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.765][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.765][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.765][d][vo/gpu/d3d11] [ 96] }
[   1.765][d][vo/gpu/d3d11] HLSL source:
[   1.765][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.765][d][vo/gpu/d3d11] [  2] {
[   1.765][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.765][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.765][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.765][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.765][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.765][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.765][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.765][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.765][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.765][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.765][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.765][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.765][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.765][d][vo/gpu/d3d11] [ 16] };
[   1.765][d][vo/gpu/d3d11] [ 17] 
[   1.765][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.765][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.765][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.765][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.765][d][vo/gpu/d3d11] [ 22] 
[   1.765][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.765][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.765][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.765][d][vo/gpu/d3d11] [ 26] 
[   1.765][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.765][d][vo/gpu/d3d11] [ 28] {
[   1.765][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.765][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.765][d][vo/gpu/d3d11] [ 31] };
[   1.765][d][vo/gpu/d3d11] [ 32] 
[   1.765][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.765][d][vo/gpu/d3d11] [ 34] {
[   1.765][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.766][d][vo/gpu/d3d11] [ 36] };
[   1.766][d][vo/gpu/d3d11] [ 37] 
[   1.766][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.766][d][vo/gpu/d3d11] [ 39] {
[   1.766][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.766][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.02630144543945789337158203125f, -0.02157521434128284454345703125f, 0.22165508568286895751953125f, 0.0599940679967403411865234375f), float4(0.0334116108715534210205078125f, 0.18311880528926849365234375f, 0.2034229338169097900390625f, 0.110160104930400848388671875f), float4(0.039081208407878875732421875f, 0.02067311108112335205078125f, 0.07239560782909393310546875f, 0.0387543328106403350830078125f), float4(0.1526636779308319091796875f, 0.1652642190456390380859375f, 0.0623762048780918121337890625f, -0.097595371305942535400390625f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.198171913623809814453125f, 0.10267733037471771240234375f, 0.17744652926921844482421875f, 0.23283183574676513671875f), float4(0.18810121715068817138671875f, 0.2708427906036376953125f, -0.126518785953521728515625f, 0.02075634896755218505859375f), float4(0.0396325625479221343994140625f, -0.22201295197010040283203125f, 0.0487370304763317108154296875f, 0.091597132384777069091796875f), float4(0.13838064670562744140625f, 0.21169297397136688232421875f, 0.3081600666046142578125f, 0.0444636754691600799560546875f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(-0.2785921394824981689453125f, 0.072776339948177337646484375f, 0.00214587920345366001129150390625f, 0.00896822847425937652587890625f), float4(-0.06968070566654205322265625f, 0.09041583538055419921875f, -0.05776226520538330078125f, 0.18703682720661163330078125f), float4(-0.035143889486789703369140625f, -0.1028162539005279541015625f, -0.03650982677936553955078125f, 0.03806610405445098876953125f), float4(-0.016831099987030029296875f, 0.0944789350032806396484375f, 0.0407969690859317779541015625f, -0.049064911901950836181640625f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.20913244783878326416015625f, -0.110538534820079803466796875f, -0.08584026992321014404296875f, -0.12220670282840728759765625f), float4(0.054148070514202117919921875f, -0.045247085392475128173828125f, 0.073517657816410064697265625f, -0.002078549005091190338134765625f), float4(-0.12709869444370269775390625f, -0.101645119488239288330078125f, -0.18578149378299713134765625f, 0.088450662791728973388671875f), float4(-0.0374333299696445465087890625f, -0.098948083817958831787109375f, 0.21244387328624725341796875f, 0.104418657720088958740234375f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(0.01599042676389217376708984375f, 0.363964378833770751953125f, -0.24094687402248382568359375f, 0.3023653328418731689453125f), float4(-0.13271735608577728271484375f, 0.0605737604200839996337890625f, -0.1967819631099700927734375f, -0.28577125072479248046875f), float4(-0.2542743384838104248046875f, -0.0840059816837310791015625f, 0.072844028472900390625f, -0.18552441895008087158203125f), float4(-0.16425897181034088134765625f, 0.097259275615215301513671875f, -0.323867738246917724609375f, -0.21904839575290679931640625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.0045819240622222423553466796875f, -0.13954071700572967529296875f, -0.122360415756702423095703125f, 0.1413286626338958740234375f), float4(-0.085292570292949676513671875f, -0.0132965557277202606201171875f, 0.08484719693660736083984375f, 0.093365810811519622802734375f), float4(0.1033218204975128173828125f, -0.016313016414642333984375f, 0.07103557884693145751953125f, 0.032564915716648101806640625f), float4(-0.1347875893115997314453125f, -0.20207484066486358642578125f, 0.129869639873504638671875f, 0.12196789681911468505859375f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.098178736865520477294921875f, -0.105733573436737060546875f, 0.1005352437496185302734375f, 0.19608764350414276123046875f), float4(-0.13303066790103912353515625f, 0.02419297210872173309326171875f, -0.03068982250988483428955078125f, 0.0257488898932933807373046875f), float4(0.0512330941855907440185546875f, 0.0348923504352569580078125f, -0.18465244770050048828125f, -0.0694382190704345703125f), float4(-0.0316048823297023773193359375f, 0.151988804340362548828125f, 0.093485079705715179443359375f, 0.0918729603290557861328125f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.213654577732086181640625f, -0.23696984350681304931640625f, 0.130976378917694091796875f, -0.094354979693889617919921875f), float4(0.164679825305938720703125f, -0.066370345652103424072265625f, 0.12691040337085723876953125f, -0.095128186047077178955078125f), float4(0.09954892098903656005859375f, 0.124895043671131134033203125f, -0.434180557727813720703125f, 0.106512725353240966796875f), float4(-0.17860703170299530029296875f, -0.07114084064960479736328125f, -0.0763083398342132568359375f, -0.26642477512359619140625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.009044341742992401123046875f, 0.02711196057498455047607421875f, -0.14873673021793365478515625f, 0.015405044890940189361572265625f), float4(0.0071443472988903522491455078125f, -0.02528594434261322021484375f, 0.07409282028675079345703125f, 0.063385270535945892333984375f), float4(0.01496761851012706756591796875f, 0.011741382069885730743408203125f, -0.213306903839111328125f, -0.02891288511455059051513671875f), float4(0.1942049562931060791015625f, 0.03962905704975128173828125f, 0.05763681232929229736328125f, 0.15214855968952178955078125f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.0762992799282073974609375f, 0.2554048597812652587890625f, -0.0509259365499019622802734375f, -0.18136702477931976318359375f), float4(0.02261603064835071563720703125f, 0.22343902289867401123046875f, 0.0032703210599720478057861328125f, 0.10735730826854705810546875f), float4(-0.12541203200817108154296875f, -0.102088280022144317626953125f, 0.012832783162593841552734375f, 0.259126186370849609375f), float4(0.081229262053966522216796875f, -0.009837676770985126495361328125f, 0.1030835807323455810546875f, 0.1923686563968658447265625f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.089635796844959259033203125f, 0.275714874267578125f, 0.044060289859771728515625f, -0.0474534071981906890869140625f), float4(-0.0858711898326873779296875f, 0.1636685431003570556640625f, 0.2062226235866546630859375f, 0.083475448191165924072265625f), float4(-0.350158393383026123046875f, -0.2843454778194427490234375f, -0.075929827988147735595703125f, 0.090987838804721832275390625f), float4(0.076053880155086517333984375f, 0.096770562231540679931640625f, 0.00152955413796007633209228515625f, 0.0510258488357067108154296875f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.1825589835643768310546875f, 0.18618027865886688232421875f, 0.001700264518149197101593017578125f, -0.01300465501844882965087890625f), float4(-0.06436534225940704345703125f, 0.13967068493366241455078125f, 0.063077755272388458251953125f, -0.1063230335712432861328125f), float4(-0.2080322206020355224609375f, -0.02853711135685443878173828125f, -0.0314436592161655426025390625f, -0.085552148520946502685546875f), float4(0.0515430308878421783447265625f, 0.02431626059114933013916015625f, 0.1524672806262969970703125f, -0.013708506710827350616455078125f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.02099893800914287567138671875f, -0.0502629093825817108154296875f, 0.037001170217990875244140625f, 0.0083030797541141510009765625f), float4(-0.19492940604686737060546875f, 0.00266980542801320552825927734375f, -0.034649856388568878173828125f, 0.19784225523471832275390625f), float4(-0.0839014351367950439453125f, -0.069783084094524383544921875f, -0.15040530264377593994140625f, 0.16595263779163360595703125f), float4(-0.074801407754421234130859375f, 0.1606750786304473876953125f, 0.0601099617779254913330078125f, -0.02135969512164592742919921875f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.0408281423151493072509765625f, -0.20158486068248748779296875f, 0.0347709544003009796142578125f, -0.18941609561443328857421875f), float4(0.116650037467479705810546875f, 0.29729163646697998046875f, -0.10584385693073272705078125f, 0.131658732891082763671875f), float4(-0.18863005936145782470703125f, -0.2671916186809539794921875f, -0.0476131476461887359619140625f, -0.12728355824947357177734375f), float4(-0.2033613026142120361328125f, 0.105500519275665283203125f, 0.20095507800579071044921875f, -0.112758107483386993408203125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.078503303229808807373046875f, -0.18960730731487274169921875f, -0.0514923073351383209228515625f, -0.169435799121856689453125f), float4(0.136830806732177734375f, 0.049355216324329376220703125f, -0.0570742189884185791015625f, 0.07915918529033660888671875f), float4(0.02457895688712596893310546875f, -0.09231360256671905517578125f, 0.089215435087680816650390625f, 0.286700427532196044921875f), float4(0.02793268673121929168701171875f, 0.065108157694339752197265625f, 0.108109988272190093994140625f, 0.0599005185067653656005859375f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.08135192096233367919921875f, 0.00013265220331959426403045654296875f, -0.16098667681217193603515625f, -0.18663193285465240478515625f), float4(-0.10280191898345947265625f, 0.078255914151668548583984375f, 0.047648012638092041015625f, 0.083263762295246124267578125f), float4(0.05596266686916351318359375f, 0.0630257427692413330078125f, -0.08012102544307708740234375f, -0.0318205542862415313720703125f), float4(-0.01911793835461139678955078125f, 0.125153362751007080078125f, 0.09794087707996368408203125f, -0.0327683798968791961669921875f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.28092300891876220703125f, 0.24079334735870361328125f, 0.00788357295095920562744140625f, 0.062704138457775115966796875f), float4(0.3055441081523895263671875f, 0.1929180324077606201171875f, -0.160416066646575927734375f, 0.1483652591705322265625f), float4(0.001388522214256227016448974609375f, 0.045380629599094390869140625f, 0.10742898285388946533203125f, -0.064491204917430877685546875f), float4(0.04817497730255126953125f, 4.2376919736852869391441345214844e-05f, -0.15194727480411529541015625f, 0.02438145689666271209716796875f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.0009164130897261202335357666015625f, -0.0319499261677265167236328125f, 0.007642564363777637481689453125f, -0.0368707142770290374755859375f), float4(-0.0031292974017560482025146484375f, 0.01772697828710079193115234375f, -0.20172147452831268310546875f, -0.0770471990108489990234375f), float4(0.2637917697429656982421875f, 0.108997814357280731201171875f, 0.080693952739238739013671875f, 0.212617695331573486328125f), float4(0.0120753757655620574951171875f, -0.02945782802999019622802734375f, 0.06273050606250762939453125f, -0.1575445234775543212890625f)));
[   1.766][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.091679036617279052734375f, -0.2657420933246612548828125f, -0.03443355858325958251953125f, 0.0331583209335803985595703125f), float4(-0.015365420840680599212646484375f, -0.10296119749546051025390625f, -0.108250997960567474365234375f, 0.0426103286445140838623046875f), float4(-0.097120754420757293701171875f, -0.0561666786670684814453125f, -0.09275983273983001708984375f, 0.0249021835625171661376953125f), float4(0.0500585138797760009765625f, -0.013761632144451141357421875f, 0.075551323592662811279296875f, -0.0046676895581185817718505859375f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(-0.107438348233699798583984375f, -0.0007361780735664069652557373046875f, -0.042085416615009307861328125f, -0.08237516880035400390625f), float4(-0.10094375908374786376953125f, -0.24007876217365264892578125f, 0.13924705982208251953125f, -0.075268007814884185791015625f), float4(0.0115832202136516571044921875f, 0.154911220073699951171875f, 0.0069442675448954105377197265625f, -0.004242352209985256195068359375f), float4(0.11429785192012786865234375f, 0.02994726039469242095947265625f, -0.118299447000026702880859375f, -0.0410861186683177947998046875f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.073622055351734161376953125f, -0.064717195928096771240234375f, -0.002523161470890045166015625f, 0.1325647532939910888671875f), float4(0.20159898698329925537109375f, 0.0479778349399566650390625f, -0.102892331779003143310546875f, -0.18419134616851806640625f), float4(-0.008889519609510898590087890625f, 0.0594285763800144195556640625f, -0.053062655031681060791015625f, -0.027306310832500457763671875f), float4(0.145456850528717041015625f, -0.08686949312686920166015625f, 0.17454127967357635498046875f, 0.03544382750988006591796875f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.010146019048988819122314453125f, 0.06712567806243896484375f, 0.126146376132965087890625f, 0.02359091676771640777587890625f), float4(0.02575673721730709075927734375f, 0.066037468612194061279296875f, -0.17108094692230224609375f, -0.0617969892919063568115234375f), float4(0.0272412039339542388916015625f, -0.131968021392822265625f, 0.0434758663177490234375f, -0.0397494994103908538818359375f), float4(0.0530609190464019775390625f, 0.0356729030609130859375f, 0.047219283878803253173828125f, -0.1668014228343963623046875f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.079427815973758697509765625f, -0.06716479361057281494140625f, 0.19028602540493011474609375f, -0.1969468295574188232421875f), float4(-0.0615980923175811767578125f, -0.074711881577968597412109375f, 0.2117033898830413818359375f, 0.301402151584625244140625f), float4(-0.00233699730597436428070068359375f, 0.0468829683959484100341796875f, -0.1415411531925201416015625f, 0.19283507764339447021484375f), float4(0.13398580253124237060546875f, -0.091162793338298797607421875f, 0.15305162966251373291015625f, 0.0291083939373493194580078125f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.149021565914154052734375f, -0.0333915315568447113037109375f, -0.085320033133029937744140625f, -0.10736338794231414794921875f), float4(0.08702708780765533447265625f, 0.076075740158557891845703125f, -0.099558360874652862548828125f, -0.01658578403294086456298828125f), float4(-0.0300782136619091033935546875f, -0.0603747479617595672607421875f, -0.2854278981685638427734375f, 0.02441718988120555877685546875f), float4(0.0348779670894145965576171875f, 0.2099041044712066650390625f, 0.111257307231426239013671875f, -0.05907155573368072509765625f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.0843632519245147705078125f, 0.068930469453334808349609375f, -0.0453624427318572998046875f, -0.02237741090357303619384765625f), float4(-0.075838752090930938720703125f, -0.0348301827907562255859375f, -0.02400851808488368988037109375f, -0.2882328927516937255859375f), float4(-0.011109783314168453216552734375f, 0.101859994232654571533203125f, 0.091137714684009552001953125f, 0.00205655326135456562042236328125f), float4(-0.044729806482791900634765625f, -0.18168024718761444091796875f, 0.06946663558483123779296875f, 0.049941740930080413818359375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.1191517412662506103515625f, 0.08959646522998809814453125f, -0.1896581351757049560546875f, 0.01521823741495609283447265625f), float4(0.1350009441375732421875f, 0.19921366870403289794921875f, -0.00829820521175861358642578125f, 0.296503841876983642578125f), float4(-0.0494394265115261077880859375f, -0.275904238224029541015625f, 0.3616906702518463134765625f, -0.03058275394141674041748046875f), float4(0.0215119607746601104736328125f, 0.01991542614996433258056640625f, 0.0454339794814586639404296875f, 0.1612618863582611083984375f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.16202740371227264404296875f, -0.082645468413829803466796875f, 0.0824421346187591552734375f, -0.00344786443747580051422119140625f), float4(0.0988850891590118408203125f, -0.0034957858733832836151123046875f, -0.10724170506000518798828125f, -0.17729596793651580810546875f), float4(-0.0513864718377590179443359375f, 0.02052102982997894287109375f, -0.01950712315738201141357421875f, 0.0375749878585338592529296875f), float4(-0.16943450272083282470703125f, 0.178715884685516357421875f, -0.225103914737701416015625f, 0.0190498530864715576171875f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.1096224486827850341796875f, -0.13298730552196502685546875f, -0.0608553923666477203369140625f, 0.02594167552888393402099609375f), float4(-0.19536192715167999267578125f, -0.12036548554897308349609375f, -0.04313702881336212158203125f, -0.05291296541690826416015625f), float4(0.20854498445987701416015625f, 0.08341352641582489013671875f, 0.0086870677769184112548828125f, -0.204322755336761474609375f), float4(0.15677948296070098876953125f, -0.19000017642974853515625f, 0.0182120092213153839111328125f, -0.0415126048028469085693359375f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(0.012287526391446590423583984375f, -0.141803681850433349609375f, -0.09878845512866973876953125f, 0.02594908885657787322998046875f), float4(0.09442777931690216064453125f, 0.22476510703563690185546875f, -0.124532632529735565185546875f, 0.1043548285961151123046875f), float4(0.27460300922393798828125f, 0.0613305382430553436279296875f, 0.105061061680316925048828125f, 0.14727745950222015380859375f), float4(-0.04829977452754974365234375f, -0.08281968533992767333984375f, 0.073193587362766265869140625f, -0.047460354864597320556640625f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.070726536214351654052734375f, -0.034744016826152801513671875f, 0.07521428167819976806640625f, 0.070649154484272003173828125f), float4(-0.05958954989910125732421875f, -0.10023282468318939208984375f, -0.0106518380343914031982421875f, 0.0453928746283054351806640625f), float4(0.293027102947235107421875f, -0.0495235510170459747314453125f, 0.3112154901027679443359375f, 0.1172032654285430908203125f), float4(0.0251669622957706451416015625f, 0.11176861822605133056640625f, 0.067166589200496673583984375f, 0.07175864279270172119140625f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.01156096160411834716796875f, -0.1403206288814544677734375f, -0.17424704134464263916015625f, 0.07652749121189117431640625f), float4(-0.04220116138458251953125f, 0.052874274551868438720703125f, -0.00225693010725080966949462890625f, -0.0318435169756412506103515625f), float4(-0.07520101964473724365234375f, -0.13775803148746490478515625f, 0.244931697845458984375f, 0.0696587860584259033203125f), float4(0.0522803030908107757568359375f, -0.105218224227428436279296875f, 0.03574521839618682861328125f, -0.020500354468822479248046875f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.0879371166229248046875f, 0.2671234607696533203125f, 0.083156310021877288818359375f, 0.2381369173526763916015625f), float4(-0.0443902909755706787109375f, 0.031587064266204833984375f, 0.095611773431301116943359375f, -0.1338023841381072998046875f), float4(-0.2498215734958648681640625f, 0.317018449306488037109375f, -0.387543201446533203125f, 0.104872249066829681396484375f), float4(0.0920186936855316162109375f, -0.037252493202686309814453125f, -0.0069352188147604465484619140625f, -0.1465028226375579833984375f)));
[   1.766][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.077635325491428375244140625f, 0.1373229920864105224609375f, -0.0715630054473876953125f, 0.096517466008663177490234375f), float4(-0.15051986277103424072265625f, -0.111744403839111328125f, 0.0399685688316822052001953125f, -0.0526701249182224273681640625f), float4(-0.18196649849414825439453125f, 0.054554946720600128173828125f, -0.13774712383747100830078125f, -0.2006124556064605712890625f), float4(-0.0023742192424833774566650390625f, 0.15647804737091064453125f, -0.02412112616002559661865234375f, 0.075497724115848541259765625f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.007363277487456798553466796875f, -0.065352976322174072265625f, 0.03989599645137786865234375f, 0.20666868984699249267578125f), float4(0.13625241816043853759765625f, 0.0482300706207752227783203125f, -0.07135617733001708984375f, 0.0478790588676929473876953125f), float4(0.0138307400047779083251953125f, 0.1538212299346923828125f, -0.1551971435546875f, 0.0567217953503131866455078125f), float4(0.0619467459619045257568359375f, -0.058685101568698883056640625f, 0.02893435396254062652587890625f, -0.0226412899792194366455078125f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.19791881740093231201171875f, -0.11191092431545257568359375f, -0.010451343841850757598876953125f, -0.30566537380218505859375f), float4(-0.14162389934062957763671875f, -0.14523096382617950439453125f, 0.116883225739002227783203125f, -0.1824151575565338134765625f), float4(0.2680613994598388671875f, -0.184876263141632080078125f, 0.17472346127033233642578125f, 0.083466820418834686279296875f), float4(-0.14510358870029449462890625f, -0.02922919206321239471435546875f, -0.0058791418559849262237548828125f, 0.050247497856616973876953125f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.03015351854264736175537109375f, -0.0924691855907440185546875f, -0.0229129157960414886474609375f, 0.1020085513591766357421875f), float4(-0.042370319366455078125f, -0.0591776408255100250244140625f, 0.104796446859836578369140625f, -0.056194819509983062744140625f), float4(-0.18949396908283233642578125f, -0.01954724825918674468994140625f, 0.01386888884007930755615234375f, -0.15244759619235992431640625f), float4(0.1404897868633270263671875f, -0.0325214862823486328125f, 0.13229210674762725830078125f, 0.070972025394439697265625f)))) + float4(0.012053958140313625335693359375f, -4.6962362830527126789093017578125e-05f, 0.00200992263853549957275390625f, -0.03349460661411285400390625f);
[   1.767][d][vo/gpu/d3d11] [ 61] }
[   1.767][d][vo/gpu/d3d11] [ 62] 
[   1.767][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.767][d][vo/gpu/d3d11] [ 64] {
[   1.767][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.767][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.767][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.767][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.767][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.767][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.767][d][vo/gpu/d3d11] [ 71] }
[   1.767][d][vo/gpu] Resizing texture: 1920x800
[   1.768][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.770][v][vo/gpu/d3d11] Compiled a vertex shader in 3895us
[   1.770][v][vo/gpu/d3d11] shaderc: 1825us, SPIRV-Cross: 117us, D3DCompile: 1953us
[   1.770][d][vo/gpu/d3d11] GLSL source:
[   1.770][d][vo/gpu/d3d11] [  1] #version 450
[   1.770][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.770][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.770][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.770][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.770][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.770][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.770][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.770][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.770][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.770][d][vo/gpu/d3d11] [ 11] void main() {
[   1.770][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.770][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.770][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.770][d][vo/gpu/d3d11] [ 15] }
[   1.770][d][vo/gpu/d3d11] HLSL source:
[   1.770][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.770][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.770][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.770][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.770][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.770][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.770][d][vo/gpu/d3d11] [  7] 
[   1.770][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.770][d][vo/gpu/d3d11] [  9] {
[   1.770][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.770][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.770][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.770][d][vo/gpu/d3d11] [ 13] };
[   1.770][d][vo/gpu/d3d11] [ 14] 
[   1.770][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.770][d][vo/gpu/d3d11] [ 16] {
[   1.770][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.770][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.770][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.770][d][vo/gpu/d3d11] [ 20] };
[   1.770][d][vo/gpu/d3d11] [ 21] 
[   1.770][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.770][d][vo/gpu/d3d11] [ 23] {
[   1.770][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.770][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.770][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.770][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.770][d][vo/gpu/d3d11] [ 28] }
[   1.770][d][vo/gpu/d3d11] [ 29] 
[   1.770][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.770][d][vo/gpu/d3d11] [ 31] {
[   1.770][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.770][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.770][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.770][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.770][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.770][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.770][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.770][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.770][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.770][d][vo/gpu/d3d11] [ 41] }
[   1.805][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.857][v][vo/gpu/d3d11] Compiled a fragment shader in 86967us
[   1.857][v][vo/gpu/d3d11] shaderc: 34847us, SPIRV-Cross: 3942us, D3DCompile: 48178us
[   1.857][d][vo/gpu/d3d11] GLSL source:
[   1.857][d][vo/gpu/d3d11] [  1] #version 450
[   1.857][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.857][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.857][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.857][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.857][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.857][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.857][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.857][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.857][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.857][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.857][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.857][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.857][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.857][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.857][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.857][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.857][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.857][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.857][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.857][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.857][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.857][d][vo/gpu/d3d11] [ 23] };
[   1.857][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.857][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.857][d][vo/gpu/d3d11] [ 26] #define conv2d_3_tf_raw texture0
[   1.857][d][vo/gpu/d3d11] [ 27] #define conv2d_3_tf_pos texcoord0
[   1.857][d][vo/gpu/d3d11] [ 28] #define conv2d_3_tf_size texture_size0
[   1.857][d][vo/gpu/d3d11] [ 29] #define conv2d_3_tf_rot texture_rot0
[   1.857][d][vo/gpu/d3d11] [ 30] #define conv2d_3_tf_off texture_off0
[   1.857][d][vo/gpu/d3d11] [ 31] #define conv2d_3_tf_pt pixel_size0
[   1.857][d][vo/gpu/d3d11] [ 32] #define conv2d_3_tf_map texmap0
[   1.857][d][vo/gpu/d3d11] [ 33] #define conv2d_3_tf_mul 1.000000
[   1.857][d][vo/gpu/d3d11] [ 34] #define conv2d_3_tf_tex(pos) (conv2d_3_tf_mul * vec4(texture(conv2d_3_tf_raw, pos)).rgba)
[   1.857][d][vo/gpu/d3d11] [ 35] #define conv2d_3_tf_gather(pos, c) (conv2d_3_tf_mul * vec4(textureGather(conv2d_3_tf_raw, pos, c)))
[   1.857][d][vo/gpu/d3d11] [ 36] #define conv2d_3_tf_texOff(off) conv2d_3_tf_tex(conv2d_3_tf_pos + conv2d_3_tf_pt * vec2(off))
[   1.857][d][vo/gpu/d3d11] [ 37] #define conv2d_3_tf1_raw texture1
[   1.857][d][vo/gpu/d3d11] [ 38] #define conv2d_3_tf1_pos texcoord1
[   1.857][d][vo/gpu/d3d11] [ 39] #define conv2d_3_tf1_size texture_size1
[   1.857][d][vo/gpu/d3d11] [ 40] #define conv2d_3_tf1_rot texture_rot1
[   1.857][d][vo/gpu/d3d11] [ 41] #define conv2d_3_tf1_off texture_off1
[   1.857][d][vo/gpu/d3d11] [ 42] #define conv2d_3_tf1_pt pixel_size1
[   1.857][d][vo/gpu/d3d11] [ 43] #define conv2d_3_tf1_map texmap1
[   1.857][d][vo/gpu/d3d11] [ 44] #define conv2d_3_tf1_mul 1.000000
[   1.857][d][vo/gpu/d3d11] [ 45] #define conv2d_3_tf1_tex(pos) (conv2d_3_tf1_mul * vec4(texture(conv2d_3_tf1_raw, pos)).rgba)
[   1.857][d][vo/gpu/d3d11] [ 46] #define conv2d_3_tf1_gather(pos, c) (conv2d_3_tf1_mul * vec4(textureGather(conv2d_3_tf1_raw, pos, c)))
[   1.857][d][vo/gpu/d3d11] [ 47] #define conv2d_3_tf1_texOff(off) conv2d_3_tf1_tex(conv2d_3_tf1_pos + conv2d_3_tf1_pt * vec2(off))
[   1.857][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.857][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.857][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.857][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.857][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.857][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.06738501, 0.034009207, -0.21538448, 0.14296548, 0.12896985, -0.23526315, -0.08848608, 0.019602662, 0.14937137, 0.11353096, 0.11884168, -0.016765572, 0.030985225, 0.046430565, 0.06614828, -0.19202724) * go_0(-1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.10326068, 0.11014975, 0.17069744, -0.21474148, 0.16761585, 0.13434832, -0.101021074, 0.006307025, 0.07478008, -0.1060066, 0.035315692, 0.033488914, -0.24906659, 0.06269967, 0.11120735, -0.040928528) * go_0(-1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 55]     result += mat4(0.09334615, 0.057705753, 0.12213245, -0.06402275, 0.30694544, 0.034585163, 0.20345578, 0.07489286, 0.07483618, -0.14240396, 0.034846418, -0.03811241, 0.010882573, 0.13204294, 0.017563924, -0.047203008) * go_0(-1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.21673942, -0.024010994, -0.10238504, -0.041160326, 0.06838163, -0.20950818, 0.06526309, -0.079094924, 0.02208821, -0.28130978, 0.086275116, -0.089067616, 0.12133826, -0.062600106, -0.020521903, -0.07654401) * go_0(0.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.03055029, -0.15683146, -0.20331301, -0.06252028, 0.13350682, 0.20338707, 0.038425338, 0.1581342, -0.27322498, -0.14999662, -0.16681097, 0.0971585, -0.20014858, -0.081635274, -0.0781877, -0.20625232) * go_0(0.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 58]     result += mat4(0.38375977, -0.019825654, 0.1886721, 0.22616312, 0.3402173, 0.1825304, -0.05531195, 0.30973226, -0.2676023, 0.14413352, 0.021706983, 0.01732799, 0.23466855, -0.13805965, 0.22570935, 0.018103868) * go_0(0.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.15169825, 0.0270689, -0.2503316, 0.17289825, -0.16437647, 0.039233048, -0.35572487, -0.048393793, 0.19270042, 0.24260359, 0.12041881, -0.0009793913, 0.11656858, 0.11007414, -0.0757491, 0.047933612) * go_0(1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.18657999, -0.11252566, -0.05237504, -0.07368097, 0.13882741, -0.13710637, -0.006996468, -0.062354874, 0.23452504, 0.15333645, -0.0022776406, -0.17910439, 0.03629509, -0.16264829, -0.010011833, -0.15313338) * go_0(1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.060544558, -0.04913478, -0.061717357, 0.02323648, 0.28739056, -0.07434013, 0.19110644, 0.100050166, 0.0073363045, 0.08185653, -0.024797903, -0.14424153, -0.20838726, 0.16154376, -0.048517212, -0.025453888) * go_0(1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 62]     result += mat4(0.14975396, -0.13142908, 0.36210674, -0.054021083, -0.10632155, 0.045697935, -0.18946633, 0.02228141, -0.08919603, 0.09800842, -0.17634438, 0.09512711, -0.03425503, -0.12298555, -0.05354435, -0.17112055) * go_1(-1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 63]     result += mat4(0.09958265, -0.057276618, -0.16262266, -0.06415915, 0.14579074, -0.36784375, 0.08034197, -0.04537706, 0.005460582, 0.22313322, 0.07382161, 0.014990379, 0.044636846, -0.2811128, -0.22621547, -0.06044004) * go_1(-1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 64]     result += mat4(0.10569276, -0.03738662, 0.16100396, 0.058593616, -0.048862137, -0.08796426, 0.20101094, -0.11039573, 0.17196764, -0.04601554, 0.008571281, -0.073729075, 0.051433694, -0.051276565, 0.087334655, -0.0360379) * go_1(-1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 65]     result += mat4(0.011119538, -0.28781965, 0.28637868, -0.1742508, -0.07121849, 0.10379717, 0.012615981, -0.029563965, -0.18678424, 0.05291095, 0.039143506, -0.028248642, -0.014103922, 0.029155696, 0.10433492, 0.16305852) * go_1(0.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.2231037, -0.13697462, -0.29124337, 0.08519773, 0.15893684, -0.17763218, 0.06950923, 0.34361118, -0.024844287, 0.044008408, -0.033844844, -0.086971916, -0.07884748, 0.2543499, 0.056884114, 0.10068364) * go_1(0.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.07710048, -0.23218372, 0.04346047, 0.21769643, 0.06473219, -0.18066105, -0.2511205, 0.15309611, 0.04535977, 0.16450433, 0.10846344, 0.0016952346, -0.010874939, 0.28966382, -0.121990964, 0.12956186) * go_1(0.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.007910202, 0.17766511, 0.14364475, 0.1016258, 0.0051045395, 0.18691733, 0.005813767, -0.0070582186, 0.019418601, -0.1604435, 0.016088275, -0.18265302, -0.15719391, -0.17369832, -0.036745597, -0.19647408) * go_1(1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 69]     result += mat4(0.08938396, -0.0073808245, 0.11225727, -0.012303106, 0.096785046, 0.030483445, 0.027719889, -0.052584838, -0.14887555, -0.03422243, 0.12646855, -0.1722482, 0.010239037, 0.06406088, -0.20053658, 0.01964698) * go_1(1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.120734036, -0.12450362, -0.06582111, 0.1639675, -0.19787048, -0.08049789, -0.014257596, 0.058436662, -0.0009387449, -0.08698089, -0.017400503, 0.06295286, 0.09890349, -0.057190523, -0.103520766, -0.04207548) * go_1(1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.0118413875, -0.031288836, 0.09749554, -0.012266401, -0.07998591, 0.22615653, -0.06207416, 0.03257896, -0.076378696, -0.079426095, -0.13968349, -0.15423697, -0.1091681, -0.02893125, -0.032659534, -0.063735925) * go_2(-1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 72]     result += mat4(0.119372696, 0.013176554, -0.029381052, 0.21919228, 0.045041792, 0.24844484, 0.26363325, 0.08480674, 0.087083444, 0.11984778, -0.088715754, 0.06421046, 0.05225977, -0.05140334, -0.055052705, -0.049854077) * go_2(-1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 73]     result += mat4(0.0035781674, 0.0861361, -0.07675145, -0.056479637, 0.16973391, -0.12113791, 0.10729832, -0.03773517, 0.058618728, 0.12148276, 0.17260705, -0.06968724, 0.076358154, -0.15307103, 0.17700425, -0.13467014) * go_2(-1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.02752418, -0.06366472, -0.025610954, 0.0013539721, -0.06465272, 0.0806373, -0.07336035, 0.10114861, 0.0041146413, 0.15878421, -0.044668555, -0.12150811, -0.1071482, -0.05086587, 0.18589285, 0.05065092) * go_2(0.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 75]     result += mat4(0.07200056, 0.021739854, 0.29476613, -0.08475931, 0.15018553, -0.07886365, 0.36336347, -0.020576432, 0.25866082, -0.059272554, 0.054249667, -0.17822553, 0.1755872, 0.3244387, -0.39173844, 0.33894604) * go_2(0.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.11570926, 0.1342677, -0.19511898, 0.0075454637, -0.01890476, -0.14239742, 0.18921931, 0.033990458, 0.31306365, -0.006998358, 0.029190077, -0.005679954, -0.15341778, 0.07766778, -0.25691047, -0.0964161) * go_2(0.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 77]     result += mat4(0.019746238, 0.0021332854, -0.00879096, -0.1338671, -0.0001600663, -0.29465106, 0.0867611, -0.114963025, 0.07874301, -0.012734178, -0.11124061, -0.010926616, -0.04941506, -0.07516841, 0.116663, -0.29018974) * go_2(1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.01651721, 0.05955898, 0.023618208, 0.098695934, 0.018553663, -0.054378513, 0.1436929, 0.1693743, -0.27483663, 0.029127488, 0.09619316, -0.06109113, -0.08619361, 0.09315214, -0.02478657, 0.18544984) * go_2(1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 79]     result += mat4(0.09570196, -0.016528936, -0.1559397, 0.14312246, 0.04029428, 0.08773151, -0.043646842, 0.17894371, -0.082413055, 0.0027082344, -0.100171275, 0.01547501, 0.18122818, -0.11933676, 0.26404107, -0.3169703) * go_2(1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.12073344, 0.08683522, -0.09249099, 0.058786053, -0.14480567, -0.121013954, 0.033335857, 0.009353379, -0.055087596, -0.13002734, 0.08890566, 0.05508963, -0.0075715426, -0.15936922, -0.03968994, -0.1690259) * go_3(-1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 81]     result += mat4(0.2011206, 0.23898427, 0.23656492, 0.1287573, 0.14850396, 0.40532517, -0.107408255, 0.40119782, 0.099813245, -0.03830304, 0.101520434, -0.026478073, -0.048469637, 0.106440455, 0.056632314, -0.17825997) * go_3(-1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.076735444, 0.05965795, -0.0052469415, -0.21785147, 0.11887833, 0.067560315, 0.051149055, 0.23626682, -0.1297049, -0.035512198, 0.20352256, -0.025064934, 0.04958706, 0.0454198, 0.0113334535, 0.0417486) * go_3(-1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.09055751, 0.033915352, -0.21836667, 0.22006813, -0.099022895, 0.11720966, -0.15686816, -0.13586599, -0.094427735, -0.08831514, -0.06182928, 0.09213704, -0.03642064, 0.18129414, -0.012926811, 0.12179882) * go_3(0.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 84]     result += mat4(0.19389409, 0.09512252, 0.14768016, -0.16623649, -0.031052284, -0.026814984, 0.106168024, -0.2026781, -0.04581419, -0.0016849053, -0.04101923, 0.038959503, -0.011938445, 0.20096186, -0.26666564, 0.4824324) * go_3(0.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 85]     result += mat4(0.17727576, 0.07309147, 0.12131863, -0.163096, 0.17225246, 0.26256254, 0.27685758, 0.09094053, 0.029605515, -0.20217367, 0.047564875, 0.043115832, 0.15089568, -0.09670934, 0.24131384, 0.03337442) * go_3(0.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.34192136, 0.12063195, -0.31159517, 0.04170889, -0.30147067, -0.21330686, -0.1514457, -0.121126845, 0.04409098, 9.2206596e-05, 0.027680017, 0.03230512, -0.27993527, -0.093485355, 0.07568645, -0.23585452) * go_3(1.0, -1.0);
[   1.857][d][vo/gpu/d3d11] [ 87]     result += mat4(0.0537712, -0.20847629, 0.1740093, -0.013894753, -0.32719997, -0.059484575, -0.006098233, -0.10336451, -0.14706188, -0.07424865, -0.07045905, 0.17093194, -0.22147557, 0.09086218, -0.11033544, -0.05306482) * go_3(1.0, 0.0);
[   1.857][d][vo/gpu/d3d11] [ 88]     result += mat4(0.00489003, -0.11509064, -0.021005848, 0.16637677, -0.089347586, 0.17545725, -0.17313693, 0.13742085, -0.14577347, 0.07951095, -0.092139855, 0.017118992, -0.053472433, 0.079414465, 0.0330263, -0.11189824) * go_3(1.0, 1.0);
[   1.857][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.034743138, 0.012946433, -0.082333155, 0.07721756);
[   1.857][d][vo/gpu/d3d11] [ 90]     return result;
[   1.858][d][vo/gpu/d3d11] [ 91] }
[   1.858][d][vo/gpu/d3d11] [ 92] void main() {
[   1.858][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.858][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.858][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.858][d][vo/gpu/d3d11] [ 96] }
[   1.858][d][vo/gpu/d3d11] HLSL source:
[   1.858][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.858][d][vo/gpu/d3d11] [  2] {
[   1.858][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.858][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.858][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.858][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.858][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.858][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.858][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.858][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.858][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.858][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.858][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.858][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.858][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.858][d][vo/gpu/d3d11] [ 16] };
[   1.858][d][vo/gpu/d3d11] [ 17] 
[   1.858][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.858][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.858][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.858][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.858][d][vo/gpu/d3d11] [ 22] 
[   1.858][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.858][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.858][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.858][d][vo/gpu/d3d11] [ 26] 
[   1.858][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.858][d][vo/gpu/d3d11] [ 28] {
[   1.858][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.858][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.858][d][vo/gpu/d3d11] [ 31] };
[   1.858][d][vo/gpu/d3d11] [ 32] 
[   1.858][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.858][d][vo/gpu/d3d11] [ 34] {
[   1.858][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.858][d][vo/gpu/d3d11] [ 36] };
[   1.858][d][vo/gpu/d3d11] [ 37] 
[   1.858][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.858][d][vo/gpu/d3d11] [ 39] {
[   1.858][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.858][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.067385010421276092529296875f, 0.0340092070400714874267578125f, -0.21538448333740234375f, 0.14296548068523406982421875f), float4(0.128969848155975341796875f, -0.23526315391063690185546875f, -0.088486082851886749267578125f, 0.01960266195237636566162109375f), float4(0.14937137067317962646484375f, 0.1135309636592864990234375f, 0.1188416779041290283203125f, -0.016765572130680084228515625f), float4(0.0309852249920368194580078125f, 0.046430565416812896728515625f, 0.066148281097412109375f, -0.1920272409915924072265625f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.10326068103313446044921875f, 0.110149748623371124267578125f, 0.17069743573665618896484375f, -0.21474148333072662353515625f), float4(0.16761584579944610595703125f, 0.13434831798076629638671875f, -0.101021073758602142333984375f, 0.0063070249743759632110595703125f), float4(0.0747800767421722412109375f, -0.106006599962711334228515625f, 0.035315692424774169921875f, 0.03348891437053680419921875f), float4(-0.2490665912628173828125f, 0.062699668109416961669921875f, 0.11120735108852386474609375f, -0.04092852771282196044921875f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.0933461487293243408203125f, 0.057705752551555633544921875f, 0.1221324503421783447265625f, -0.0640227496623992919921875f), float4(0.30694544315338134765625f, 0.03458516299724578857421875f, 0.2034557759761810302734375f, 0.07489286363124847412109375f), float4(0.07483617961406707763671875f, -0.14240396022796630859375f, 0.034846417605876922607421875f, -0.038112409412860870361328125f), float4(0.01088257320225238800048828125f, 0.132042944431304931640625f, 0.01756392419338226318359375f, -0.0472030080854892730712890625f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.2167394161224365234375f, -0.024010993540287017822265625f, -0.102385036647319793701171875f, -0.0411603264510631561279296875f), float4(0.068381629884243011474609375f, -0.2095081806182861328125f, 0.065263092517852783203125f, -0.079094924032688140869140625f), float4(0.02208820916712284088134765625f, -0.281309783458709716796875f, 0.08627511560916900634765625f, -0.089067615568637847900390625f), float4(0.12133826315402984619140625f, -0.0626001060009002685546875f, -0.02052190341055393218994140625f, -0.076544009149074554443359375f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.0305502898991107940673828125f, -0.15683145821094512939453125f, -0.20331300795078277587890625f, -0.06252028048038482666015625f), float4(0.13350681960582733154296875f, 0.20338706672191619873046875f, 0.0384253375232219696044921875f, 0.15813420712947845458984375f), float4(-0.2732249796390533447265625f, -0.14999662339687347412109375f, -0.16681097447872161865234375f, 0.097158499062061309814453125f), float4(-0.20014858245849609375f, -0.081635273993015289306640625f, -0.078187696635723114013671875f, -0.20625232160091400146484375f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.3837597668170928955078125f, -0.01982565410435199737548828125f, 0.1886720955371856689453125f, 0.2261631190776824951171875f), float4(0.340217292308807373046875f, 0.18253040313720703125f, -0.0553119517862796783447265625f, 0.309732258319854736328125f), float4(-0.2676022946834564208984375f, 0.14413352310657501220703125f, 0.02170698344707489013671875f, 0.0173279903829097747802734375f), float4(0.234668552875518798828125f, -0.1380596458911895751953125f, 0.2257093489170074462890625f, 0.0181038677692413330078125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.15169824659824371337890625f, 0.02706889994442462921142578125f, -0.2503316104412078857421875f, 0.17289824783802032470703125f), float4(-0.1643764674663543701171875f, 0.0392330475151538848876953125f, -0.355724871158599853515625f, -0.048393793404102325439453125f), float4(0.1927004158496856689453125f, 0.24260358512401580810546875f, 0.120418809354305267333984375f, -0.000979391275905072689056396484375f), float4(0.11656858026981353759765625f, 0.110074140131473541259765625f, -0.075749099254608154296875f, 0.0479336120188236236572265625f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.18657998740673065185546875f, -0.11252565681934356689453125f, -0.052375040948390960693359375f, -0.0736809670925140380859375f), float4(0.1388274133205413818359375f, -0.13710637390613555908203125f, -0.0069964681752026081085205078125f, -0.0623548738658428192138671875f), float4(0.23452503979206085205078125f, 0.15333645045757293701171875f, -0.00227764062583446502685546875f, -0.179104387760162353515625f), float4(0.0362950898706912994384765625f, -0.1626482903957366943359375f, -0.0100118331611156463623046875f, -0.15313337743282318115234375f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.060544557869434356689453125f, -0.0491347797214984893798828125f, -0.0617173574864864349365234375f, 0.0232364796102046966552734375f), float4(0.2873905599117279052734375f, -0.074340127408504486083984375f, 0.19110643863677978515625f, 0.10005016624927520751953125f), float4(0.007336304523050785064697265625f, 0.081856526434421539306640625f, -0.02479790337383747100830078125f, -0.14424152672290802001953125f), float4(-0.20838725566864013671875f, 0.1615437567234039306640625f, -0.04851721227169036865234375f, -0.025453887879848480224609375f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.1497539579868316650390625f, -0.13142907619476318359375f, 0.362106740474700927734375f, -0.054021082818508148193359375f), float4(-0.106321550905704498291015625f, 0.045697934925556182861328125f, -0.1894663274288177490234375f, 0.02228141017258167266845703125f), float4(-0.089196026325225830078125f, 0.098008416593074798583984375f, -0.17634437978267669677734375f, 0.095127113163471221923828125f), float4(-0.0342550314962863922119140625f, -0.122985549271106719970703125f, -0.053544349968433380126953125f, -0.1711205542087554931640625f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.099582649767398834228515625f, -0.0572766177356243133544921875f, -0.1626226603984832763671875f, -0.064159147441387176513671875f), float4(0.14579074084758758544921875f, -0.36784374713897705078125f, 0.080341972410678863525390625f, -0.04537706077098846435546875f), float4(0.0054605822078883647918701171875f, 0.22313322126865386962890625f, 0.073821611702442169189453125f, 0.014990379102528095245361328125f), float4(0.04463684558868408203125f, -0.28111279010772705078125f, -0.22621546685695648193359375f, -0.060440041124820709228515625f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.10569275915622711181640625f, -0.037386618554592132568359375f, 0.16100396215915679931640625f, 0.05859361588954925537109375f), float4(-0.048862136900424957275390625f, -0.087964259088039398193359375f, 0.2010109424591064453125f, -0.110395729541778564453125f), float4(0.17196764051914215087890625f, -0.046015538275241851806640625f, 0.008571281097829341888427734375f, -0.073729075491428375244140625f), float4(0.0514336936175823211669921875f, -0.05127656459808349609375f, 0.087334655225276947021484375f, -0.036037899553775787353515625f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(0.011119537986814975738525390625f, -0.2878196537494659423828125f, 0.286378681659698486328125f, -0.17425079643726348876953125f), float4(-0.0712184906005859375f, 0.1037971675395965576171875f, 0.01261598058044910430908203125f, -0.02956396527588367462158203125f), float4(-0.1867842376232147216796875f, 0.0529109500348567962646484375f, 0.0391435064375400543212890625f, -0.0282486416399478912353515625f), float4(-0.014103922061622142791748046875f, 0.02915569581091403961181640625f, 0.1043349206447601318359375f, 0.1630585193634033203125f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.223103702068328857421875f, -0.13697461783885955810546875f, -0.291243374347686767578125f, 0.08519773185253143310546875f), float4(0.15893684327602386474609375f, -0.1776321828365325927734375f, 0.069509230554103851318359375f, 0.343611180782318115234375f), float4(-0.02484428696334362030029296875f, 0.0440084077417850494384765625f, -0.03384484350681304931640625f, -0.086971916258335113525390625f), float4(-0.07884748280048370361328125f, 0.254349887371063232421875f, 0.0568841136991977691650390625f, 0.100683636963367462158203125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.077100478112697601318359375f, -0.2321837246417999267578125f, 0.0434604696929454803466796875f, 0.2176964282989501953125f), float4(0.064732186496257781982421875f, -0.1806610524654388427734375f, -0.251120507717132568359375f, 0.1530961096286773681640625f), float4(0.0453597716987133026123046875f, 0.16450433433055877685546875f, 0.1084634363651275634765625f, 0.00169523456133902072906494140625f), float4(-0.010874939151108264923095703125f, 0.2896638214588165283203125f, -0.12199096381664276123046875f, 0.12956185638904571533203125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.007910202257335186004638671875f, 0.17766511440277099609375f, 0.143644750118255615234375f, 0.10162580013275146484375f), float4(0.0051045394502580165863037109375f, 0.1869173347949981689453125f, 0.005813767202198505401611328125f, -0.0070582185871899127960205078125f), float4(0.0194186009466648101806640625f, -0.16044349968433380126953125f, 0.01608827523887157440185546875f, -0.18265302479267120361328125f), float4(-0.15719391405582427978515625f, -0.17369832098484039306640625f, -0.0367455966770648956298828125f, -0.1964740753173828125f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.08938395977020263671875f, -0.0073808245360851287841796875f, 0.1122572720050811767578125f, -0.012303105555474758148193359375f), float4(0.096785046160221099853515625f, 0.03048344515264034271240234375f, 0.0277198888361454010009765625f, -0.0525848381221294403076171875f), float4(-0.14887554943561553955078125f, -0.034222431480884552001953125f, 0.12646855413913726806640625f, -0.17224819958209991455078125f), float4(0.01023903675377368927001953125f, 0.06406088173389434814453125f, -0.2005365788936614990234375f, 0.019646979868412017822265625f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.120734035968780517578125f, -0.124503619968891143798828125f, -0.065821111202239990234375f, 0.16396750509738922119140625f), float4(-0.19787047803401947021484375f, -0.0804978907108306884765625f, -0.014257595874369144439697265625f, 0.0584366619586944580078125f), float4(-0.0009387449244968593120574951171875f, -0.086980886757373809814453125f, -0.0174005031585693359375f, 0.06295286118984222412109375f), float4(0.09890349209308624267578125f, -0.05719052255153656005859375f, -0.10352076590061187744140625f, -0.0420754812657833099365234375f)));
[   1.858][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.011841387487947940826416015625f, -0.0312888361513614654541015625f, 0.09749554097652435302734375f, -0.0122664012014865875244140625f), float4(-0.079985909163951873779296875f, 0.226156532764434814453125f, -0.0620741583406925201416015625f, 0.03257896006107330322265625f), float4(-0.076378695666790008544921875f, -0.07942609488964080810546875f, -0.1396834850311279296875f, -0.154236972332000732421875f), float4(-0.10916809737682342529296875f, -0.02893125079572200775146484375f, -0.0326595343649387359619140625f, -0.063735924661159515380859375f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.1193726956844329833984375f, 0.013176553882658481597900390625f, -0.02938105165958404541015625f, 0.21919228136539459228515625f), float4(0.045041792094707489013671875f, 0.24844484031200408935546875f, 0.263633251190185546875f, 0.084806740283966064453125f), float4(0.08708344399929046630859375f, 0.119847781956195831298828125f, -0.088715754449367523193359375f, 0.06421045958995819091796875f), float4(0.0522597692906856536865234375f, -0.0514033399522304534912109375f, -0.055052705109119415283203125f, -0.049854077398777008056640625f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.0035781674087047576904296875f, 0.0861361026763916015625f, -0.076751448214054107666015625f, -0.0564796365797519683837890625f), float4(0.1697339117527008056640625f, -0.121137909591197967529296875f, 0.107298322021961212158203125f, -0.037735171616077423095703125f), float4(0.0586187280714511871337890625f, 0.1214827597141265869140625f, 0.17260704934597015380859375f, -0.069687239825725555419921875f), float4(0.07635815441608428955078125f, -0.15307103097438812255859375f, 0.1770042479038238525390625f, -0.13467013835906982421875f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.027524180710315704345703125f, -0.06366471946239471435546875f, -0.0256109535694122314453125f, 0.0013539721257984638214111328125f), float4(-0.064652718603610992431640625f, 0.080637298524379730224609375f, -0.0733603537082672119140625f, 0.101148612797260284423828125f), float4(0.0041146413423120975494384765625f, 0.158784210681915283203125f, -0.04466855525970458984375f, -0.12150810658931732177734375f), float4(-0.1071482002735137939453125f, -0.0508658699691295623779296875f, 0.1858928501605987548828125f, 0.0506509207189083099365234375f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.072000563144683837890625f, 0.02173985354602336883544921875f, 0.294766128063201904296875f, -0.08475930988788604736328125f), float4(0.150185525417327880859375f, -0.0788636505603790283203125f, 0.3633634746074676513671875f, -0.02057643234729766845703125f), float4(0.2586608231067657470703125f, -0.0592725537717342376708984375f, 0.054249666631221771240234375f, -0.17822553217411041259765625f), float4(0.1755872070789337158203125f, 0.32443869113922119140625f, -0.3917384445667266845703125f, 0.338946044445037841796875f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.11570926010608673095703125f, 0.13426770269870758056640625f, -0.19511897861957550048828125f, 0.007545463740825653076171875f), float4(-0.01890476047992706298828125f, -0.14239741861820220947265625f, 0.18921931087970733642578125f, 0.03399045765399932861328125f), float4(0.3130636513233184814453125f, -0.0069983578287065029144287109375f, 0.02919007651507854461669921875f, -0.0056799538433551788330078125f), float4(-0.15341778099536895751953125f, 0.077667780220508575439453125f, -0.2569104731082916259765625f, -0.09641610085964202880859375f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.01974623836576938629150390625f, 0.00213328539393842220306396484375f, -0.008790959604084491729736328125f, -0.13386709988117218017578125f), float4(-0.000160066294483840465545654296875f, -0.2946510612964630126953125f, 0.08676110208034515380859375f, -0.1149630248546600341796875f), float4(0.0787430107593536376953125f, -0.0127341784536838531494140625f, -0.11124061048030853271484375f, -0.010926616378128528594970703125f), float4(-0.049415059387683868408203125f, -0.075168408453464508056640625f, 0.116663001477718353271484375f, -0.2901897430419921875f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.0165172107517719268798828125f, 0.059558980166912078857421875f, 0.02361820824444293975830078125f, 0.098695933818817138671875f), float4(0.0185536630451679229736328125f, -0.0543785132467746734619140625f, 0.14369289577007293701171875f, 0.16937430202960968017578125f), float4(-0.2748366296291351318359375f, 0.02912748791277408599853515625f, 0.096193157136440277099609375f, -0.0610911287367343902587890625f), float4(-0.086193613708019256591796875f, 0.093152143061161041259765625f, -0.024786569178104400634765625f, 0.1854498386383056640625f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.0957019627094268798828125f, -0.01652893610298633575439453125f, -0.15593969821929931640625f, 0.1431224644184112548828125f), float4(0.0402942784130573272705078125f, 0.0877315104007720947265625f, -0.0436468422412872314453125f, 0.17894370853900909423828125f), float4(-0.082413055002689361572265625f, 0.0027082343585789203643798828125f, -0.100171275436878204345703125f, 0.015475009568035602569580078125f), float4(0.18122817575931549072265625f, -0.119336761534214019775390625f, 0.26404106616973876953125f, -0.316970288753509521484375f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.120733439922332763671875f, 0.08683522045612335205078125f, -0.092490993440151214599609375f, 0.0587860532104969024658203125f), float4(-0.1448056697845458984375f, -0.12101395428180694580078125f, 0.033335857093334197998046875f, 0.00935337878763675689697265625f), float4(-0.0550875961780548095703125f, -0.13002733886241912841796875f, 0.0889056622982025146484375f, 0.055089630186557769775390625f), float4(-0.00757154263556003570556640625f, -0.15936921536922454833984375f, -0.0396899394690990447998046875f, -0.169025897979736328125f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(0.20112060010433197021484375f, 0.23898427188396453857421875f, 0.23656491935253143310546875f, 0.128757297992706298828125f), float4(0.148503959178924560546875f, 0.4053251743316650390625f, -0.1074082553386688232421875f, 0.4011978209018707275390625f), float4(0.099813245236873626708984375f, -0.038303039968013763427734375f, 0.10152043402194976806640625f, -0.02647807262837886810302734375f), float4(-0.0484696365892887115478515625f, 0.1064404547214508056640625f, 0.0566323138773441314697265625f, -0.17825996875762939453125f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.076735444366931915283203125f, 0.0596579499542713165283203125f, -0.0052469414658844470977783203125f, -0.21785147488117218017578125f), float4(0.118878327310085296630859375f, 0.06756031513214111328125f, 0.05114905536174774169921875f, 0.2362668216228485107421875f), float4(-0.129704892635345458984375f, -0.0355121977627277374267578125f, 0.20352256298065185546875f, -0.0250649340450763702392578125f), float4(0.0495870597660541534423828125f, 0.0454198010265827178955078125f, 0.011333453468978404998779296875f, 0.04174859821796417236328125f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.090557508170604705810546875f, 0.0339153520762920379638671875f, -0.21836666762828826904296875f, 0.2200681269168853759765625f), float4(-0.0990228950977325439453125f, 0.11720965802669525146484375f, -0.156868159770965576171875f, -0.135865986347198486328125f), float4(-0.0944277346134185791015625f, -0.088315136730670928955078125f, -0.0618292801082134246826171875f, 0.092137038707733154296875f), float4(-0.0364206396043300628662109375f, 0.181294143199920654296875f, -0.01292681135237216949462890625f, 0.121798820793628692626953125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.193894088268280029296875f, 0.095122523605823516845703125f, 0.14768016338348388671875f, -0.1662364900112152099609375f), float4(-0.031052283942699432373046875f, -0.02681498415768146514892578125f, 0.106168024241924285888671875f, -0.20267809927463531494140625f), float4(-0.0458141900599002838134765625f, -0.00168490526266396045684814453125f, -0.0410192310810089111328125f, 0.038959503173828125f), float4(-0.011938445270061492919921875f, 0.2009618580341339111328125f, -0.266665637493133544921875f, 0.4824323952198028564453125f)));
[   1.859][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.17727576196193695068359375f, 0.073091469705104827880859375f, 0.121318630874156951904296875f, -0.16309599578380584716796875f), float4(0.17225246131420135498046875f, 0.2625625431537628173828125f, 0.2768575847148895263671875f, 0.090940527617931365966796875f), float4(0.029605515301227569580078125f, -0.20217366516590118408203125f, 0.0475648753345012664794921875f, 0.043115831911563873291015625f), float4(0.1508956849575042724609375f, -0.0967093408107757568359375f, 0.2413138449192047119140625f, 0.033374421298503875732421875f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.3419213593006134033203125f, 0.12063194811344146728515625f, -0.3115951716899871826171875f, 0.0417088903486728668212890625f), float4(-0.3014706671237945556640625f, -0.21330685913562774658203125f, -0.15144570171833038330078125f, -0.12112684547901153564453125f), float4(0.044090978801250457763671875f, 9.2206595581956207752227783203125e-05f, 0.027680017054080963134765625f, 0.03230512142181396484375f), float4(-0.2799352705478668212890625f, -0.093485355377197265625f, 0.075686447322368621826171875f, -0.23585452139377593994140625f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.0537712015211582183837890625f, -0.20847629010677337646484375f, 0.1740092933177947998046875f, -0.013894752599298954010009765625f), float4(-0.3271999657154083251953125f, -0.0594845749437808990478515625f, -0.006098233163356781005859375f, -0.10336451232433319091796875f), float4(-0.147061884403228759765625f, -0.074248649179935455322265625f, -0.07045905292034149169921875f, 0.17093193531036376953125f), float4(-0.2214755713939666748046875f, 0.090862177312374114990234375f, -0.1103354394435882568359375f, -0.0530648194253444671630859375f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.0048900297842919826507568359375f, -0.1150906383991241455078125f, -0.02100584842264652252197265625f, 0.166376769542694091796875f), float4(-0.08934758603572845458984375f, 0.17545725405216217041015625f, -0.17313693463802337646484375f, 0.13742084801197052001953125f), float4(-0.145773470401763916015625f, 0.079510949552059173583984375f, -0.09213985502719879150390625f, 0.01711899228394031524658203125f), float4(-0.0534724332392215728759765625f, 0.079414464533329010009765625f, 0.033026300370693206787109375f, -0.111898243427276611328125f)))) + float4(-0.034743137657642364501953125f, 0.012946433387696743011474609375f, -0.082333154976367950439453125f, 0.077217556536197662353515625f);
[   1.859][d][vo/gpu/d3d11] [ 61] }
[   1.859][d][vo/gpu/d3d11] [ 62] 
[   1.859][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.859][d][vo/gpu/d3d11] [ 64] {
[   1.859][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.859][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.859][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.859][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.859][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.859][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.859][d][vo/gpu/d3d11] [ 71] }
[   1.859][d][vo/gpu] Resizing texture: 1920x800
[   1.860][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.862][v][vo/gpu/d3d11] Compiled a vertex shader in 4240us
[   1.862][v][vo/gpu/d3d11] shaderc: 2378us, SPIRV-Cross: 142us, D3DCompile: 1720us
[   1.862][d][vo/gpu/d3d11] GLSL source:
[   1.862][d][vo/gpu/d3d11] [  1] #version 450
[   1.862][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.862][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.862][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.862][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.862][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.862][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.862][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.862][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.862][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.862][d][vo/gpu/d3d11] [ 11] void main() {
[   1.862][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.862][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.862][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.862][d][vo/gpu/d3d11] [ 15] }
[   1.862][d][vo/gpu/d3d11] HLSL source:
[   1.862][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.862][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.862][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.862][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.862][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.862][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.862][d][vo/gpu/d3d11] [  7] 
[   1.862][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.862][d][vo/gpu/d3d11] [  9] {
[   1.862][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.862][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.862][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.863][d][vo/gpu/d3d11] [ 13] };
[   1.863][d][vo/gpu/d3d11] [ 14] 
[   1.863][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.863][d][vo/gpu/d3d11] [ 16] {
[   1.863][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.863][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.863][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.863][d][vo/gpu/d3d11] [ 20] };
[   1.863][d][vo/gpu/d3d11] [ 21] 
[   1.863][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.863][d][vo/gpu/d3d11] [ 23] {
[   1.863][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.863][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.863][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.863][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.863][d][vo/gpu/d3d11] [ 28] }
[   1.863][d][vo/gpu/d3d11] [ 29] 
[   1.863][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.863][d][vo/gpu/d3d11] [ 31] {
[   1.863][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.863][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.863][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.863][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.863][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.863][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.863][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.863][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.863][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.863][d][vo/gpu/d3d11] [ 41] }
[   1.888][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.948][v][vo/gpu/d3d11] Compiled a fragment shader in 85142us
[   1.948][v][vo/gpu/d3d11] shaderc: 25262us, SPIRV-Cross: 2937us, D3DCompile: 56943us
[   1.948][d][vo/gpu/d3d11] GLSL source:
[   1.948][d][vo/gpu/d3d11] [  1] #version 450
[   1.948][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.948][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.948][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.948][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.948][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   1.948][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   1.948][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   1.948][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   1.948][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   1.948][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   1.948][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   1.948][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   1.948][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   1.948][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   1.948][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   1.948][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   1.948][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   1.948][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   1.948][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   1.948][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   1.948][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   1.948][d][vo/gpu/d3d11] [ 23] };
[   1.948][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   1.948][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   1.948][d][vo/gpu/d3d11] [ 26] #define conv2d_3_tf_raw texture0
[   1.948][d][vo/gpu/d3d11] [ 27] #define conv2d_3_tf_pos texcoord0
[   1.948][d][vo/gpu/d3d11] [ 28] #define conv2d_3_tf_size texture_size0
[   1.948][d][vo/gpu/d3d11] [ 29] #define conv2d_3_tf_rot texture_rot0
[   1.948][d][vo/gpu/d3d11] [ 30] #define conv2d_3_tf_off texture_off0
[   1.948][d][vo/gpu/d3d11] [ 31] #define conv2d_3_tf_pt pixel_size0
[   1.948][d][vo/gpu/d3d11] [ 32] #define conv2d_3_tf_map texmap0
[   1.948][d][vo/gpu/d3d11] [ 33] #define conv2d_3_tf_mul 1.000000
[   1.948][d][vo/gpu/d3d11] [ 34] #define conv2d_3_tf_tex(pos) (conv2d_3_tf_mul * vec4(texture(conv2d_3_tf_raw, pos)).rgba)
[   1.948][d][vo/gpu/d3d11] [ 35] #define conv2d_3_tf_gather(pos, c) (conv2d_3_tf_mul * vec4(textureGather(conv2d_3_tf_raw, pos, c)))
[   1.948][d][vo/gpu/d3d11] [ 36] #define conv2d_3_tf_texOff(off) conv2d_3_tf_tex(conv2d_3_tf_pos + conv2d_3_tf_pt * vec2(off))
[   1.948][d][vo/gpu/d3d11] [ 37] #define conv2d_3_tf1_raw texture1
[   1.948][d][vo/gpu/d3d11] [ 38] #define conv2d_3_tf1_pos texcoord1
[   1.948][d][vo/gpu/d3d11] [ 39] #define conv2d_3_tf1_size texture_size1
[   1.948][d][vo/gpu/d3d11] [ 40] #define conv2d_3_tf1_rot texture_rot1
[   1.948][d][vo/gpu/d3d11] [ 41] #define conv2d_3_tf1_off texture_off1
[   1.948][d][vo/gpu/d3d11] [ 42] #define conv2d_3_tf1_pt pixel_size1
[   1.948][d][vo/gpu/d3d11] [ 43] #define conv2d_3_tf1_map texmap1
[   1.948][d][vo/gpu/d3d11] [ 44] #define conv2d_3_tf1_mul 1.000000
[   1.948][d][vo/gpu/d3d11] [ 45] #define conv2d_3_tf1_tex(pos) (conv2d_3_tf1_mul * vec4(texture(conv2d_3_tf1_raw, pos)).rgba)
[   1.948][d][vo/gpu/d3d11] [ 46] #define conv2d_3_tf1_gather(pos, c) (conv2d_3_tf1_mul * vec4(textureGather(conv2d_3_tf1_raw, pos, c)))
[   1.948][d][vo/gpu/d3d11] [ 47] #define conv2d_3_tf1_texOff(off) conv2d_3_tf1_tex(conv2d_3_tf1_pos + conv2d_3_tf1_pt * vec2(off))
[   1.948][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.948][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.948][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.948][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.948][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   1.948][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.25835788, 0.050451655, -0.1845038, -0.07232528, 0.1323318, 0.26276684, 0.10842882, -0.083056524, 0.17426784, -0.3594826, 0.2728965, 0.08388844, -0.004007842, 0.020535901, -0.051425606, 0.07750436) * go_0(-1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.11410436, 0.014572361, -0.27057216, -0.023974562, 0.05234827, 0.15328228, -0.17502303, -0.3199359, 0.12188045, -0.095813684, 0.024145132, 0.0856916, -0.027453909, -0.043129764, 0.16971985, 0.021623038) * go_0(-1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 55]     result += mat4(0.06611095, 0.038625732, -0.13717118, -0.04497733, 0.15213469, 0.04770935, 0.0729271, -0.062052976, 0.004571303, 0.035141192, -0.059409596, 0.044652313, 0.17520894, 0.09665589, -0.1479193, 0.06528058) * go_0(-1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.1845968, 0.091479465, -0.09394898, -0.13545018, -0.029501775, -0.21426639, 0.09255898, 0.1257644, 0.20256902, 0.06267267, 0.10378081, 0.13494423, 0.058310498, 0.03642236, -0.16268995, -0.048100803) * go_0(0.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 57]     result += mat4(0.2155119, -0.3683131, 0.049449228, -0.20559964, -0.11761922, -0.2518804, -0.020712897, 0.12895772, -0.07543782, 0.5805017, -0.11301444, -0.038493153, -0.06710986, -0.09321189, 0.108671665, -0.03259695) * go_0(0.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 58]     result += mat4(0.035307787, 0.108389005, -0.27493554, 0.27029404, 0.25523573, -0.28636125, -0.20766719, -0.008661457, -0.004480811, -0.046390545, -0.16221444, 0.008979624, -0.061375532, 0.035076566, -0.018924266, 0.01380219) * go_0(0.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.051922515, -0.12463486, -0.10383422, 0.02220095, -0.1573033, 0.13980615, 0.13248625, -0.16803266, -0.0692132, -0.21552645, 0.13744529, 0.23034313, 0.0052666534, 0.028977966, 0.07720251, -0.06477756) * go_0(1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.14097473, 0.2770271, -0.172289, -0.03000696, -0.028684044, 0.040578447, -0.2290285, 0.082329154, -0.042402364, -0.20926563, 0.08233207, 0.11862443, -0.07038536, -0.02273004, 0.091550544, -0.065856494) * go_0(1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 61]     result += mat4(0.14879914, -0.023923844, -0.23569296, 0.20306346, 0.17502785, 0.28776234, -0.2788995, 0.10012439, -0.05635638, -0.025840463, 0.09222198, 0.118032, 0.08057015, 0.1286071, 0.060189806, -0.052669708) * go_0(1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 62]     result += mat4(0.07076086, -0.15111323, -0.07427972, 0.008372168, -0.17791592, -0.16254742, 0.013961132, -0.0944912, -0.23380096, 0.17377278, -0.09683394, 0.019931393, -0.12042098, 0.0016406325, 0.09393333, -0.06882231) * go_1(-1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 63]     result += mat4(0.21465093, 0.04142968, 0.06840044, -0.37831602, -0.05549571, 0.044905066, -0.07873589, -0.026804, -0.34764197, 0.022487951, -0.077293746, 0.089457795, -0.110094436, 0.24233972, 0.06285107, -0.10851744) * go_1(-1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 64]     result += mat4(0.093270175, 0.084138945, 0.03938272, 0.063565865, -0.010733802, 0.13554469, -0.06650261, 0.033002816, 0.011187271, -0.12821455, 0.20785914, -0.030438649, -0.124710515, -0.022294303, 0.09732408, 0.057609864) * go_1(-1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.12833868, 0.021577539, -0.02700365, 0.11799592, -0.03655647, -0.04225167, 0.11049353, -0.16036157, 0.049277548, -0.033842396, 0.10020137, 0.095509745, 0.08060231, -0.09237418, -0.035598125, -0.035926737) * go_1(0.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.32829186, 0.3492363, 0.030671779, -0.12606762, 0.010437313, 0.2757115, -0.21517593, -0.15800527, -0.12592544, -0.20578934, 0.10444053, 0.12993255, -0.046079267, 0.03834173, -0.19277227, -0.22124454) * go_1(0.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.052546192, 0.026082167, 0.13831234, 0.10982424, 0.012946818, -0.12439852, 0.10134106, -0.10050398, -0.04472338, -0.14325236, -0.20579574, 0.0044005127, 0.22013672, -0.32955512, 0.12404084, -0.008160738) * go_1(0.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.10774314, -0.31650826, -0.06601711, 0.19635755, -0.12622592, -0.06396423, 0.13856032, 0.16540553, 0.021387719, 0.23377723, -0.053738154, -0.1000186, -0.08338395, -0.052813534, 0.008122962, 0.13732094) * go_1(1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 69]     result += mat4(-0.18270823, 0.06966014, -0.17788303, -0.27303055, -0.077971615, 0.013978423, -0.02039098, 0.12715338, -0.11924171, 0.18900296, -0.085199654, 0.215198, 0.18587974, -0.009749325, 0.0173584, -0.12018259) * go_1(1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 70]     result += mat4(0.052129295, -0.107416354, 0.12711766, 0.03708665, -0.14369462, -0.055359814, -0.16639823, -0.045143317, -0.06925672, -0.040696755, 0.01999809, -0.016040625, -0.02484878, 0.07417094, 0.050875198, 0.2145528) * go_1(1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 71]     result += mat4(0.055696912, -0.16680926, -0.021987487, 0.024941636, -0.0927883, 0.022136632, 0.033782948, -0.10646058, -0.14944647, 0.25457275, 0.046682496, -0.022462368, -0.07886781, 0.08165927, 0.06848105, 0.0063734027) * go_2(-1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 72]     result += mat4(0.037053242, 0.033215813, 0.18291366, 0.12340375, 0.08491059, -0.28442004, -0.0127422465, -0.039834313, -0.23321372, 0.26676926, -0.05636355, -0.15672484, -0.12891728, -0.15486577, -0.032004442, -0.092745155) * go_2(-1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 73]     result += mat4(0.015779478, -0.18457565, 0.24996394, 0.036197674, 0.15694007, 0.15863103, -0.07332398, 0.0016235278, -0.15536517, -0.056062788, 0.14102836, 0.16915025, -0.08001087, 0.07073164, 0.13796777, 0.123867124) * go_2(-1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 74]     result += mat4(0.045792986, -0.15135059, -0.1354885, -0.043678258, -0.35655212, 0.51232076, -0.12816145, -0.046569496, -0.014127674, -0.06282611, -0.098873, -0.06359104, -0.0919222, 0.11822437, 0.079254694, 0.00579688) * go_2(0.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 75]     result += mat4(-0.15683417, 0.61610246, -0.3024612, 0.12917964, -0.09303367, 0.23612969, -0.40842506, -0.12374661, -0.07572449, -0.2613284, -0.09970177, -0.015227848, 0.106239066, -0.21411185, 0.051998455, -0.1364518) * go_2(0.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 76]     result += mat4(0.23850034, -0.14394449, -0.0031468747, -0.2380617, -0.027200876, -0.041352056, -0.01864445, 0.033848196, -0.12064239, -0.110480845, 0.08450956, -0.22328654, 0.17664163, 0.22268307, 0.050886698, -0.17475672) * go_2(0.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.17808256, 0.010803805, 0.03315186, 0.033143792, -0.14205995, 0.25039625, -0.08784382, -0.13454252, 0.19576813, 0.10755282, 0.22821628, 0.019456752, -0.0422955, -0.016182603, -0.12066697, 0.0548465) * go_2(1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 78]     result += mat4(0.11563777, -0.257929, 0.0010403778, 0.080267854, -0.0025255163, 0.2855168, -0.060352214, -0.07816255, -0.00090574916, 0.049510725, 0.03720483, 0.059250016, -0.08674136, 0.20522198, -0.28694284, 0.1299507) * go_2(1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.14638457, 0.04063328, 0.03139636, -0.007934521, 0.07689684, -0.09467145, 0.10607347, 0.054510128, 0.003306194, 0.05347124, 0.062762424, -0.041480847, -0.07677865, -0.139573, 0.010972524, 0.21957156) * go_2(1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.026845628, -0.043439507, 0.034738723, 0.07281683, 0.14474197, 0.031586993, -0.22767854, -0.0707655, 0.105201736, -0.28805482, 0.008668302, -0.16329518, 0.06157049, 0.3803886, 0.26345953, -0.011096537) * go_3(-1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.23328833, 0.085731484, -0.07755016, 0.33559516, 0.07704345, 0.115106605, -0.24114038, -0.44630137, 0.2726737, -0.32170138, -0.009236524, -0.11666051, 0.0457048, 0.07876708, 0.13134004, -0.035318643) * go_3(-1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.05140272, 0.011605703, 0.13899171, -0.05071015, 0.18413687, -0.31413674, -0.13043414, -0.15118152, -0.15326938, -0.10720126, -0.23738635, 0.13481396, 0.25115076, -0.009316611, -0.2584441, -0.14389823) * go_3(-1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.039723795, -0.14869407, -0.1692942, 0.026501274, -0.10685166, -0.121267825, -0.08584318, -0.09580693, -0.10626739, -0.068417974, 0.11321909, -0.13664317, 0.061380867, -0.2587898, 0.14850819, 0.008178645) * go_3(0.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 84]     result += mat4(0.06912782, 0.24230564, -0.048150286, 0.2203717, -0.17417085, 0.105546735, -0.16648416, -0.0045053074, 0.09764028, 0.37122592, -0.1939995, -0.27899942, -0.088152565, -0.53869057, 0.21676709, -0.08056594) * go_3(0.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 85]     result += mat4(0.07651754, 0.03704878, -0.0197015, 0.1660726, 0.07002748, -0.11820414, -0.23360898, 0.1481592, 0.029847002, 0.054057185, 0.013176299, 0.06552942, -0.13865773, -0.20105527, -0.37550658, 0.005769631) * go_3(0.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.22697811, -0.17426412, 0.10148018, 0.008134666, 0.10771455, 0.16943407, -0.016319012, -0.40176705, -0.06854668, -0.049045276, 0.20919096, 0.13240765, -0.050125647, 0.14902508, 0.052697595, -0.13817468) * go_3(1.0, -1.0);
[   1.948][d][vo/gpu/d3d11] [ 87]     result += mat4(0.04301619, 0.23184754, -0.023551717, 0.3768405, 0.028999053, 0.06709736, -0.05993663, -0.059861984, 0.15499207, -0.22217415, 0.111131504, -0.09082529, -0.19389243, 0.024621522, -0.15305442, 0.010799284) * go_3(1.0, 0.0);
[   1.948][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.035496738, 0.010802548, -0.028718363, 0.19263634, 0.16900502, -0.16661702, -0.027631328, 0.18309957, -0.015860107, -0.03309961, -0.091390446, 0.14000848, -0.0036591904, 0.47659522, -0.09373507, -0.29020965) * go_3(1.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 89]     result += vec4(0.08895955, -0.027667087, 0.20500831, 0.00037762933);
[   1.948][d][vo/gpu/d3d11] [ 90]     return result;
[   1.948][d][vo/gpu/d3d11] [ 91] }
[   1.948][d][vo/gpu/d3d11] [ 92] void main() {
[   1.948][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   1.948][d][vo/gpu/d3d11] [ 94] color = hook();
[   1.948][d][vo/gpu/d3d11] [ 95] out_color = color;
[   1.948][d][vo/gpu/d3d11] [ 96] }
[   1.948][d][vo/gpu/d3d11] HLSL source:
[   1.948][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   1.948][d][vo/gpu/d3d11] [  2] {
[   1.948][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   1.948][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   1.948][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   1.948][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   1.948][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   1.948][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   1.948][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   1.948][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   1.948][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   1.948][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   1.948][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   1.948][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   1.948][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   1.948][d][vo/gpu/d3d11] [ 16] };
[   1.948][d][vo/gpu/d3d11] [ 17] 
[   1.948][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   1.948][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   1.948][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   1.948][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   1.948][d][vo/gpu/d3d11] [ 22] 
[   1.948][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   1.948][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   1.948][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   1.948][d][vo/gpu/d3d11] [ 26] 
[   1.948][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   1.948][d][vo/gpu/d3d11] [ 28] {
[   1.948][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   1.948][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   1.948][d][vo/gpu/d3d11] [ 31] };
[   1.948][d][vo/gpu/d3d11] [ 32] 
[   1.948][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   1.948][d][vo/gpu/d3d11] [ 34] {
[   1.948][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   1.948][d][vo/gpu/d3d11] [ 36] };
[   1.948][d][vo/gpu/d3d11] [ 37] 
[   1.948][d][vo/gpu/d3d11] [ 38] void frag_main()
[   1.948][d][vo/gpu/d3d11] [ 39] {
[   1.948][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   1.948][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   1.949][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.25835788249969482421875f, 0.0504516549408435821533203125f, -0.1845037937164306640625f, -0.072325281798839569091796875f), float4(0.13233180344104766845703125f, 0.26276683807373046875f, 0.10842882096767425537109375f, -0.08305652439594268798828125f), float4(0.17426784336566925048828125f, -0.359482586383819580078125f, 0.2728964984416961669921875f, 0.0838884413242340087890625f), float4(-0.0040078419260680675506591796875f, 0.02053590118885040283203125f, -0.0514256060123443603515625f, 0.077504359185695648193359375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.1141043603420257568359375f, 0.014572360552847385406494140625f, -0.2705721557140350341796875f, -0.02397456206381320953369140625f), float4(0.05234827101230621337890625f, 0.15328228473663330078125f, -0.17502303421497344970703125f, -0.3199358880519866943359375f), float4(0.121880449354648590087890625f, -0.095813684165477752685546875f, 0.02414513193070888519287109375f, 0.0856916010379791259765625f), float4(-0.02745390869677066802978515625f, -0.043129764497280120849609375f, 0.1697198450565338134765625f, 0.021623037755489349365234375f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.06611095368862152099609375f, 0.03862573206424713134765625f, -0.1371711790561676025390625f, -0.044977329671382904052734375f), float4(0.1521346867084503173828125f, 0.0477093495428562164306640625f, 0.07292710244655609130859375f, -0.0620529763400554656982421875f), float4(0.004571302793920040130615234375f, 0.035141192376613616943359375f, -0.059409596025943756103515625f, 0.0446523129940032958984375f), float4(0.17520894110202789306640625f, 0.09665589034557342529296875f, -0.14791929721832275390625f, 0.065280579030513763427734375f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.1845968067646026611328125f, 0.09147946536540985107421875f, -0.093948982656002044677734375f, -0.135450184345245361328125f), float4(-0.02950177527964115142822265625f, -0.2142663896083831787109375f, 0.09255897998809814453125f, 0.1257643997669219970703125f), float4(0.20256902277469635009765625f, 0.062672667205333709716796875f, 0.103780813515186309814453125f, 0.1349442303180694580078125f), float4(0.0583104975521564483642578125f, 0.0364223606884479522705078125f, -0.1626899540424346923828125f, -0.0481008030474185943603515625f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(0.21551190316677093505859375f, -0.3683131039142608642578125f, 0.049449227750301361083984375f, -0.2055996358394622802734375f), float4(-0.117619216442108154296875f, -0.2518804073333740234375f, -0.02071289718151092529296875f, 0.1289577186107635498046875f), float4(-0.075437821447849273681640625f, 0.58050167560577392578125f, -0.113014437258243560791015625f, -0.0384931527078151702880859375f), float4(-0.067109860479831695556640625f, -0.0932118892669677734375f, 0.108671665191650390625f, -0.0325969494879245758056640625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.035307787358760833740234375f, 0.10838900506496429443359375f, -0.274935543537139892578125f, 0.2702940404415130615234375f), float4(0.255235731601715087890625f, -0.2863612473011016845703125f, -0.20766718685626983642578125f, -0.008661457337439060211181640625f), float4(-0.00448081083595752716064453125f, -0.0463905446231365203857421875f, -0.16221444308757781982421875f, 0.00897962413728237152099609375f), float4(-0.0613755322992801666259765625f, 0.035076566040515899658203125f, -0.0189242660999298095703125f, 0.013802190311253070831298828125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.05192251503467559814453125f, -0.12463486194610595703125f, -0.103834219276905059814453125f, 0.022200949490070343017578125f), float4(-0.1573033034801483154296875f, 0.13980615139007568359375f, 0.1324862539768218994140625f, -0.16803266108036041259765625f), float4(-0.06921319663524627685546875f, -0.21552644670009613037109375f, 0.13744528591632843017578125f, 0.2303431332111358642578125f), float4(0.00526665337383747100830078125f, 0.02897796593606472015380859375f, 0.077202506363391876220703125f, -0.064777560532093048095703125f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.1409747302532196044921875f, 0.2770271003246307373046875f, -0.17228899896144866943359375f, -0.03000696003437042236328125f), float4(-0.02868404425680637359619140625f, 0.040578447282314300537109375f, -0.2290284931659698486328125f, 0.08232915401458740234375f), float4(-0.042402364313602447509765625f, -0.20926563441753387451171875f, 0.082332067191600799560546875f, 0.118624426424503326416015625f), float4(-0.070385359227657318115234375f, -0.02273003943264484405517578125f, 0.09155054390430450439453125f, -0.065856494009494781494140625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.14879913628101348876953125f, -0.0239238440990447998046875f, -0.23569296300411224365234375f, 0.2030634582042694091796875f), float4(0.1750278472900390625f, 0.287762343883514404296875f, -0.278899490833282470703125f, 0.1001243889331817626953125f), float4(-0.0563563816249370574951171875f, -0.02584046311676502227783203125f, 0.092221982777118682861328125f, 0.118032000958919525146484375f), float4(0.08057014644145965576171875f, 0.128607094287872314453125f, 0.060189805924892425537109375f, -0.0526697076857089996337890625f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.07076086103916168212890625f, -0.15111322700977325439453125f, -0.074279718101024627685546875f, 0.008372168056666851043701171875f), float4(-0.17791591584682464599609375f, -0.16254742443561553955078125f, 0.013961131684482097625732421875f, -0.09449119865894317626953125f), float4(-0.23380096256732940673828125f, 0.1737727820873260498046875f, -0.096833936870098114013671875f, 0.01993139274418354034423828125f), float4(-0.12042097747325897216796875f, 0.00164063251577317714691162109375f, 0.09393332898616790771484375f, -0.06882230937480926513671875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.214650928974151611328125f, 0.0414296798408031463623046875f, 0.068400442600250244140625f, -0.3783160150051116943359375f), float4(-0.0554957091808319091796875f, 0.04490506649017333984375f, -0.078735888004302978515625f, -0.0268040001392364501953125f), float4(-0.3476419746875762939453125f, 0.02248795144259929656982421875f, -0.077293746173381805419921875f, 0.08945779502391815185546875f), float4(-0.110094435513019561767578125f, 0.24233971536159515380859375f, 0.06285107135772705078125f, -0.1085174381732940673828125f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.093270175158977508544921875f, 0.08413894474506378173828125f, 0.039382718503475189208984375f, 0.06356586515903472900390625f), float4(-0.0107338018715381622314453125f, 0.1355446875095367431640625f, -0.066502608358860015869140625f, 0.033002816140651702880859375f), float4(0.011187271215021610260009765625f, -0.12821455299854278564453125f, 0.20785914361476898193359375f, -0.03043864853680133819580078125f), float4(-0.12471051514148712158203125f, -0.02229430340230464935302734375f, 0.097324080765247344970703125f, 0.057609863579273223876953125f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.12833867967128753662109375f, 0.02157753892242908477783203125f, -0.0270036496222019195556640625f, 0.117995917797088623046875f), float4(-0.0365564711391925811767578125f, -0.042251668870449066162109375f, 0.110493533313274383544921875f, -0.16036157310009002685546875f), float4(0.0492775477468967437744140625f, -0.0338423959910869598388671875f, 0.1002013683319091796875f, 0.095509745180606842041015625f), float4(0.080602310597896575927734375f, -0.092374183237552642822265625f, -0.0355981253087520599365234375f, -0.035926736891269683837890625f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.3282918632030487060546875f, 0.349236309528350830078125f, 0.0306717790663242340087890625f, -0.12606762349605560302734375f), float4(0.010437312535941600799560546875f, 0.2757115066051483154296875f, -0.215175926685333251953125f, -0.1580052673816680908203125f), float4(-0.12592543661594390869140625f, -0.20578934252262115478515625f, 0.104440532624721527099609375f, 0.1299325525760650634765625f), float4(-0.0460792668163776397705078125f, 0.0383417308330535888671875f, -0.19277226924896240234375f, -0.2212445437908172607421875f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.0525461919605731964111328125f, 0.02608216740190982818603515625f, 0.13831233978271484375f, 0.109824240207672119140625f), float4(0.0129468180239200592041015625f, -0.124398522078990936279296875f, 0.101341061294078826904296875f, -0.100503981113433837890625f), float4(-0.0447233803570270538330078125f, -0.14325235784053802490234375f, -0.2057957351207733154296875f, 0.0044005126692354679107666015625f), float4(0.22013671696186065673828125f, -0.3295551240444183349609375f, 0.1240408420562744140625f, -0.00816073827445507049560546875f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.107743136584758758544921875f, -0.3165082633495330810546875f, -0.066017113626003265380859375f, 0.196357548236846923828125f), float4(-0.1262259185314178466796875f, -0.06396423280239105224609375f, 0.1385603249073028564453125f, 0.16540552675724029541015625f), float4(0.021387718617916107177734375f, 0.233777225017547607421875f, -0.053738154470920562744140625f, -0.100018598139286041259765625f), float4(-0.0833839476108551025390625f, -0.0528135336935520172119140625f, 0.0081229619681835174560546875f, 0.137320935726165771484375f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(-0.1827082335948944091796875f, 0.06966014206409454345703125f, -0.17788302898406982421875f, -0.2730305492877960205078125f), float4(-0.077971614897251129150390625f, 0.013978422619402408599853515625f, -0.020390979945659637451171875f, 0.12715338170528411865234375f), float4(-0.119241707026958465576171875f, 0.1890029609203338623046875f, -0.085199654102325439453125f, 0.21519799530506134033203125f), float4(0.1858797371387481689453125f, -0.00974932499229907989501953125f, 0.017358399927616119384765625f, -0.12018258869647979736328125f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.0521292947232723236083984375f, -0.107416354119777679443359375f, 0.1271176636219024658203125f, 0.03708665072917938232421875f), float4(-0.14369462430477142333984375f, -0.0553598143160343170166015625f, -0.166398227214813232421875f, -0.0451433174312114715576171875f), float4(-0.069256722927093505859375f, -0.04069675505161285400390625f, 0.01999809034168720245361328125f, -0.01604062505066394805908203125f), float4(-0.02484877966344356536865234375f, 0.074170939624309539794921875f, 0.0508751980960369110107421875f, 0.21455280482769012451171875f)));
[   1.949][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.055696912109851837158203125f, -0.166809260845184326171875f, -0.0219874866306781768798828125f, 0.02494163624942302703857421875f), float4(-0.092788301408290863037109375f, 0.0221366323530673980712890625f, 0.0337829478085041046142578125f, -0.106460578739643096923828125f), float4(-0.14944647252559661865234375f, 0.25457274913787841796875f, 0.0466824956238269805908203125f, -0.022462368011474609375f), float4(-0.07886780798435211181640625f, 0.08165927231311798095703125f, 0.068481050431728363037109375f, 0.006373402662575244903564453125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.03705324232578277587890625f, 0.033215813338756561279296875f, 0.18291366100311279296875f, 0.123403750360012054443359375f), float4(0.08491058647632598876953125f, -0.2844200432300567626953125f, -0.012742246501147747039794921875f, -0.039834313094615936279296875f), float4(-0.233213722705841064453125f, 0.2667692601680755615234375f, -0.0563635490834712982177734375f, -0.1567248404026031494140625f), float4(-0.128917276859283447265625f, -0.1548657715320587158203125f, -0.0320044420659542083740234375f, -0.0927451550960540771484375f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.01577947847545146942138671875f, -0.1845756471157073974609375f, 0.249963939189910888671875f, 0.0361976735293865203857421875f), float4(0.1569400727748870849609375f, 0.158631026744842529296875f, -0.07332397997379302978515625f, 0.00162352784536778926849365234375f), float4(-0.155365169048309326171875f, -0.0560627877712249755859375f, 0.14102835953235626220703125f, 0.16915024816989898681640625f), float4(-0.080010868608951568603515625f, 0.070731639862060546875f, 0.137967765331268310546875f, 0.1238671243190765380859375f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.0457929857075214385986328125f, -0.1513505876064300537109375f, -0.13548849523067474365234375f, -0.0436782576143741607666015625f), float4(-0.3565521240234375f, 0.5123207569122314453125f, -0.12816144526004791259765625f, -0.0465694963932037353515625f), float4(-0.01412767358124256134033203125f, -0.06282611191272735595703125f, -0.098872996866703033447265625f, -0.063591040670871734619140625f), float4(-0.091922201216220855712890625f, 0.11822436749935150146484375f, 0.079254694283008575439453125f, 0.0057968799956142902374267578125f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(-0.15683417022228240966796875f, 0.6161024570465087890625f, -0.302461206912994384765625f, 0.12917964160442352294921875f), float4(-0.09303367137908935546875f, 0.23612968623638153076171875f, -0.4084250628948211669921875f, -0.123746611177921295166015625f), float4(-0.075724489986896514892578125f, -0.261328399181365966796875f, -0.099701769649982452392578125f, -0.015227847732603549957275390625f), float4(0.10623906552791595458984375f, -0.21411184966564178466796875f, 0.0519984550774097442626953125f, -0.13645179569721221923828125f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.23850034177303314208984375f, -0.14394448697566986083984375f, -0.003146874718368053436279296875f, -0.2380616962909698486328125f), float4(-0.02720087580382823944091796875f, -0.041352055966854095458984375f, -0.01864445023238658905029296875f, 0.0338481962680816650390625f), float4(-0.120642386376857757568359375f, -0.110480844974517822265625f, 0.084509558975696563720703125f, -0.2232865393161773681640625f), float4(0.17664162814617156982421875f, 0.22268307209014892578125f, 0.050886698067188262939453125f, -0.17475672066211700439453125f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.1780825555324554443359375f, 0.010803804732859134674072265625f, 0.0331518612802028656005859375f, 0.0331437923014163970947265625f), float4(-0.1420599520206451416015625f, 0.250396251678466796875f, -0.08784382045269012451171875f, -0.134542524814605712890625f), float4(0.19576813280582427978515625f, 0.107552818953990936279296875f, 0.22821627557277679443359375f, 0.019456751644611358642578125f), float4(-0.04229550063610076904296875f, -0.01618260331451892852783203125f, -0.120666973292827606201171875f, 0.0548464991152286529541015625f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.115637771785259246826171875f, -0.2579289972782135009765625f, 0.001040377770550549030303955078125f, 0.080267854034900665283203125f), float4(-0.0025255163200199604034423828125f, 0.285516798496246337890625f, -0.060352213680744171142578125f, -0.07816255092620849609375f), float4(-0.00090574915520846843719482421875f, 0.049510724842548370361328125f, 0.0372048318386077880859375f, 0.0592500157654285430908203125f), float4(-0.0867413580417633056640625f, 0.2052219808101654052734375f, -0.28694283962249755859375f, 0.129950702190399169921875f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.1463845670223236083984375f, 0.0406332798302173614501953125f, 0.0313963592052459716796875f, -0.007934520952403545379638671875f), float4(0.076896838843822479248046875f, -0.094671450555324554443359375f, 0.1060734689235687255859375f, 0.0545101277530193328857421875f), float4(0.00330619397573173046112060546875f, 0.0534712411463260650634765625f, 0.06276242434978485107421875f, -0.041480846703052520751953125f), float4(-0.0767786502838134765625f, -0.13957299292087554931640625f, 0.01097252406179904937744140625f, 0.2195715606212615966796875f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.02684562839567661285400390625f, -0.04343950748443603515625f, 0.0347387231886386871337890625f, 0.072816826403141021728515625f), float4(0.14474196732044219970703125f, 0.0315869934856891632080078125f, -0.2276785373687744140625f, -0.070765502750873565673828125f), float4(0.10520173609256744384765625f, -0.28805482387542724609375f, 0.00866830162703990936279296875f, -0.1632951796054840087890625f), float4(0.0615704916417598724365234375f, 0.3803885877132415771484375f, 0.2634595334529876708984375f, -0.011096537113189697265625f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.23328833281993865966796875f, 0.085731483995914459228515625f, -0.07755015790462493896484375f, 0.3355951607227325439453125f), float4(0.077043451368808746337890625f, 0.115106604993343353271484375f, -0.24114038050174713134765625f, -0.4463013708591461181640625f), float4(0.2726736962795257568359375f, -0.3217013776302337646484375f, -0.00923652388155460357666015625f, -0.116660512983798980712890625f), float4(0.0457048006355762481689453125f, 0.078767083585262298583984375f, 0.13134004175662994384765625f, -0.0353186428546905517578125f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.0514027215540409088134765625f, 0.011605703271925449371337890625f, 0.13899171352386474609375f, -0.050710149109363555908203125f), float4(0.184136867523193359375f, -0.3141367435455322265625f, -0.13043414056301116943359375f, -0.151181519031524658203125f), float4(-0.1532693803310394287109375f, -0.10720126330852508544921875f, -0.23738634586334228515625f, 0.134813964366912841796875f), float4(0.2511507570743560791015625f, -0.009316611103713512420654296875f, -0.2584441006183624267578125f, -0.14389823377132415771484375f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.0397237949073314666748046875f, -0.1486940681934356689453125f, -0.16929419338703155517578125f, 0.02650127373635768890380859375f), float4(-0.106851659715175628662109375f, -0.1212678253650665283203125f, -0.085843183100223541259765625f, -0.0958069264888763427734375f), float4(-0.106267392635345458984375f, -0.068417973816394805908203125f, 0.113219089806079864501953125f, -0.1366431713104248046875f), float4(0.0613808669149875640869140625f, -0.2587898075580596923828125f, 0.14850819110870361328125f, 0.008178644813597202301025390625f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.069127820432186126708984375f, 0.24230563640594482421875f, -0.04815028607845306396484375f, 0.2203716933727264404296875f), float4(-0.17417085170745849609375f, 0.105546735227108001708984375f, -0.16648416221141815185546875f, -0.004505307413637638092041015625f), float4(0.097640283405780792236328125f, 0.3712259232997894287109375f, -0.1939994990825653076171875f, -0.2789994180202484130859375f), float4(-0.088152565062046051025390625f, -0.5386905670166015625f, 0.21676708757877349853515625f, -0.080565936863422393798828125f)));
[   1.949][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.07651753723621368408203125f, 0.037048779428005218505859375f, -0.0197014994919300079345703125f, 0.1660726070404052734375f), float4(0.070027478039264678955078125f, -0.118204139173030853271484375f, -0.23360897600650787353515625f, 0.148159205913543701171875f), float4(0.02984700165688991546630859375f, 0.0540571846067905426025390625f, 0.013176298700273036956787109375f, 0.06552942097187042236328125f), float4(-0.13865773379802703857421875f, -0.20105527341365814208984375f, -0.375506579875946044921875f, 0.00576963089406490325927734375f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.22697810828685760498046875f, -0.17426411807537078857421875f, 0.101480178534984588623046875f, 0.008134665898978710174560546875f), float4(0.10771454870700836181640625f, 0.169434070587158203125f, -0.01631901226937770843505859375f, -0.4017670452594757080078125f), float4(-0.0685466825962066650390625f, -0.0490452758967876434326171875f, 0.20919096469879150390625f, 0.13240765035152435302734375f), float4(-0.0501256473362445831298828125f, 0.14902508258819580078125f, 0.0526975952088832855224609375f, -0.1381746828556060791015625f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.0430161915719509124755859375f, 0.23184753954410552978515625f, -0.02355171740055084228515625f, 0.3768405020236968994140625f), float4(0.028999052941799163818359375f, 0.067097358405590057373046875f, -0.0599366314709186553955078125f, -0.0598619841039180755615234375f), float4(0.1549920737743377685546875f, -0.22217415273189544677734375f, 0.11113150417804718017578125f, -0.0908252894878387451171875f), float4(-0.19389243423938751220703125f, 0.02462152205407619476318359375f, -0.153054416179656982421875f, 0.010799284093081951141357421875f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.0354967378079891204833984375f, 0.0108025483787059783935546875f, -0.0287183634936809539794921875f, 0.1926363408565521240234375f), float4(0.16900502145290374755859375f, -0.16661702096462249755859375f, -0.02763132750988006591796875f, 0.183099567890167236328125f), float4(-0.0158601067960262298583984375f, -0.0330996103584766387939453125f, -0.09139044582843780517578125f, 0.1400084793567657470703125f), float4(-0.00365919037722051143646240234375f, 0.476595222949981689453125f, -0.0937350690364837646484375f, -0.29020965099334716796875f)))) + float4(0.088959552347660064697265625f, -0.0276670865714550018310546875f, 0.20500831305980682373046875f, 0.00037762933061458170413970947265625f);
[   1.949][d][vo/gpu/d3d11] [ 61] }
[   1.949][d][vo/gpu/d3d11] [ 62] 
[   1.949][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.949][d][vo/gpu/d3d11] [ 64] {
[   1.949][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   1.949][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   1.949][d][vo/gpu/d3d11] [ 67]     frag_main();
[   1.949][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   1.949][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   1.949][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   1.949][d][vo/gpu/d3d11] [ 71] }
[   1.949][d][vo/gpu] Resizing texture: 1920x800
[   1.951][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.954][v][vo/gpu/d3d11] Compiled a vertex shader in 4998us
[   1.954][v][vo/gpu/d3d11] shaderc: 2266us, SPIRV-Cross: 174us, D3DCompile: 2558us
[   1.954][d][vo/gpu/d3d11] GLSL source:
[   1.954][d][vo/gpu/d3d11] [  1] #version 450
[   1.954][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   1.954][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   1.954][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   1.954][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   1.954][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   1.954][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   1.954][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   1.954][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   1.954][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   1.954][d][vo/gpu/d3d11] [ 11] void main() {
[   1.954][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   1.954][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   1.954][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   1.954][d][vo/gpu/d3d11] [ 15] }
[   1.954][d][vo/gpu/d3d11] HLSL source:
[   1.954][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   1.954][d][vo/gpu/d3d11] [  2] static float2 _18;
[   1.954][d][vo/gpu/d3d11] [  3] static float2 _27;
[   1.954][d][vo/gpu/d3d11] [  4] static float2 _28;
[   1.954][d][vo/gpu/d3d11] [  5] static float2 _30;
[   1.954][d][vo/gpu/d3d11] [  6] static float2 _31;
[   1.954][d][vo/gpu/d3d11] [  7] 
[   1.954][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   1.954][d][vo/gpu/d3d11] [  9] {
[   1.954][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   1.954][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   1.954][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   1.954][d][vo/gpu/d3d11] [ 13] };
[   1.954][d][vo/gpu/d3d11] [ 14] 
[   1.954][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   1.954][d][vo/gpu/d3d11] [ 16] {
[   1.954][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   1.954][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   1.954][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   1.954][d][vo/gpu/d3d11] [ 20] };
[   1.954][d][vo/gpu/d3d11] [ 21] 
[   1.954][d][vo/gpu/d3d11] [ 22] void vert_main()
[   1.954][d][vo/gpu/d3d11] [ 23] {
[   1.954][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   1.954][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   1.954][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   1.954][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   1.954][d][vo/gpu/d3d11] [ 28] }
[   1.954][d][vo/gpu/d3d11] [ 29] 
[   1.954][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.954][d][vo/gpu/d3d11] [ 31] {
[   1.954][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   1.954][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   1.954][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   1.954][d][vo/gpu/d3d11] [ 35]     vert_main();
[   1.954][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   1.954][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   1.954][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   1.954][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   1.954][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   1.954][d][vo/gpu/d3d11] [ 41] }
[   1.982][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.041][v][vo/gpu/d3d11] Compiled a fragment shader in 86969us
[   2.041][v][vo/gpu/d3d11] shaderc: 28097us, SPIRV-Cross: 3591us, D3DCompile: 55281us
[   2.041][d][vo/gpu/d3d11] GLSL source:
[   2.041][d][vo/gpu/d3d11] [  1] #version 450
[   2.041][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.041][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.041][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.041][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.041][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.041][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.041][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.041][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.041][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.041][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.041][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.041][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.041][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.041][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.041][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.041][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.041][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.041][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.041][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.041][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.041][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.041][d][vo/gpu/d3d11] [ 23] };
[   2.041][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.041][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.041][d][vo/gpu/d3d11] [ 26] #define conv2d_4_tf_raw texture0
[   2.041][d][vo/gpu/d3d11] [ 27] #define conv2d_4_tf_pos texcoord0
[   2.041][d][vo/gpu/d3d11] [ 28] #define conv2d_4_tf_size texture_size0
[   2.041][d][vo/gpu/d3d11] [ 29] #define conv2d_4_tf_rot texture_rot0
[   2.041][d][vo/gpu/d3d11] [ 30] #define conv2d_4_tf_off texture_off0
[   2.041][d][vo/gpu/d3d11] [ 31] #define conv2d_4_tf_pt pixel_size0
[   2.041][d][vo/gpu/d3d11] [ 32] #define conv2d_4_tf_map texmap0
[   2.041][d][vo/gpu/d3d11] [ 33] #define conv2d_4_tf_mul 1.000000
[   2.041][d][vo/gpu/d3d11] [ 34] #define conv2d_4_tf_tex(pos) (conv2d_4_tf_mul * vec4(texture(conv2d_4_tf_raw, pos)).rgba)
[   2.041][d][vo/gpu/d3d11] [ 35] #define conv2d_4_tf_gather(pos, c) (conv2d_4_tf_mul * vec4(textureGather(conv2d_4_tf_raw, pos, c)))
[   2.041][d][vo/gpu/d3d11] [ 36] #define conv2d_4_tf_texOff(off) conv2d_4_tf_tex(conv2d_4_tf_pos + conv2d_4_tf_pt * vec2(off))
[   2.041][d][vo/gpu/d3d11] [ 37] #define conv2d_4_tf1_raw texture1
[   2.041][d][vo/gpu/d3d11] [ 38] #define conv2d_4_tf1_pos texcoord1
[   2.041][d][vo/gpu/d3d11] [ 39] #define conv2d_4_tf1_size texture_size1
[   2.041][d][vo/gpu/d3d11] [ 40] #define conv2d_4_tf1_rot texture_rot1
[   2.041][d][vo/gpu/d3d11] [ 41] #define conv2d_4_tf1_off texture_off1
[   2.041][d][vo/gpu/d3d11] [ 42] #define conv2d_4_tf1_pt pixel_size1
[   2.041][d][vo/gpu/d3d11] [ 43] #define conv2d_4_tf1_map texmap1
[   2.041][d][vo/gpu/d3d11] [ 44] #define conv2d_4_tf1_mul 1.000000
[   2.041][d][vo/gpu/d3d11] [ 45] #define conv2d_4_tf1_tex(pos) (conv2d_4_tf1_mul * vec4(texture(conv2d_4_tf1_raw, pos)).rgba)
[   2.041][d][vo/gpu/d3d11] [ 46] #define conv2d_4_tf1_gather(pos, c) (conv2d_4_tf1_mul * vec4(textureGather(conv2d_4_tf1_raw, pos, c)))
[   2.041][d][vo/gpu/d3d11] [ 47] #define conv2d_4_tf1_texOff(off) conv2d_4_tf1_tex(conv2d_4_tf1_pos + conv2d_4_tf1_pt * vec2(off))
[   2.041][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.041][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.041][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.041][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.041][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.041][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.018134737, -0.2296755, -0.07276725, -0.029795367, 0.05382051, 0.092847414, -0.024469728, -0.1674685, 0.0017946451, 0.30074653, 0.0034195695, -0.04892261, 0.18229689, -0.20116119, -0.12702174, -0.08259108) * go_0(-1.0, -1.0);
[   2.041][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.1357695, -0.08149211, 0.09314453, -0.21966846, 0.34740716, 0.043606415, 0.04225903, 0.034449834, 0.17248215, 0.39148283, -0.13868807, -0.010550686, 0.044238456, -0.09693464, -0.005044985, 0.24383289) * go_0(-1.0, 0.0);
[   2.041][d][vo/gpu/d3d11] [ 55]     result += mat4(0.19959371, 0.098685324, 0.058746945, 0.010580748, 0.08051514, 0.031898864, 0.017556064, 0.13004355, -0.01727653, 0.11044019, 0.040673427, -0.20064595, -0.23321067, 0.06398686, -0.19126236, -0.2430858) * go_0(-1.0, 1.0);
[   2.041][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.12870286, -0.113455534, 0.23722827, 0.070718594, 0.19049989, -0.1927299, -0.06343845, 0.113127775, 0.082530305, -0.10972526, -0.090779535, 0.05731582, 0.11018802, -0.18049154, 0.09269507, -0.10304576) * go_0(0.0, -1.0);
[   2.041][d][vo/gpu/d3d11] [ 57]     result += mat4(0.15513484, 0.06659583, 0.08125296, -0.012350324, -0.09492788, 0.5048303, 0.13206847, 0.39554298, 0.28953737, -0.20913891, -0.26781562, -0.17539899, 0.023778774, 0.29716817, 0.15768486, 0.37702608) * go_0(0.0, 0.0);
[   2.041][d][vo/gpu/d3d11] [ 58]     result += mat4(0.0724462, 0.015571356, -0.032217246, 0.0050658924, -0.22708446, 0.03968809, 0.016753826, 0.0025668752, -0.055932112, 0.113931604, 0.19766758, -0.030027265, -0.17384295, 0.15013468, -0.0070017707, -0.09469028) * go_0(0.0, 1.0);
[   2.041][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.078361556, -0.0954201, -0.006358101, 0.040500037, 0.4190454, -0.17622913, -0.07234791, 0.05462559, 0.18641087, 0.058313597, -0.0180785, 0.13818781, -0.14640772, 0.0699486, 0.0073663946, -0.076789856) * go_0(1.0, -1.0);
[   2.041][d][vo/gpu/d3d11] [ 60]     result += mat4(-0.21421191, 0.08736062, 0.09041226, 0.03608585, 0.02769972, 0.09641289, 0.11824623, 0.05653645, 0.16464607, 0.19839554, -0.13379547, 0.054417104, 0.067530684, 0.18971571, 0.13785432, -0.097639814) * go_0(1.0, 0.0);
[   2.041][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.32658005, -0.14606023, -0.069448665, 0.032998275, -0.28331423, 0.0011900732, -0.020304207, -0.13535896, 0.08298347, 0.045509677, -0.030503955, -0.037504148, 0.049955815, 0.0925771, 0.00058534974, -0.12398032) * go_0(1.0, 1.0);
[   2.041][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.2955836, 0.29059318, -0.018196672, -0.35866606, -0.01309431, 0.03540315, 0.010609202, 0.11956812, 0.10296229, 0.22536302, 0.015201129, -0.23797737, -0.16960852, -0.11414787, -0.034440614, 0.112644605) * go_1(-1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.14952518, 0.07024436, -0.083184876, -0.0814617, -0.13303639, 0.016159372, -0.13521518, 0.2221334, -0.056617837, 0.12958299, 0.064461656, -0.20146395, -0.16023181, 0.2640758, 0.27528805, -0.1426518) * go_1(-1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.04382363, 0.09856003, -0.08561442, -0.15699928, -0.121069774, 0.04685383, -0.009170197, -0.031489655, 0.18730178, 0.238442, 0.22497098, 0.032015145, -0.03709115, 0.1535079, 0.21674158, 0.10678019) * go_1(-1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.12200952, 0.24224263, 0.034097504, -0.028179523, -0.011962496, -0.04489487, -0.05198827, 0.22194928, -0.045400873, -0.049828544, 0.111477956, -0.098361604, 0.12788995, -0.016093334, -0.19886433, -0.011161484) * go_1(0.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 66]     result += mat4(0.30563712, 0.013071727, -0.004799883, 0.12888052, -0.259498, -0.041566677, 0.07311124, 0.162324, 0.28371668, -0.004693743, -0.0019395344, 0.029358242, 0.08730285, 0.12184509, 0.05508437, 0.048439097) * go_1(0.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 67]     result += mat4(0.12760857, 0.115813166, -0.217695, -0.10629871, -0.227366, 0.09030426, -0.15313712, 0.020528946, -0.20743734, 0.088583544, 0.04594053, -0.22891994, 0.18949282, -0.042186577, -0.17330512, -0.010711361) * go_1(0.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 68]     result += mat4(0.029503195, 0.0063797613, -0.17004286, -0.096844055, 0.010218098, 0.04247233, 0.02362808, 0.14700809, -0.08082364, 0.11159672, -0.018505255, -0.15228583, 0.15693732, -0.025359154, 0.024829186, 0.1943192) * go_1(1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 69]     result += mat4(-0.03912932, -0.21989027, 0.12203028, 0.18702275, -0.118537985, 0.21039696, 0.09102061, 0.012288879, 0.031666897, 0.1318455, -0.04901404, -0.07516063, -0.44782668, 0.04884501, 0.047070876, 0.008728358) * go_1(1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.08669101, 0.3053463, -0.08963947, 0.0034188698, -0.070004664, 0.064788476, 0.093737036, 0.070050925, 0.12728429, -0.13179256, -0.014913502, 0.09308136, -0.027638942, 0.008638711, 0.08794172, -0.05531093) * go_1(1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 71]     result += mat4(0.0728421, 0.07872358, 0.11454748, 0.08497922, 0.071820416, -0.11789207, -0.08184197, 0.1359588, -0.2143346, -0.05876081, 0.023172129, -0.08430511, -0.19276723, 0.14283359, 0.15604696, -0.055187486) * go_2(-1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 72]     result += mat4(0.068641685, 0.2732106, -0.2809107, 0.12736696, -0.08642367, 0.023898933, -0.17859498, -0.18299665, -0.06684587, -0.12204666, 0.45898953, -0.24240111, 0.25182098, -0.04395751, 0.10637211, -0.22135144) * go_2(-1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 73]     result += mat4(0.0852072, 0.051133018, 0.03333165, -0.0008938216, 0.10251267, 0.0550774, 0.041769378, -0.21259712, 0.286912, 0.123342015, 0.282759, -0.0730124, 0.14275575, -0.15580742, -0.15224406, 0.045376908) * go_2(-1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 74]     result += mat4(0.03328225, 0.11563978, -0.07451964, 0.030546209, -0.04698351, -0.18544962, 0.037350416, 0.13969816, 0.0556746, -0.06359919, 0.06478219, -0.031694926, 0.13396506, 0.09443612, -0.01922686, -0.06290365) * go_2(0.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 75]     result += mat4(0.07495407, 0.063429266, -0.106221214, -0.085107304, 0.2497817, -0.46598253, -0.18833177, -0.2731128, -0.13024822, 0.56053543, 0.055704467, -0.12331414, -0.031199086, 0.05061188, 0.22097112, -0.6611177) * go_2(0.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 76]     result += mat4(0.08276988, -0.044184342, -0.03562185, -0.06159881, 0.27694225, -0.07192965, -0.08663714, 0.020221777, 0.14095962, -0.06229397, 0.051374253, -0.038158998, 0.10664802, -0.041305423, 0.051260717, -0.054698635) * go_2(0.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 77]     result += mat4(0.12800686, 0.03485072, 0.039914366, 0.034041498, -0.08305794, -0.046292894, 0.22765331, 0.10904922, 0.0013937047, -0.08750301, 0.009126207, -0.065589435, 0.2837707, 0.08884436, -0.07234862, -0.093502745) * go_2(1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 78]     result += mat4(0.113439895, 0.06081726, 0.1122302, -0.022936966, 0.10329637, -0.31816107, -0.051597945, 0.23846027, -0.083913095, -0.29872265, -0.040147282, -0.08981918, -0.04329814, -0.12339693, -0.034489952, 0.013393211) * go_2(1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 79]     result += mat4(0.33091688, 0.1726297, 0.034332044, -0.091396205, 0.15434311, -0.0022870845, -0.15506189, 0.08710491, -0.16063525, 0.042252056, 0.017086457, 0.08134797, 0.08631321, 0.037843138, 0.088296555, 0.0064518084) * go_2(1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 80]     result += mat4(0.09161051, 0.114355795, -0.15304486, -0.030537153, 0.1835368, -0.3287635, 0.031197926, 0.09717476, 0.04276852, 0.113250345, 0.05949038, -0.10599563, 0.43574792, -0.060788117, 0.18409383, 0.12678055) * go_3(-1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.018356865, -0.0072578182, 0.12020777, -0.013127592, 0.20136636, -0.22984362, 0.06896224, 0.00044982752, 0.008428429, -0.123316936, -0.09989286, 0.078248784, -0.16313677, -0.003020313, -0.46285018, -0.08967125) * go_3(-1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.03451497, -0.10864502, 0.13207638, 0.17194521, 0.0037514758, -0.20222199, -0.12535086, 0.001511977, 0.056294486, -0.2112898, 0.078261316, 0.10118746, -0.044742294, 0.21793383, -0.19927903, -0.21338293) * go_3(-1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.034903776, -0.10167085, 0.031066334, 0.0379958, 0.20532596, -0.17457838, 0.16556816, -0.0021619152, 0.02682665, 0.03396325, -0.059273884, 0.1922813, -0.072151475, -0.010240544, 0.2302027, 0.12385962) * go_3(0.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.20170145, -0.08203941, -0.028107846, -0.18003726, 0.44744352, -0.13190243, 0.13233365, 0.03626546, 0.085763134, -0.25613126, -0.11213388, 0.15529087, -0.271649, 0.050587676, -0.062583975, 0.057289865) * go_3(0.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.040649455, -0.17949733, 0.35847965, -0.040587306, 0.24314344, -0.23811667, 0.13958354, 0.04961874, 0.09858903, -0.04202913, -0.21850993, 0.0700419, -0.09130745, -0.096835814, 0.0022782686, -0.25416258) * go_3(0.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.08215545, -0.019647893, 0.055263475, 0.053733055, 0.098485716, -0.1041945, -0.06541415, -0.08868577, -0.07262986, 0.03513784, -0.110529095, -0.03369232, 0.056786604, 0.2569229, -0.05931065, -0.22081214) * go_3(1.0, -1.0);
[   2.042][d][vo/gpu/d3d11] [ 87]     result += mat4(0.066926084, 0.029664058, -0.10779271, 0.11026963, 0.23927264, -0.16914488, 0.022947345, 0.12303853, -0.07066212, -0.013205378, 0.15348643, 0.035568032, 0.20966691, 0.010149819, -0.08814468, -0.064854674) * go_3(1.0, 0.0);
[   2.042][d][vo/gpu/d3d11] [ 88]     result += mat4(0.11493852, -0.074924305, -0.14840698, -0.16956823, 0.056806292, -0.06387947, -0.06880271, -0.04637334, -0.1929893, 0.18226422, 0.064644486, -0.1594863, 0.027403917, 0.13951495, -0.06569123, -0.07700207) * go_3(1.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.043347504, -0.20504741, -0.037821215, -0.014486937);
[   2.042][d][vo/gpu/d3d11] [ 90]     return result;
[   2.042][d][vo/gpu/d3d11] [ 91] }
[   2.042][d][vo/gpu/d3d11] [ 92] void main() {
[   2.042][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.042][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.042][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.042][d][vo/gpu/d3d11] [ 96] }
[   2.042][d][vo/gpu/d3d11] HLSL source:
[   2.042][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.042][d][vo/gpu/d3d11] [  2] {
[   2.042][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.042][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.042][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.042][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.042][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.042][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.042][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.042][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.042][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.042][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.042][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.042][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.042][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.042][d][vo/gpu/d3d11] [ 16] };
[   2.042][d][vo/gpu/d3d11] [ 17] 
[   2.042][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.042][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.042][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.042][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.042][d][vo/gpu/d3d11] [ 22] 
[   2.042][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.042][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.042][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.042][d][vo/gpu/d3d11] [ 26] 
[   2.042][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.042][d][vo/gpu/d3d11] [ 28] {
[   2.042][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.042][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.042][d][vo/gpu/d3d11] [ 31] };
[   2.042][d][vo/gpu/d3d11] [ 32] 
[   2.042][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.042][d][vo/gpu/d3d11] [ 34] {
[   2.042][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.042][d][vo/gpu/d3d11] [ 36] };
[   2.042][d][vo/gpu/d3d11] [ 37] 
[   2.042][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.042][d][vo/gpu/d3d11] [ 39] {
[   2.042][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.042][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.01813473738729953765869140625f, -0.2296755015850067138671875f, -0.072767250239849090576171875f, -0.0297953672707080841064453125f), float4(0.0538205094635486602783203125f, 0.092847414314746856689453125f, -0.02446972765028476715087890625f, -0.16746850311756134033203125f), float4(0.0017946450971066951751708984375f, 0.3007465302944183349609375f, 0.00341956946067512035369873046875f, -0.0489226095378398895263671875f), float4(0.18229688704013824462890625f, -0.20116119086742401123046875f, -0.12702174484729766845703125f, -0.082591079175472259521484375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.13576950132846832275390625f, -0.08149211108684539794921875f, 0.093144528567790985107421875f, -0.21966846287250518798828125f), float4(0.347407162189483642578125f, 0.04360641539096832275390625f, 0.042259030044078826904296875f, 0.0344498343765735626220703125f), float4(0.17248214781284332275390625f, 0.391482830047607421875f, -0.13868807256221771240234375f, -0.010550686158239841461181640625f), float4(0.044238455593585968017578125f, -0.096934638917446136474609375f, -0.0050449850969016551971435546875f, 0.243832886219024658203125f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.19959370791912078857421875f, 0.098685324192047119140625f, 0.0587469451129436492919921875f, 0.0105807483196258544921875f), float4(0.080515138804912567138671875f, 0.031898863613605499267578125f, 0.017556063830852508544921875f, 0.13004355132579803466796875f), float4(-0.0172765292227268218994140625f, 0.110440187156200408935546875f, 0.040673427283763885498046875f, -0.2006459534168243408203125f), float4(-0.23321066796779632568359375f, 0.063986860215663909912109375f, -0.19126236438751220703125f, -0.243085801601409912109375f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.12870286405086517333984375f, -0.1134555339813232421875f, 0.23722827434539794921875f, 0.070718593895435333251953125f), float4(0.19049988687038421630859375f, -0.19272990524768829345703125f, -0.063438452780246734619140625f, 0.113127775490283966064453125f), float4(0.08253030478954315185546875f, -0.109725259244441986083984375f, -0.090779535472393035888671875f, 0.057315818965435028076171875f), float4(0.11018802225589752197265625f, -0.1804915368556976318359375f, 0.09269507229328155517578125f, -0.103045761585235595703125f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(0.15513484179973602294921875f, 0.066595830023288726806640625f, 0.0812529623508453369140625f, -0.012350323610007762908935546875f), float4(-0.0949278771877288818359375f, 0.504830300807952880859375f, 0.13206847012042999267578125f, 0.39554297924041748046875f), float4(0.289537370204925537109375f, -0.20913891494274139404296875f, -0.2678156197071075439453125f, -0.17539899051189422607421875f), float4(0.023778773844242095947265625f, 0.2971681654453277587890625f, 0.157684862613677978515625f, 0.377026081085205078125f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.0724461972713470458984375f, 0.0155713558197021484375f, -0.0322172455489635467529296875f, 0.0050658923573791980743408203125f), float4(-0.227084457874298095703125f, 0.0396880917251110076904296875f, 0.0167538262903690338134765625f, 0.00256687519140541553497314453125f), float4(-0.055932112038135528564453125f, 0.113931603729724884033203125f, 0.19766758382320404052734375f, -0.03002726472914218902587890625f), float4(-0.17384295165538787841796875f, 0.15013468265533447265625f, -0.00700177066028118133544921875f, -0.09469027817249298095703125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.07836155593395233154296875f, -0.095420099794864654541015625f, -0.006358101032674312591552734375f, 0.040500037372112274169921875f), float4(0.419045388698577880859375f, -0.17622913420200347900390625f, -0.0723479092121124267578125f, 0.0546255894005298614501953125f), float4(0.1864108741283416748046875f, 0.0583135969936847686767578125f, -0.01807850040495395660400390625f, 0.13818781077861785888671875f), float4(-0.14640772342681884765625f, 0.06994859874248504638671875f, 0.00736639462411403656005859375f, -0.07678985595703125f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(-0.2142119109630584716796875f, 0.0873606204986572265625f, 0.09041225910186767578125f, 0.036085851490497589111328125f), float4(0.0276997201144695281982421875f, 0.096412889659404754638671875f, 0.1182462275028228759765625f, 0.05653645098209381103515625f), float4(0.16464607417583465576171875f, 0.19839553534984588623046875f, -0.1337954699993133544921875f, 0.0544171035289764404296875f), float4(0.067530684173107147216796875f, 0.1897157132625579833984375f, 0.13785432279109954833984375f, -0.09763981401920318603515625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.326580047607421875f, -0.1460602283477783203125f, -0.06944866478443145751953125f, 0.0329982750117778778076171875f), float4(-0.283314228057861328125f, 0.001190073206089437007904052734375f, -0.0203042067587375640869140625f, -0.1353589594364166259765625f), float4(0.082983471453189849853515625f, 0.0455096773803234100341796875f, -0.0305039547383785247802734375f, -0.0375041477382183074951171875f), float4(0.0499558150768280029296875f, 0.09257709980010986328125f, 0.0005853497423231601715087890625f, -0.123980320990085601806640625f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.29558360576629638671875f, 0.2905931770801544189453125f, -0.0181966722011566162109375f, -0.35866606235504150390625f), float4(-0.0130943097174167633056640625f, 0.0354031510651111602783203125f, 0.010609202086925506591796875f, 0.119568116962909698486328125f), float4(0.102962292730808258056640625f, 0.2253630161285400390625f, 0.015201129019260406494140625f, -0.23797737061977386474609375f), float4(-0.16960851848125457763671875f, -0.1141478717327117919921875f, -0.034440614283084869384765625f, 0.112644605338573455810546875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.14952518045902252197265625f, 0.07024435698986053466796875f, -0.083184875547885894775390625f, -0.0814616978168487548828125f), float4(-0.13303638994693756103515625f, 0.01615937240421772003173828125f, -0.13521517813205718994140625f, 0.2221333980560302734375f), float4(-0.0566178373992443084716796875f, 0.12958298623561859130859375f, 0.064461655914783477783203125f, -0.20146395266056060791015625f), float4(-0.16023181378841400146484375f, 0.2640757858753204345703125f, 0.275288045406341552734375f, -0.1426517963409423828125f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.0438236296176910400390625f, 0.098560027778148651123046875f, -0.085614420473575592041015625f, -0.15699927508831024169921875f), float4(-0.12106977403163909912109375f, 0.0468538291752338409423828125f, -0.009170196950435638427734375f, -0.03148965537548065185546875f), float4(0.1873017847537994384765625f, 0.238442003726959228515625f, 0.22497098147869110107421875f, 0.032015144824981689453125f), float4(-0.03709115087985992431640625f, 0.15350790321826934814453125f, 0.21674157679080963134765625f, 0.10678018629550933837890625f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.122009523212909698486328125f, 0.242242634296417236328125f, 0.0340975038707256317138671875f, -0.0281795226037502288818359375f), float4(-0.011962495744228363037109375f, -0.0448948703706264495849609375f, -0.0519882701337337493896484375f, 0.221949279308319091796875f), float4(-0.04540087282657623291015625f, -0.04982854425907135009765625f, 0.11147795617580413818359375f, -0.098361603915691375732421875f), float4(0.12788994610309600830078125f, -0.01609333418309688568115234375f, -0.19886432588100433349609375f, -0.011161483824253082275390625f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(0.3056371212005615234375f, 0.0130717270076274871826171875f, -0.004799882881343364715576171875f, 0.12888051569461822509765625f), float4(-0.25949800014495849609375f, -0.041566677391529083251953125f, 0.073111243546009063720703125f, 0.16232399642467498779296875f), float4(0.283716678619384765625f, -0.0046937428414821624755859375f, -0.00193953444249927997589111328125f, 0.0293582417070865631103515625f), float4(0.08730284869670867919921875f, 0.121845088899135589599609375f, 0.055084370076656341552734375f, 0.0484390966594219207763671875f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(0.1276085674762725830078125f, 0.1158131659030914306640625f, -0.2176949977874755859375f, -0.106298707425594329833984375f), float4(-0.2273660004138946533203125f, 0.090304262936115264892578125f, -0.1531371176242828369140625f, 0.0205289460718631744384765625f), float4(-0.207437336444854736328125f, 0.08858354389667510986328125f, 0.0459405295550823211669921875f, -0.22891993820667266845703125f), float4(0.18949282169342041015625f, -0.0421865768730640411376953125f, -0.1733051240444183349609375f, -0.0107113607227802276611328125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.02950319461524486541748046875f, 0.0063797612674534320831298828125f, -0.17004285752773284912109375f, -0.096844054758548736572265625f), float4(0.010218097828328609466552734375f, 0.0424723289906978607177734375f, 0.02362808026373386383056640625f, 0.1470080912113189697265625f), float4(-0.080823637545108795166015625f, 0.11159671843051910400390625f, -0.01850525476038455963134765625f, -0.15228582918643951416015625f), float4(0.15693731606006622314453125f, -0.02535915374755859375f, 0.024829186499118804931640625f, 0.19431920349597930908203125f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(-0.0391293205320835113525390625f, -0.2198902666568756103515625f, 0.122030280530452728271484375f, 0.187022745609283447265625f), float4(-0.118537984788417816162109375f, 0.21039696037769317626953125f, 0.091020606458187103271484375f, 0.012288878671824932098388671875f), float4(0.031666897237300872802734375f, 0.1318455040454864501953125f, -0.049014039337635040283203125f, -0.075160630047321319580078125f), float4(-0.447826683521270751953125f, 0.0488450117409229278564453125f, 0.04707087576389312744140625f, 0.008728357963263988494873046875f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.08669100701808929443359375f, 0.305346310138702392578125f, -0.08963946998119354248046875f, 0.0034188698045909404754638671875f), float4(-0.070004664361476898193359375f, 0.06478847563266754150390625f, 0.0937370359897613525390625f, 0.0700509250164031982421875f), float4(0.1272842884063720703125f, -0.13179256021976470947265625f, -0.014913502149283885955810546875f, 0.093081362545490264892578125f), float4(-0.0276389420032501220703125f, 0.008638710714876651763916015625f, 0.08794172108173370361328125f, -0.0553109310567378997802734375f)));
[   2.042][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(0.072842098772525787353515625f, 0.0787235796451568603515625f, 0.114547483623027801513671875f, 0.08497922122478485107421875f), float4(0.071820415556430816650390625f, -0.11789207160472869873046875f, -0.081841967999935150146484375f, 0.13595880568027496337890625f), float4(-0.21433460712432861328125f, -0.0587608106434345245361328125f, 0.0231721289455890655517578125f, -0.084305107593536376953125f), float4(-0.1927672326564788818359375f, 0.14283359050750732421875f, 0.1560469567775726318359375f, -0.055187486112117767333984375f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.068641684949398040771484375f, 0.273210585117340087890625f, -0.2809107005596160888671875f, 0.127366960048675537109375f), float4(-0.086423672735691070556640625f, 0.0238989330828189849853515625f, -0.1785949766635894775390625f, -0.18299664556980133056640625f), float4(-0.066845871508121490478515625f, -0.122046656906604766845703125f, 0.4589895308017730712890625f, -0.24240110814571380615234375f), float4(0.251820981502532958984375f, -0.043957509100437164306640625f, 0.106372110545635223388671875f, -0.221351444721221923828125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.085207201540470123291015625f, 0.0511330179870128631591796875f, 0.0333316512405872344970703125f, -0.000893821590580046176910400390625f), float4(0.10251267254352569580078125f, 0.0550774000585079193115234375f, 0.041769377887248992919921875f, -0.21259711682796478271484375f), float4(0.2869119942188262939453125f, 0.123342014849185943603515625f, 0.282759010791778564453125f, -0.07301239669322967529296875f), float4(0.1427557468414306640625f, -0.15580742061138153076171875f, -0.1522440612316131591796875f, 0.0453769080340862274169921875f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.0332822501659393310546875f, 0.115639783442020416259765625f, -0.074519641697406768798828125f, 0.03054620884358882904052734375f), float4(-0.0469835102558135986328125f, -0.18544961512088775634765625f, 0.0373504161834716796875f, 0.13969816267490386962890625f), float4(0.0556746013462543487548828125f, -0.063599191606044769287109375f, 0.06478218734264373779296875f, -0.031694926321506500244140625f), float4(0.13396506011486053466796875f, 0.094436116516590118408203125f, -0.0192268602550029754638671875f, -0.062903650104999542236328125f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.074954070150852203369140625f, 0.0634292662143707275390625f, -0.10622121393680572509765625f, -0.085107304155826568603515625f), float4(0.2497816979885101318359375f, -0.4659825265407562255859375f, -0.18833176791667938232421875f, -0.2731128036975860595703125f), float4(-0.1302482187747955322265625f, 0.560535430908203125f, 0.055704466998577117919921875f, -0.1233141422271728515625f), float4(-0.0311990864574909210205078125f, 0.0506118796765804290771484375f, 0.22097112238407135009765625f, -0.66111767292022705078125f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.082769878208637237548828125f, -0.04418434202671051025390625f, -0.0356218516826629638671875f, -0.0615988112986087799072265625f), float4(0.27694225311279296875f, -0.07192964851856231689453125f, -0.08663713932037353515625f, 0.020221777260303497314453125f), float4(0.14095962047576904296875f, -0.062293969094753265380859375f, 0.0513742528855800628662109375f, -0.03815899789333343505859375f), float4(0.106648020446300506591796875f, -0.04130542278289794921875f, 0.051260717213153839111328125f, -0.0546986348927021026611328125f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.12800686061382293701171875f, 0.0348507203161716461181640625f, 0.0399143658578395843505859375f, 0.0340414978563785552978515625f), float4(-0.083057940006256103515625f, -0.046292893588542938232421875f, 0.22765330970287322998046875f, 0.109049223363399505615234375f), float4(0.001393704675137996673583984375f, -0.087503008544445037841796875f, 0.00912620685994625091552734375f, -0.065589435398578643798828125f), float4(0.2837707102298736572265625f, 0.088844358921051025390625f, -0.072348617017269134521484375f, -0.09350274503231048583984375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.113439895212650299072265625f, 0.0608172602951526641845703125f, 0.11223019659519195556640625f, -0.0229369662702083587646484375f), float4(0.1032963693141937255859375f, -0.318161070346832275390625f, -0.051597945392131805419921875f, 0.2384602725505828857421875f), float4(-0.083913095295429229736328125f, -0.2987226545810699462890625f, -0.040147282183170318603515625f, -0.08981917798519134521484375f), float4(-0.04329814016819000244140625f, -0.123396933078765869140625f, -0.034489952027797698974609375f, 0.013393211178481578826904296875f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.330916881561279296875f, 0.17262969911098480224609375f, 0.034332044422626495361328125f, -0.091396205127239227294921875f), float4(0.15434311330318450927734375f, -0.00228708446957170963287353515625f, -0.15506188571453094482421875f, 0.087104909121990203857421875f), float4(-0.16063524782657623291015625f, 0.042252056300640106201171875f, 0.0170864574611186981201171875f, 0.0813479721546173095703125f), float4(0.086313210427761077880859375f, 0.0378431379795074462890625f, 0.088296554982662200927734375f, 0.0064518083818256855010986328125f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(0.091610513627529144287109375f, 0.114355795085430145263671875f, -0.15304486453533172607421875f, -0.03053715266287326812744140625f), float4(0.1835367977619171142578125f, -0.3287635147571563720703125f, 0.03119792602956295013427734375f, 0.09717476367950439453125f), float4(0.0427685193717479705810546875f, 0.1132503449916839599609375f, 0.0594903789460659027099609375f, -0.105995632708072662353515625f), float4(0.435747921466827392578125f, -0.060788117349147796630859375f, 0.18409383296966552734375f, 0.12678055465221405029296875f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.01835686527192592620849609375f, -0.007257818244397640228271484375f, 0.12020777165889739990234375f, -0.013127592392265796661376953125f), float4(0.201366364955902099609375f, -0.229843616485595703125f, 0.068962238729000091552734375f, 0.000449827522970736026763916015625f), float4(0.008428429253399372100830078125f, -0.123316936194896697998046875f, -0.099892862141132354736328125f, 0.07824878394603729248046875f), float4(-0.16313676536083221435546875f, -0.0030203131027519702911376953125f, -0.4628501832485198974609375f, -0.089671246707439422607421875f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.034514971077442169189453125f, -0.108645021915435791015625f, 0.13207638263702392578125f, 0.17194521427154541015625f), float4(0.0037514758296310901641845703125f, -0.20222198963165283203125f, -0.1253508627414703369140625f, 0.001511977054178714752197265625f), float4(0.05629448592662811279296875f, -0.2112897932529449462890625f, 0.078261315822601318359375f, 0.101187460124492645263671875f), float4(-0.044742293655872344970703125f, 0.217933833599090576171875f, -0.19927902519702911376953125f, -0.2133829295635223388671875f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.0349037759006023406982421875f, -0.10167084634304046630859375f, 0.03106633387506008148193359375f, 0.03799580037593841552734375f), float4(0.20532596111297607421875f, -0.17457838356494903564453125f, 0.16556815803050994873046875f, -0.00216191518120467662811279296875f), float4(0.0268266499042510986328125f, 0.0339632518589496612548828125f, -0.05927388370037078857421875f, 0.192281305789947509765625f), float4(-0.072151474654674530029296875f, -0.0102405436336994171142578125f, 0.2302027046680450439453125f, 0.123859621584415435791015625f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.20170144736766815185546875f, -0.082039408385753631591796875f, -0.02810784615576267242431640625f, -0.1800372600555419921875f), float4(0.4474435150623321533203125f, -0.1319024264812469482421875f, 0.13233365118503570556640625f, 0.0362654589116573333740234375f), float4(0.085763134062290191650390625f, -0.2561312615871429443359375f, -0.112133882939815521240234375f, 0.1552908718585968017578125f), float4(-0.27164900302886962890625f, 0.050587676465511322021484375f, -0.062583975493907928466796875f, 0.0572898648679256439208984375f)));
[   2.043][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.0406494550406932830810546875f, -0.1794973313808441162109375f, 0.3584796488285064697265625f, -0.04058730602264404296875f), float4(0.24314343929290771484375f, -0.23811666667461395263671875f, 0.13958354294300079345703125f, 0.0496187396347522735595703125f), float4(0.0985890328884124755859375f, -0.0420291312038898468017578125f, -0.21850992739200592041015625f, 0.070041902363300323486328125f), float4(-0.09130744636058807373046875f, -0.096835814416408538818359375f, 0.00227826857008039951324462890625f, -0.2541625797748565673828125f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.08215545117855072021484375f, -0.0196478925645351409912109375f, 0.05526347458362579345703125f, 0.0537330545485019683837890625f), float4(0.098485715687274932861328125f, -0.104194499552249908447265625f, -0.065414153039455413818359375f, -0.088685773313045501708984375f), float4(-0.072629861533641815185546875f, 0.035137839615345001220703125f, -0.1105290949344635009765625f, -0.0336923189461231231689453125f), float4(0.056786604225635528564453125f, 0.256922900676727294921875f, -0.0593106485903263092041015625f, -0.220812141895294189453125f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.066926084458827972412109375f, 0.0296640582382678985595703125f, -0.107792712748050689697265625f, 0.110269628465175628662109375f), float4(0.23927263915538787841796875f, -0.16914488375186920166015625f, 0.0229473449289798736572265625f, 0.1230385303497314453125f), float4(-0.070662118494510650634765625f, -0.013205378316342830657958984375f, 0.153486430644989013671875f, 0.0355680324137210845947265625f), float4(0.209666907787322998046875f, 0.010149818845093250274658203125f, -0.088144682347774505615234375f, -0.064854674041271209716796875f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.114938519895076751708984375f, -0.07492430508136749267578125f, -0.148406982421875f, -0.16956822574138641357421875f), float4(0.0568062923848628997802734375f, -0.063879467546939849853515625f, -0.068802706897258758544921875f, -0.0463733412325382232666015625f), float4(-0.19298930466175079345703125f, 0.18226422369480133056640625f, 0.0646444857120513916015625f, -0.159486293792724609375f), float4(0.0274039171636104583740234375f, 0.1395149528980255126953125f, -0.0656912326812744140625f, -0.077002070844173431396484375f)))) + float4(-0.0433475039899349212646484375f, -0.20504741370677947998046875f, -0.0378212146461009979248046875f, -0.01448693685233592987060546875f);
[   2.043][d][vo/gpu/d3d11] [ 61] }
[   2.043][d][vo/gpu/d3d11] [ 62] 
[   2.043][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.043][d][vo/gpu/d3d11] [ 64] {
[   2.043][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.043][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.043][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.043][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.043][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.043][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.043][d][vo/gpu/d3d11] [ 71] }
[   2.043][d][vo/gpu] Resizing texture: 1920x800
[   2.045][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.047][v][vo/gpu/d3d11] Compiled a vertex shader in 4309us
[   2.047][v][vo/gpu/d3d11] shaderc: 2552us, SPIRV-Cross: 123us, D3DCompile: 1634us
[   2.047][d][vo/gpu/d3d11] GLSL source:
[   2.047][d][vo/gpu/d3d11] [  1] #version 450
[   2.047][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.047][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.047][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.047][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.047][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.047][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.047][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.047][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.047][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.047][d][vo/gpu/d3d11] [ 11] void main() {
[   2.047][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.047][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.047][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.047][d][vo/gpu/d3d11] [ 15] }
[   2.047][d][vo/gpu/d3d11] HLSL source:
[   2.047][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.047][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.047][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.047][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.047][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.047][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.047][d][vo/gpu/d3d11] [  7] 
[   2.047][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.047][d][vo/gpu/d3d11] [  9] {
[   2.047][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.047][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.047][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.047][d][vo/gpu/d3d11] [ 13] };
[   2.047][d][vo/gpu/d3d11] [ 14] 
[   2.047][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.047][d][vo/gpu/d3d11] [ 16] {
[   2.047][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.047][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.047][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.047][d][vo/gpu/d3d11] [ 20] };
[   2.047][d][vo/gpu/d3d11] [ 21] 
[   2.047][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.047][d][vo/gpu/d3d11] [ 23] {
[   2.047][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.047][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.047][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.047][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.047][d][vo/gpu/d3d11] [ 28] }
[   2.047][d][vo/gpu/d3d11] [ 29] 
[   2.047][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.047][d][vo/gpu/d3d11] [ 31] {
[   2.047][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.047][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.047][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.047][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.047][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.047][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.047][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.047][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.047][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.047][d][vo/gpu/d3d11] [ 41] }
[   2.071][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.119][v][vo/gpu/d3d11] Compiled a fragment shader in 72050us
[   2.119][v][vo/gpu/d3d11] shaderc: 24350us, SPIRV-Cross: 2552us, D3DCompile: 45148us
[   2.119][d][vo/gpu/d3d11] GLSL source:
[   2.119][d][vo/gpu/d3d11] [  1] #version 450
[   2.119][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.119][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.119][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.119][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.119][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.119][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.119][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.119][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.119][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.119][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.119][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.119][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.119][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.119][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.119][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.119][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.119][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.119][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.119][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.119][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.119][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.119][d][vo/gpu/d3d11] [ 23] };
[   2.119][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.119][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.119][d][vo/gpu/d3d11] [ 26] #define conv2d_4_tf_raw texture0
[   2.119][d][vo/gpu/d3d11] [ 27] #define conv2d_4_tf_pos texcoord0
[   2.119][d][vo/gpu/d3d11] [ 28] #define conv2d_4_tf_size texture_size0
[   2.119][d][vo/gpu/d3d11] [ 29] #define conv2d_4_tf_rot texture_rot0
[   2.119][d][vo/gpu/d3d11] [ 30] #define conv2d_4_tf_off texture_off0
[   2.119][d][vo/gpu/d3d11] [ 31] #define conv2d_4_tf_pt pixel_size0
[   2.119][d][vo/gpu/d3d11] [ 32] #define conv2d_4_tf_map texmap0
[   2.119][d][vo/gpu/d3d11] [ 33] #define conv2d_4_tf_mul 1.000000
[   2.119][d][vo/gpu/d3d11] [ 34] #define conv2d_4_tf_tex(pos) (conv2d_4_tf_mul * vec4(texture(conv2d_4_tf_raw, pos)).rgba)
[   2.119][d][vo/gpu/d3d11] [ 35] #define conv2d_4_tf_gather(pos, c) (conv2d_4_tf_mul * vec4(textureGather(conv2d_4_tf_raw, pos, c)))
[   2.119][d][vo/gpu/d3d11] [ 36] #define conv2d_4_tf_texOff(off) conv2d_4_tf_tex(conv2d_4_tf_pos + conv2d_4_tf_pt * vec2(off))
[   2.119][d][vo/gpu/d3d11] [ 37] #define conv2d_4_tf1_raw texture1
[   2.119][d][vo/gpu/d3d11] [ 38] #define conv2d_4_tf1_pos texcoord1
[   2.119][d][vo/gpu/d3d11] [ 39] #define conv2d_4_tf1_size texture_size1
[   2.119][d][vo/gpu/d3d11] [ 40] #define conv2d_4_tf1_rot texture_rot1
[   2.119][d][vo/gpu/d3d11] [ 41] #define conv2d_4_tf1_off texture_off1
[   2.119][d][vo/gpu/d3d11] [ 42] #define conv2d_4_tf1_pt pixel_size1
[   2.119][d][vo/gpu/d3d11] [ 43] #define conv2d_4_tf1_map texmap1
[   2.119][d][vo/gpu/d3d11] [ 44] #define conv2d_4_tf1_mul 1.000000
[   2.119][d][vo/gpu/d3d11] [ 45] #define conv2d_4_tf1_tex(pos) (conv2d_4_tf1_mul * vec4(texture(conv2d_4_tf1_raw, pos)).rgba)
[   2.119][d][vo/gpu/d3d11] [ 46] #define conv2d_4_tf1_gather(pos, c) (conv2d_4_tf1_mul * vec4(textureGather(conv2d_4_tf1_raw, pos, c)))
[   2.119][d][vo/gpu/d3d11] [ 47] #define conv2d_4_tf1_texOff(off) conv2d_4_tf1_tex(conv2d_4_tf1_pos + conv2d_4_tf1_pt * vec2(off))
[   2.119][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.119][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.119][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.119][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.119][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.119][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.047881734, -0.09396414, -0.2839081, 0.3140853, 0.052613556, 0.09940423, 0.23960467, -0.022228222, -0.12065009, 0.07898222, 0.08657881, 0.010852739, -0.050450284, 0.01683982, 0.031813968, 0.053060856) * go_0(-1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.10252411, -0.03116448, -0.30114275, -0.0316799, -0.017501019, -0.03006003, -0.2095696, 0.10134927, -0.3901916, -0.15335023, -0.11955071, 0.1337449, 0.101239376, -0.25044814, 0.2128469, 0.018979514) * go_0(-1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 55]     result += mat4(-0.13392173, 0.052036732, 0.1682114, -0.026263753, 0.027221246, -0.15121374, 0.13723798, 0.08950682, -0.1182108, -0.07294226, 0.023392374, 0.052329235, -0.05632852, -0.07036173, 0.06872573, 0.05238042) * go_0(-1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 56]     result += mat4(0.18112028, 0.18242362, -0.06812871, 0.032463413, 0.124638766, -0.26765212, -0.07678663, 0.33806562, 0.09674393, 0.15574542, 0.23634006, -0.02873782, -0.1626769, -0.14760062, -0.007274849, 0.09866139) * go_0(0.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.10726673, -0.10925056, 0.19967109, -0.19936769, 0.15942842, -0.14870064, 0.15493345, -0.08489036, -0.49053356, -0.17321263, 0.28426084, 0.18721215, -0.09898434, -0.2751838, -0.11833524, 0.028445128) * go_0(0.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.11788817, -0.23724948, -0.046072144, 0.035621114, 0.04527003, -0.0073492974, 0.11097195, 0.06806836, 0.04814677, -0.1408476, -0.1325629, 0.00929532, -0.16699041, -0.03034791, 0.08320368, -0.15429299) * go_0(0.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 59]     result += mat4(0.2729515, 0.008244692, -0.17441982, -0.39026466, 0.17381759, 0.31194404, 0.055934936, 0.20744409, 0.20119062, 0.0734271, 0.0796807, 0.0031037466, -0.0016392237, 0.033733975, 0.07149338, 0.042083208) * go_0(1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 60]     result += mat4(0.07985744, 0.10945015, 0.018472541, 0.1397503, 0.2005682, 0.42641, 0.23022486, -0.2916921, 0.028285174, -0.31885162, -0.27070364, -0.10390779, 0.0751492, 0.12752363, -0.2279459, 0.08998453) * go_0(1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 61]     result += mat4(0.18450491, -0.140783, -0.008006845, 0.09029298, 0.12536179, 0.26949662, 0.09491545, 0.063907005, 0.11212244, 0.09778506, -0.1835966, -0.053119674, 0.0072294096, 0.25018227, 0.010868525, -0.22721334) * go_0(1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.028011927, -0.20073172, 0.5976166, -0.19494139, 0.17958745, -0.03838646, 0.058325976, -0.29409218, -0.12793432, 0.03245129, 0.35662368, -0.05048354, -0.13368197, -0.06151968, -0.012714591, -0.1763054) * go_1(-1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 63]     result += mat4(0.18468465, 0.31682113, 0.12818255, -0.117110476, 0.13709468, -0.10034022, -0.07994527, -0.1259309, 0.04067299, -0.1147398, 0.28361055, 0.27916273, 0.03696692, 0.16829546, 0.27819383, 0.08305029) * go_1(-1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.28920117, -0.033877946, 0.01586206, 0.04681198, 0.024248574, -0.045777842, -0.03342128, 0.07525412, -0.063377544, -0.016737273, 0.11235511, -0.04325238, -0.24170023, -0.09993599, -0.03205371, 0.14339828) * go_1(-1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.008357902, -0.11038377, 0.03709221, 0.26775306, 0.07963845, -0.25377446, -0.17630441, -0.10966474, 0.057311732, -0.083327, 0.044497233, 0.06903858, -0.26531395, -0.103399664, -0.14806591, 0.269314) * go_1(0.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 66]     result += mat4(0.05450808, -0.041993964, -0.07217651, 0.034468375, 0.2117634, 0.0075620585, 0.05825411, -0.2252478, -0.0527787, 0.049732126, -0.032040413, -0.09361454, 0.29585132, 0.018413153, 0.18384546, -0.024226356) * go_1(0.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.031109914, 0.19351351, 0.07405522, -0.06313074, -0.09983541, -0.011495182, 0.11749038, -0.16775608, 0.2790974, -0.09338754, 0.07913264, 0.103792936, -0.18679164, -0.15639925, 0.112943865, 0.07930375) * go_1(0.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 68]     result += mat4(0.004106195, -0.036833283, 0.12908752, 0.12869535, -0.02472107, 0.17561707, -0.025890926, -0.18789047, 0.096218705, -0.16306408, -0.02198454, -0.010134957, -0.09710009, 0.002062143, -0.046785697, 0.0029441968) * go_1(1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 69]     result += mat4(0.19648251, -0.015663045, -0.0730215, 0.028611008, 0.13529862, -0.015256192, -0.04119306, -0.24628192, 0.02601027, -0.21184283, -0.1962902, 0.09109358, -0.06792383, 0.092336476, 0.12215351, -0.08596062) * go_1(1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.17530201, -0.0351919, -0.31872514, -0.13933206, -0.07000922, -0.049807087, 0.0010997375, -0.033573963, 0.07442056, -0.33290103, -0.40381998, 0.09435, -0.3280128, -0.09953127, -0.11283648, 0.20685865) * go_1(1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.052573867, -0.035328753, -0.11132943, -0.17515652, 0.05021051, 0.058642425, -0.046640664, 0.0799107, -0.027398815, -0.33619994, -0.22135767, 0.07894002, -0.14941697, -0.0940996, -0.11655085, 0.049795926) * go_2(-1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 72]     result += mat4(-0.039301276, 0.041062318, 0.20312686, -0.009338705, 0.013706282, -0.0245852, 0.03458311, 0.09601228, -0.18203016, -0.012260314, 0.17984508, -0.056576703, -0.102844186, 0.24047872, 0.05307189, 0.16066082) * go_2(-1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 73]     result += mat4(0.1478775, 0.0046362123, 0.05459521, 0.07162838, -0.01896149, 0.23700175, -0.14174299, 0.06988599, -0.32545477, -0.08065096, -0.061227743, -0.0010796773, 0.094327345, -0.20760082, -0.19523263, 0.19859222) * go_2(-1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.049676366, -0.10381536, 0.02546116, -0.13127093, 0.10954914, 0.0048147943, 0.06962328, -0.30456528, -0.11956627, 0.0150488885, -0.10711722, 0.1684613, -0.1939089, -0.10577047, -0.11980919, -0.036988296) * go_2(0.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 75]     result += mat4(-0.054795764, 0.09491116, -0.08494948, 0.059765853, 0.0131597435, 0.20786162, 0.11999637, 0.024381055, 0.22830428, 0.027053319, -0.011646274, -0.12145409, -0.07899559, -0.012688263, 0.10684157, 0.3824219) * go_2(0.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.23994572, -0.0031532666, -0.0050638164, 0.14236279, 0.05690383, -0.06259682, 0.052624144, 0.20461404, -0.19230312, -0.11072268, 0.013023965, 0.08931543, -0.21997221, 0.11760443, -0.40943825, 0.28656834) * go_2(0.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.06606179, 0.26007771, 0.033754125, 0.119690455, 0.024669139, -0.06752839, 0.12688096, -0.0063201943, -0.17123021, 0.07548857, -0.14213699, 0.034093797, -0.15632647, -0.123243414, -0.42634043, 0.1715022) * go_2(1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.046503466, 0.13876389, 0.17973013, -0.25938338, -0.18824704, -0.11876702, 0.31065792, -0.041042212, -0.061369427, 0.2057992, 0.17295738, 0.3836555, -0.21109799, -0.10167118, 0.16577047, 0.113483034) * go_2(1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.24534856, -0.014482421, 0.22515748, -0.12773542, 0.12794174, -0.02528619, 0.41710484, 0.09154934, -0.17805946, -0.25428918, 0.07294183, 0.047079418, -0.30949152, -0.08919157, 0.17888431, 0.17706038) * go_2(1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.1741826, 0.046225294, -0.10761791, 0.2619953, 0.007373745, 0.05104337, -0.22309966, 0.34529984, -0.034363825, -0.022187237, -0.08609555, 0.16842419, 0.28136057, 0.17843607, -0.11307746, -0.05668021) * go_3(-1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.12310616, -0.29661375, -0.10581025, -0.049584012, 0.19651765, 0.08436489, -0.14533581, -0.029874112, -0.15422897, -0.062741704, -0.22694711, -0.15547274, -0.15181333, 0.0286061, 0.022438493, -0.062447168) * go_3(-1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 82]     result += mat4(0.3497046, -0.09455009, 0.060618952, -0.2134236, 0.054515295, 0.07451165, -0.09267233, -0.010513333, 0.13842636, 0.11563433, -0.054750167, 0.050432, 0.1514256, 0.04284002, -0.2095581, 0.07907657) * go_3(-1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.11745651, -0.04717057, 0.085377194, -0.065956995, 0.07280491, 0.2730059, 0.11088276, 0.2437957, 0.14018989, 0.1164107, -0.09516929, 0.0022427947, 0.111544006, -0.0680495, 0.09324579, -0.12482022) * go_3(0.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.07995795, -0.03387884, 0.019846136, 0.10231208, -0.07017192, 0.18659039, 0.035161644, 0.101182766, -0.14901665, 0.21307294, 0.063894205, -0.27546507, -0.24792959, -0.067731075, 0.13146006, -0.19333683) * go_3(0.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 85]     result += mat4(0.034206454, 0.1472648, -0.07406727, 0.014654025, 0.18703444, 0.1319857, -0.10610886, 0.08427947, -0.017536618, -0.06487879, -0.12095286, -0.050414838, 0.03260879, 0.1558894, -0.031887084, 0.11840288) * go_3(0.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 86]     result += mat4(0.114811294, -0.14574333, -0.09392587, 0.042283528, 0.08919092, 0.18259068, 0.0980717, 0.21024778, -0.1280008, -0.027260462, -0.1129027, 0.18722472, 0.13733985, 0.047153983, 0.030871978, 0.1998385) * go_3(1.0, -1.0);
[   2.119][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.06783575, 0.004612595, 0.1153467, -0.11531557, -0.048889533, 0.07673577, -0.02041786, 0.22744459, -0.13092506, 0.13484807, 0.40003043, -0.053706612, -0.16985156, -0.04791236, -0.052443005, -0.08363625) * go_3(1.0, 0.0);
[   2.119][d][vo/gpu/d3d11] [ 88]     result += mat4(0.18187882, 0.017893985, 0.17856054, 0.005413129, 0.014147176, 0.15102178, 0.12436294, -0.02176765, -0.16727823, -0.0364111, 0.17074408, 0.12899421, 0.31984514, -0.0072070034, 0.031895883, -0.1991405) * go_3(1.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.011865144, 0.11717201, -0.13823777, -0.059450272);
[   2.119][d][vo/gpu/d3d11] [ 90]     return result;
[   2.119][d][vo/gpu/d3d11] [ 91] }
[   2.119][d][vo/gpu/d3d11] [ 92] void main() {
[   2.119][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.119][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.119][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.119][d][vo/gpu/d3d11] [ 96] }
[   2.119][d][vo/gpu/d3d11] HLSL source:
[   2.119][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.119][d][vo/gpu/d3d11] [  2] {
[   2.119][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.119][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.119][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.120][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.120][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.120][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.120][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.120][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.120][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.120][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.120][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.120][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.120][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.120][d][vo/gpu/d3d11] [ 16] };
[   2.120][d][vo/gpu/d3d11] [ 17] 
[   2.120][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.120][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.120][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.120][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.120][d][vo/gpu/d3d11] [ 22] 
[   2.120][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.120][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.120][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.120][d][vo/gpu/d3d11] [ 26] 
[   2.120][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.120][d][vo/gpu/d3d11] [ 28] {
[   2.120][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.120][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.120][d][vo/gpu/d3d11] [ 31] };
[   2.120][d][vo/gpu/d3d11] [ 32] 
[   2.120][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.120][d][vo/gpu/d3d11] [ 34] {
[   2.120][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.120][d][vo/gpu/d3d11] [ 36] };
[   2.120][d][vo/gpu/d3d11] [ 37] 
[   2.120][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.120][d][vo/gpu/d3d11] [ 39] {
[   2.120][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.120][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.0478817336261272430419921875f, -0.093964137136936187744140625f, -0.2839080989360809326171875f, 0.314085304737091064453125f), float4(0.052613556385040283203125f, 0.09940423071384429931640625f, 0.23960466682910919189453125f, -0.0222282223403453826904296875f), float4(-0.120650090277194976806640625f, 0.07898221909999847412109375f, 0.086578808724880218505859375f, 0.01085273921489715576171875f), float4(-0.0504502840340137481689453125f, 0.0168398208916187286376953125f, 0.0318139679729938507080078125f, 0.0530608557164669036865234375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.102524109184741973876953125f, -0.03116448037326335906982421875f, -0.301142752170562744140625f, -0.0316798985004425048828125f), float4(-0.017501018941402435302734375f, -0.030060030519962310791015625f, -0.2095696032047271728515625f, 0.101349271833896636962890625f), float4(-0.390191614627838134765625f, -0.15335023403167724609375f, -0.119550712406635284423828125f, 0.133744895458221435546875f), float4(0.101239375770092010498046875f, -0.2504481375217437744140625f, 0.2128469049930572509765625f, 0.01897951401770114898681640625f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(-0.13392172753810882568359375f, 0.0520367324352264404296875f, 0.168211400508880615234375f, -0.02626375295221805572509765625f), float4(0.02722124569118022918701171875f, -0.1512137353420257568359375f, 0.13723798096179962158203125f, 0.08950681984424591064453125f), float4(-0.118210799992084503173828125f, -0.072942256927490234375f, 0.02339237369596958160400390625f, 0.052329234778881072998046875f), float4(-0.05632852017879486083984375f, -0.07036173343658447265625f, 0.068725727498531341552734375f, 0.052380420267581939697265625f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.18112027645111083984375f, 0.1824236214160919189453125f, -0.068128712475299835205078125f, 0.0324634127318859100341796875f), float4(0.1246387660503387451171875f, -0.2676521241664886474609375f, -0.076786629855632781982421875f, 0.338065624237060546875f), float4(0.09674392640590667724609375f, 0.1557454168796539306640625f, 0.23634006083011627197265625f, -0.028737820684909820556640625f), float4(-0.1626769006252288818359375f, -0.1476006209850311279296875f, -0.0072748488746583461761474609375f, 0.0986613929271697998046875f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.107266731560230255126953125f, -0.10925056040287017822265625f, 0.199671089649200439453125f, -0.19936768710613250732421875f), float4(0.159428417682647705078125f, -0.14870063960552215576171875f, 0.154933452606201171875f, -0.084890358150005340576171875f), float4(-0.4905335605144500732421875f, -0.17321263253688812255859375f, 0.2842608392238616943359375f, 0.18721215426921844482421875f), float4(-0.098984338343143463134765625f, -0.27518379688262939453125f, -0.118335239589214324951171875f, 0.0284451283514499664306640625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.11788816750049591064453125f, -0.23724947869777679443359375f, -0.0460721440613269805908203125f, 0.035621114075183868408203125f), float4(0.0452700294554233551025390625f, -0.00734929740428924560546875f, 0.110971949994564056396484375f, 0.068068362772464752197265625f), float4(0.04814676940441131591796875f, -0.1408475935459136962890625f, -0.1325629055500030517578125f, 0.00929532013833522796630859375f), float4(-0.16699041426181793212890625f, -0.0303479097783565521240234375f, 0.083203680813312530517578125f, -0.15429298579692840576171875f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.2729515135288238525390625f, 0.008244692347943782806396484375f, -0.174419820308685302734375f, -0.3902646601200103759765625f), float4(0.17381758987903594970703125f, 0.3119440376758575439453125f, 0.0559349358081817626953125f, 0.20744408667087554931640625f), float4(0.2011906206607818603515625f, 0.073427103459835052490234375f, 0.079680703580379486083984375f, 0.0031037465669214725494384765625f), float4(-0.001639223657548427581787109375f, 0.0337339751422405242919921875f, 0.071493379771709442138671875f, 0.0420832075178623199462890625f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.0798574388027191162109375f, 0.10945014655590057373046875f, 0.0184725411236286163330078125f, 0.139750301837921142578125f), float4(0.20056819915771484375f, 0.4264099895954132080078125f, 0.23022486269474029541015625f, -0.2916921079158782958984375f), float4(0.02828517369925975799560546875f, -0.3188516199588775634765625f, -0.2707036435604095458984375f, -0.103907786309719085693359375f), float4(0.075149200856685638427734375f, 0.1275236308574676513671875f, -0.2279458940029144287109375f, 0.089984528720378875732421875f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.18450491130352020263671875f, -0.14078299701213836669921875f, -0.0080068446695804595947265625f, 0.090292982757091522216796875f), float4(0.12536178529262542724609375f, 0.269496619701385498046875f, 0.094915449619293212890625f, 0.063907004892826080322265625f), float4(0.112122438848018646240234375f, 0.097785063087940216064453125f, -0.18359659612178802490234375f, -0.05311967432498931884765625f), float4(0.0072294096462428569793701171875f, 0.25018227100372314453125f, 0.01086852513253688812255859375f, -0.22721333801746368408203125f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.02801192738115787506103515625f, -0.2007317245006561279296875f, 0.597616612911224365234375f, -0.19494138658046722412109375f), float4(0.1795874536037445068359375f, -0.0383864603936672210693359375f, 0.0583259761333465576171875f, -0.2940921783447265625f), float4(-0.12793432176113128662109375f, 0.0324512906372547149658203125f, 0.3566236793994903564453125f, -0.05048353970050811767578125f), float4(-0.13368196785449981689453125f, -0.0615196786820888519287109375f, -0.0127145908772945404052734375f, -0.17630539834499359130859375f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.18468464910984039306640625f, 0.3168211281299591064453125f, 0.12818254530429840087890625f, -0.11711047589778900146484375f), float4(0.137094676494598388671875f, -0.1003402173519134521484375f, -0.079945273697376251220703125f, -0.12593090534210205078125f), float4(0.0406729914247989654541015625f, -0.114739798009395599365234375f, 0.2836105525493621826171875f, 0.2791627347469329833984375f), float4(0.03696691989898681640625f, 0.16829545795917510986328125f, 0.27819383144378662109375f, 0.083050288259983062744140625f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.2892011702060699462890625f, -0.033877946436405181884765625f, 0.01586206071078777313232421875f, 0.0468119792640209197998046875f), float4(0.0242485739290714263916015625f, -0.04577784240245819091796875f, -0.0334212817251682281494140625f, 0.075254119932651519775390625f), float4(-0.06337754428386688232421875f, -0.01673727296292781829833984375f, 0.11235511302947998046875f, -0.0432523787021636962890625f), float4(-0.241700232028961181640625f, -0.09993599355220794677734375f, -0.0320537090301513671875f, 0.143398284912109375f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.008357902057468891143798828125f, -0.110383771359920501708984375f, 0.0370922088623046875f, 0.267753064632415771484375f), float4(0.0796384513378143310546875f, -0.253774464130401611328125f, -0.17630441486835479736328125f, -0.109664738178253173828125f), float4(0.0573117323219776153564453125f, -0.083327002823352813720703125f, 0.0444972328841686248779296875f, 0.069038577377796173095703125f), float4(-0.2653139531612396240234375f, -0.1033996641635894775390625f, -0.14806590974330902099609375f, 0.269313991069793701171875f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(0.0545080788433551788330078125f, -0.0419939644634723663330078125f, -0.072176508605480194091796875f, 0.034468375146389007568359375f), float4(0.21176339685916900634765625f, 0.0075620585121214389801025390625f, 0.0582541115581989288330078125f, -0.225247800350189208984375f), float4(-0.052778698503971099853515625f, 0.049732126295566558837890625f, -0.0320404134690761566162109375f, -0.093614540994167327880859375f), float4(0.2958513200283050537109375f, 0.0184131525456905364990234375f, 0.183845460414886474609375f, -0.0242263562977313995361328125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.03110991418361663818359375f, 0.19351351261138916015625f, 0.074055217206478118896484375f, -0.06313073635101318359375f), float4(-0.09983541071414947509765625f, -0.01149518229067325592041015625f, 0.1174903810024261474609375f, -0.16775608062744140625f), float4(0.2790974080562591552734375f, -0.093387536704540252685546875f, 0.079132638871669769287109375f, 0.1037929356098175048828125f), float4(-0.18679164350032806396484375f, -0.156399250030517578125f, 0.112943865358829498291015625f, 0.079303748905658721923828125f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.0041061951778829097747802734375f, -0.0368332825601100921630859375f, 0.12908752262592315673828125f, 0.12869535386562347412109375f), float4(-0.02472106926143169403076171875f, 0.1756170690059661865234375f, -0.02589092589914798736572265625f, -0.187890470027923583984375f), float4(0.09621870517730712890625f, -0.16306407749652862548828125f, -0.021984539926052093505859375f, -0.010134956799447536468505859375f), float4(-0.097100086510181427001953125f, 0.00206214305944740772247314453125f, -0.04678569734096527099609375f, 0.00294419680722057819366455078125f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.1964825093746185302734375f, -0.01566304452717304229736328125f, -0.0730215013027191162109375f, 0.0286110080778598785400390625f), float4(0.13529862463474273681640625f, -0.015256191603839397430419921875f, -0.041193060576915740966796875f, -0.246281921863555908203125f), float4(0.02601026929914951324462890625f, -0.211842834949493408203125f, -0.196290194988250732421875f, 0.091093577444553375244140625f), float4(-0.06792382895946502685546875f, 0.092336475849151611328125f, 0.122153513133525848388671875f, -0.085960619151592254638671875f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.17530201375484466552734375f, -0.035191901028156280517578125f, -0.3187251389026641845703125f, -0.1393320560455322265625f), float4(-0.07000921666622161865234375f, -0.04980708658695220947265625f, 0.001099737477488815784454345703125f, -0.033573962748050689697265625f), float4(0.07442055642604827880859375f, -0.3329010307788848876953125f, -0.403819978237152099609375f, 0.094350002706050872802734375f), float4(-0.3280127942562103271484375f, -0.099531270563602447509765625f, -0.11283648014068603515625f, 0.20685864984989166259765625f)));
[   2.120][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.052573867142200469970703125f, -0.035328753292560577392578125f, -0.111329428851604461669921875f, -0.17515651881694793701171875f), float4(0.0502105094492435455322265625f, 0.058642424643039703369140625f, -0.0466406643390655517578125f, 0.079910703003406524658203125f), float4(-0.02739881537854671478271484375f, -0.336199939250946044921875f, -0.2213576734066009521484375f, 0.07894001901149749755859375f), float4(-0.14941696822643280029296875f, -0.094099603593349456787109375f, -0.11655084788799285888671875f, 0.049795925617218017578125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(-0.03930127620697021484375f, 0.041062317788600921630859375f, 0.20312686264514923095703125f, -0.00933870486915111541748046875f), float4(0.01370628178119659423828125f, -0.02458520047366619110107421875f, 0.0345831103622913360595703125f, 0.09601227939128875732421875f), float4(-0.18203015625476837158203125f, -0.0122603140771389007568359375f, 0.17984507977962493896484375f, -0.0565767027437686920166015625f), float4(-0.102844186127185821533203125f, 0.2404787242412567138671875f, 0.0530718900263309478759765625f, 0.16066081821918487548828125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.14787749946117401123046875f, 0.004636212252080440521240234375f, 0.054595209658145904541015625f, 0.07162837684154510498046875f), float4(-0.018961489200592041015625f, 0.2370017468929290771484375f, -0.14174298942089080810546875f, 0.069885991513729095458984375f), float4(-0.325454771518707275390625f, -0.080650962889194488525390625f, -0.0612277425825595855712890625f, -0.001079677254892885684967041015625f), float4(0.09432734549045562744140625f, -0.20760081708431243896484375f, -0.1952326297760009765625f, 0.1985922157764434814453125f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.049676366150379180908203125f, -0.10381536185741424560546875f, 0.025461159646511077880859375f, -0.13127093017101287841796875f), float4(0.109549142420291900634765625f, 0.00481479428708553314208984375f, 0.06962327659130096435546875f, -0.3045652806758880615234375f), float4(-0.119566269218921661376953125f, 0.015048888511955738067626953125f, -0.10711722075939178466796875f, 0.1684612929821014404296875f), float4(-0.1939089000225067138671875f, -0.10577046871185302734375f, -0.119809187948703765869140625f, -0.036988295614719390869140625f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(-0.054795764386653900146484375f, 0.094911158084869384765625f, -0.08494947850704193115234375f, 0.059765852987766265869140625f), float4(0.013159743510186672210693359375f, 0.20786161720752716064453125f, 0.119996368885040283203125f, 0.02438105456531047821044921875f), float4(0.22830428183078765869140625f, 0.027053318917751312255859375f, -0.011646273545920848846435546875f, -0.1214540898799896240234375f), float4(-0.078995592892169952392578125f, -0.012688263319432735443115234375f, 0.106841571629047393798828125f, 0.382421910762786865234375f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.23994572460651397705078125f, -0.00315326661802828311920166015625f, -0.0050638164393603801727294921875f, 0.14236278831958770751953125f), float4(0.056903831660747528076171875f, -0.062596820294857025146484375f, 0.052624143660068511962890625f, 0.20461404323577880859375f), float4(-0.192303121089935302734375f, -0.110722683370113372802734375f, 0.013023965060710906982421875f, 0.08931542932987213134765625f), float4(-0.21997220814228057861328125f, 0.117604427039623260498046875f, -0.40943825244903564453125f, 0.286568343639373779296875f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.066061787307262420654296875f, 0.2600777149200439453125f, 0.03375412523746490478515625f, 0.119690455496311187744140625f), float4(0.02466913871467113494873046875f, -0.067528389394283294677734375f, 0.12688095867633819580078125f, -0.006320194341242313385009765625f), float4(-0.17123021185398101806640625f, 0.075488567352294921875f, -0.142136991024017333984375f, 0.034093797206878662109375f), float4(-0.156326472759246826171875f, -0.123243413865566253662109375f, -0.4263404309749603271484375f, 0.1715022027492523193359375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.0465034656226634979248046875f, 0.13876388967037200927734375f, 0.17973013222217559814453125f, -0.259383380413055419921875f), float4(-0.18824703991413116455078125f, -0.1187670230865478515625f, 0.310657918453216552734375f, -0.0410422123968601226806640625f), float4(-0.061369426548480987548828125f, 0.20579920709133148193359375f, 0.17295737564563751220703125f, 0.383655488491058349609375f), float4(-0.2110979855060577392578125f, -0.101671181619167327880859375f, 0.165770471096038818359375f, 0.113483034074306488037109375f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.24534855782985687255859375f, -0.014482420869171619415283203125f, 0.22515748441219329833984375f, -0.12773542106151580810546875f), float4(0.12794174253940582275390625f, -0.025286190211772918701171875f, 0.41710484027862548828125f, 0.091549336910247802734375f), float4(-0.17805945873260498046875f, -0.2542891800403594970703125f, 0.072941832244396209716796875f, 0.0470794178545475006103515625f), float4(-0.30949151515960693359375f, -0.08919157087802886962890625f, 0.17888431251049041748046875f, 0.17706038057804107666015625f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.174182593822479248046875f, 0.04622529447078704833984375f, -0.107617907226085662841796875f, 0.2619952857494354248046875f), float4(0.0073737450875341892242431640625f, 0.051043368875980377197265625f, -0.22309966385364532470703125f, 0.34529983997344970703125f), float4(-0.0343638248741626739501953125f, -0.0221872366964817047119140625f, -0.086095549166202545166015625f, 0.168424189090728759765625f), float4(0.281360566616058349609375f, 0.1784360706806182861328125f, -0.113077461719512939453125f, -0.056680209934711456298828125f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.123106159269809722900390625f, -0.296613752841949462890625f, -0.105810247361660003662109375f, -0.0495840124785900115966796875f), float4(0.196517646312713623046875f, 0.08436489105224609375f, -0.14533580839633941650390625f, -0.0298741124570369720458984375f), float4(-0.15422897040843963623046875f, -0.062741704285144805908203125f, -0.22694711387157440185546875f, -0.15547274053096771240234375f), float4(-0.151813328266143798828125f, 0.02860610000789165496826171875f, 0.0224384926259517669677734375f, -0.062447167932987213134765625f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.3497045934200286865234375f, -0.09455008804798126220703125f, 0.06061895191669464111328125f, -0.21342359483242034912109375f), float4(0.054515294730663299560546875f, 0.07451164722442626953125f, -0.09267233312129974365234375f, -0.010513332672417163848876953125f), float4(0.138426363468170166015625f, 0.115634329617023468017578125f, -0.054750166833400726318359375f, 0.0504320003092288970947265625f), float4(0.1514256000518798828125f, 0.04284001886844635009765625f, -0.2095580995082855224609375f, 0.07907657325267791748046875f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.11745651066303253173828125f, -0.0471705682575702667236328125f, 0.085377193987369537353515625f, -0.06595699489116668701171875f), float4(0.07280491292476654052734375f, 0.273005902767181396484375f, 0.11088275909423828125f, 0.243795692920684814453125f), float4(0.1401898860931396484375f, 0.1164107024669647216796875f, -0.09516929090023040771484375f, 0.0022427947260439395904541015625f), float4(0.111544005572795867919921875f, -0.068049497902393341064453125f, 0.09324578940868377685546875f, -0.12482021749019622802734375f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.07995794713497161865234375f, -0.033878840506076812744140625f, 0.01984613575041294097900390625f, 0.102312080562114715576171875f), float4(-0.0701719224452972412109375f, 0.18659038841724395751953125f, 0.0351616442203521728515625f, 0.101182766258716583251953125f), float4(-0.1490166485309600830078125f, 0.21307294070720672607421875f, 0.063894204795360565185546875f, -0.275465071201324462890625f), float4(-0.24792958796024322509765625f, -0.067731074988842010498046875f, 0.13146005570888519287109375f, -0.19333682954311370849609375f)));
[   2.120][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.0342064537107944488525390625f, 0.14726479351520538330078125f, -0.074067272245883941650390625f, 0.01465402543544769287109375f), float4(0.18703444302082061767578125f, 0.1319856941699981689453125f, -0.10610885918140411376953125f, 0.084279470145702362060546875f), float4(-0.017536617815494537353515625f, -0.0648787915706634521484375f, -0.12095285952091217041015625f, -0.050414837896823883056640625f), float4(0.0326087884604930877685546875f, 0.15588940680027008056640625f, -0.0318870842456817626953125f, 0.11840288341045379638671875f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.114811293780803680419921875f, -0.14574332535266876220703125f, -0.093925870954990386962890625f, 0.042283527553081512451171875f), float4(0.089190922677516937255859375f, 0.18259067833423614501953125f, 0.098071701824665069580078125f, 0.2102477848529815673828125f), float4(-0.128000795841217041015625f, -0.02726046182215213775634765625f, -0.112902700901031494140625f, 0.1872247159481048583984375f), float4(0.13733984529972076416015625f, 0.0471539832651615142822265625f, 0.03087197802960872650146484375f, 0.19983850419521331787109375f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.067835748195648193359375f, 0.0046125948429107666015625f, 0.1153466999530792236328125f, -0.11531557142734527587890625f), float4(-0.04888953268527984619140625f, 0.076735772192478179931640625f, -0.02041785977780818939208984375f, 0.227444589138031005859375f), float4(-0.13092505931854248046875f, 0.13484807312488555908203125f, 0.400030434131622314453125f, -0.0537066124379634857177734375f), float4(-0.16985155642032623291015625f, -0.0479123592376708984375f, -0.052443005144596099853515625f, -0.083636246621608734130859375f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.18187882006168365478515625f, 0.01789398491382598876953125f, 0.17856054008007049560546875f, 0.005413128994405269622802734375f), float4(0.014147176407277584075927734375f, 0.151021778583526611328125f, 0.124362938106060028076171875f, -0.0217676497995853424072265625f), float4(-0.167278230190277099609375f, -0.036411099135875701904296875f, 0.17074407637119293212890625f, 0.12899421155452728271484375f), float4(0.319845139980316162109375f, -0.007207003422081470489501953125f, 0.031895883381366729736328125f, -0.19914050400257110595703125f)))) + float4(-0.011865143664181232452392578125f, 0.117172010242938995361328125f, -0.138237774372100830078125f, -0.0594502724707126617431640625f);
[   2.120][d][vo/gpu/d3d11] [ 61] }
[   2.120][d][vo/gpu/d3d11] [ 62] 
[   2.120][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.120][d][vo/gpu/d3d11] [ 64] {
[   2.120][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.120][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.120][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.120][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.120][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.120][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.120][d][vo/gpu/d3d11] [ 71] }
[   2.120][d][vo/gpu] Resizing texture: 1920x800
[   2.122][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.124][v][vo/gpu/d3d11] Compiled a vertex shader in 4133us
[   2.124][v][vo/gpu/d3d11] shaderc: 2214us, SPIRV-Cross: 123us, D3DCompile: 1796us
[   2.124][d][vo/gpu/d3d11] GLSL source:
[   2.124][d][vo/gpu/d3d11] [  1] #version 450
[   2.124][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.124][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.124][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.124][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.124][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.124][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.124][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.124][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.124][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.124][d][vo/gpu/d3d11] [ 11] void main() {
[   2.124][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.124][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.124][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.124][d][vo/gpu/d3d11] [ 15] }
[   2.124][d][vo/gpu/d3d11] HLSL source:
[   2.124][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.124][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.124][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.124][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.124][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.124][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.124][d][vo/gpu/d3d11] [  7] 
[   2.124][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.124][d][vo/gpu/d3d11] [  9] {
[   2.124][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.124][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.124][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.124][d][vo/gpu/d3d11] [ 13] };
[   2.124][d][vo/gpu/d3d11] [ 14] 
[   2.124][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.124][d][vo/gpu/d3d11] [ 16] {
[   2.124][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.124][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.124][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.124][d][vo/gpu/d3d11] [ 20] };
[   2.124][d][vo/gpu/d3d11] [ 21] 
[   2.124][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.124][d][vo/gpu/d3d11] [ 23] {
[   2.124][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.124][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.124][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.124][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.124][d][vo/gpu/d3d11] [ 28] }
[   2.124][d][vo/gpu/d3d11] [ 29] 
[   2.124][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.124][d][vo/gpu/d3d11] [ 31] {
[   2.124][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.124][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.124][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.124][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.124][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.124][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.124][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.124][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.124][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.124][d][vo/gpu/d3d11] [ 41] }
[   2.154][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.205][v][vo/gpu/d3d11] Compiled a fragment shader in 80478us
[   2.205][v][vo/gpu/d3d11] shaderc: 29468us, SPIRV-Cross: 2472us, D3DCompile: 48538us
[   2.205][d][vo/gpu/d3d11] GLSL source:
[   2.205][d][vo/gpu/d3d11] [  1] #version 450
[   2.205][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.205][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.205][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.205][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.205][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.205][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.205][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.205][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.205][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.205][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.205][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.205][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.205][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.205][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.205][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.205][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.205][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.205][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.205][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.205][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.205][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.205][d][vo/gpu/d3d11] [ 23] };
[   2.205][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.205][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.205][d][vo/gpu/d3d11] [ 26] #define conv2d_5_tf_raw texture0
[   2.205][d][vo/gpu/d3d11] [ 27] #define conv2d_5_tf_pos texcoord0
[   2.205][d][vo/gpu/d3d11] [ 28] #define conv2d_5_tf_size texture_size0
[   2.205][d][vo/gpu/d3d11] [ 29] #define conv2d_5_tf_rot texture_rot0
[   2.205][d][vo/gpu/d3d11] [ 30] #define conv2d_5_tf_off texture_off0
[   2.205][d][vo/gpu/d3d11] [ 31] #define conv2d_5_tf_pt pixel_size0
[   2.205][d][vo/gpu/d3d11] [ 32] #define conv2d_5_tf_map texmap0
[   2.205][d][vo/gpu/d3d11] [ 33] #define conv2d_5_tf_mul 1.000000
[   2.205][d][vo/gpu/d3d11] [ 34] #define conv2d_5_tf_tex(pos) (conv2d_5_tf_mul * vec4(texture(conv2d_5_tf_raw, pos)).rgba)
[   2.205][d][vo/gpu/d3d11] [ 35] #define conv2d_5_tf_gather(pos, c) (conv2d_5_tf_mul * vec4(textureGather(conv2d_5_tf_raw, pos, c)))
[   2.205][d][vo/gpu/d3d11] [ 36] #define conv2d_5_tf_texOff(off) conv2d_5_tf_tex(conv2d_5_tf_pos + conv2d_5_tf_pt * vec2(off))
[   2.205][d][vo/gpu/d3d11] [ 37] #define conv2d_5_tf1_raw texture1
[   2.205][d][vo/gpu/d3d11] [ 38] #define conv2d_5_tf1_pos texcoord1
[   2.205][d][vo/gpu/d3d11] [ 39] #define conv2d_5_tf1_size texture_size1
[   2.205][d][vo/gpu/d3d11] [ 40] #define conv2d_5_tf1_rot texture_rot1
[   2.205][d][vo/gpu/d3d11] [ 41] #define conv2d_5_tf1_off texture_off1
[   2.205][d][vo/gpu/d3d11] [ 42] #define conv2d_5_tf1_pt pixel_size1
[   2.205][d][vo/gpu/d3d11] [ 43] #define conv2d_5_tf1_map texmap1
[   2.205][d][vo/gpu/d3d11] [ 44] #define conv2d_5_tf1_mul 1.000000
[   2.205][d][vo/gpu/d3d11] [ 45] #define conv2d_5_tf1_tex(pos) (conv2d_5_tf1_mul * vec4(texture(conv2d_5_tf1_raw, pos)).rgba)
[   2.205][d][vo/gpu/d3d11] [ 46] #define conv2d_5_tf1_gather(pos, c) (conv2d_5_tf1_mul * vec4(textureGather(conv2d_5_tf1_raw, pos, c)))
[   2.205][d][vo/gpu/d3d11] [ 47] #define conv2d_5_tf1_texOff(off) conv2d_5_tf1_tex(conv2d_5_tf1_pos + conv2d_5_tf1_pt * vec2(off))
[   2.205][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.205][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.205][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.205][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.205][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.205][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.082203194, 0.021720003, 0.03725474, -0.08048348, 0.2063248, -0.033020593, -0.17585336, 0.06476272, 0.012244563, 0.026554609, 0.014708393, 0.26606125, 0.14248778, 0.12817341, -0.039826933, -0.12751861) * go_0(-1.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 54]     result += mat4(0.24573852, 0.19695967, -0.06257417, -0.04782871, 0.3511875, -0.018083302, -0.077342674, 0.15247667, 0.20321761, -0.07479984, -0.09548503, 0.08109568, -0.23808748, 0.07246303, -0.004242619, 0.16162953) * go_0(-1.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 55]     result += mat4(0.13296306, 0.19495387, 0.009222276, 0.033592198, 0.20443891, 0.16063854, -0.2581601, -0.016132578, -0.2296461, -0.23647323, -0.15407176, -0.18265317, 0.2343241, -0.049697313, -0.09398783, 0.41931856) * go_0(-1.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.10866088, -0.40605694, -0.0042648134, 0.07943803, 0.26914695, 0.14816476, 0.037706107, -0.123223364, -0.19962949, -0.053534556, -0.08397409, -0.04244924, -0.075791344, 0.29629225, 0.2311928, 0.099177904) * go_0(0.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.1748319, -0.2003186, -0.32659066, -0.21007413, 0.20122464, 0.032196607, -0.026299698, 0.33395135, 0.11411664, 0.05971959, 0.09001304, -0.15936212, 0.012322024, 0.19936106, -0.411186, -0.08319479) * go_0(0.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.07349218, 0.006184436, 0.096199185, -0.050186496, 0.064047046, -0.03813128, -0.057007037, -0.025550695, -0.2863145, -0.008512981, -0.20615962, 0.18009211, 0.008298396, 0.22452813, 0.010843521, 0.20169461) * go_0(0.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 59]     result += mat4(0.2691149, 0.059546687, 0.08922005, 0.2252196, 0.30341956, -0.024489028, 0.087045394, -0.03856442, -0.14083561, -0.17683443, 0.14137806, 0.15520614, 0.2073925, -0.19525874, 0.23661858, 0.3098405) * go_0(1.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 60]     result += mat4(0.006530723, 0.04180736, -0.04762067, -0.064395495, 0.02396811, -0.13332283, 0.0037775645, 0.026309434, 0.0033065109, -0.08315753, 0.02917419, 0.12330464, 0.22819455, -0.07489677, 0.12829056, -0.097994626) * go_0(1.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.09983759, 0.032783493, 0.11085758, 0.08993078, -0.057110567, -0.018973934, -0.14946178, -0.03921629, 0.039757587, 0.015860094, 0.04989561, -0.19634786, 0.04351146, 0.019315343, 0.25972188, 0.17989321) * go_0(1.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.04111906, -0.165601, 0.0003682197, -0.056232415, -0.32716644, -0.24015541, -0.057547837, 0.05966729, 0.06854747, 0.03599213, -0.18798864, 0.1183447, 0.014268468, -0.1310834, 0.06415977, -0.19414157) * go_1(-1.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.00070661673, 0.17671427, 0.10584568, -0.060910843, -0.104282066, -0.22676118, -0.01907062, 0.24882245, -0.043454725, 0.07691623, -0.48371696, 0.013537671, -0.025488405, 0.061228953, 0.18548754, 0.028671112) * go_1(-1.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.0121596735, 0.09595702, -0.08244918, -0.1176173, 0.26773354, -0.021729136, 0.075465776, -0.0928876, 0.12461298, 0.16830076, -0.15302569, 0.113850676, 0.09811088, 0.13006307, 0.24999009, 0.10261325) * go_1(-1.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.032246377, 0.038265374, -0.26476422, -0.1442876, -0.19866082, 0.08649541, 0.041478764, 0.11155026, 0.21576422, -0.09572912, -0.11174068, -0.19722937, -0.15801935, 0.29604745, -0.08606268, -0.15532136) * go_1(0.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.06315591, 0.16151646, -0.009230362, -0.04341246, 0.09085519, 0.21924476, 0.38044852, 0.193819, 0.16622902, 0.0025134624, -0.22688466, -0.025276015, 0.07714917, 0.16302192, -0.11767101, -0.11086476) * go_1(0.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.04170153, 0.001859292, -0.26352355, 0.10982333, -0.031867817, 0.15773517, -0.060263418, 0.11117763, -0.017359972, 0.0127261225, 0.0782802, -0.16908924, 0.080516845, -0.05691526, -0.07530135, -0.14553802) * go_1(0.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 68]     result += mat4(0.06112685, -0.032287434, 0.17445667, -0.044935808, -0.11449107, -0.051394563, -0.029589338, -0.14555557, 0.03440661, 0.11035615, -0.17175, -0.14851089, 0.037362, -0.18740481, 0.17278154, 0.18073405) * go_1(1.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 69]     result += mat4(-0.27670652, 0.19484822, 0.2609349, 0.1455016, 0.04438468, 0.1449185, 0.11185832, -0.18598269, -0.019846648, 0.11886126, -0.098498635, 0.15737785, 0.011406795, -0.18860829, -0.13705735, 0.17535745) * go_1(1.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.30244905, -0.28695273, 0.1146976, 0.21144345, -0.037980128, -0.027679864, -0.13992494, -0.04884521, -0.032023884, -0.07921183, -0.16042095, -0.06935386, -0.06570237, -0.1107404, -0.018163798, 0.22625941) * go_1(1.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.07292955, -0.07321777, -0.045146503, -0.33291966, -0.096732594, -0.07203495, 0.33692798, 0.2870733, 0.122160144, -0.076574564, 0.042844944, 0.26448342, 0.07672146, -0.028775277, -0.12088313, 0.15583947) * go_2(-1.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 72]     result += mat4(0.21589327, 0.05258274, 0.09705794, -0.024653846, -0.039402515, 0.28485695, 0.14711736, -0.10556087, -0.15140481, 0.09039498, 0.017308712, 0.11862922, 0.08230978, 0.21678248, -0.043815188, -0.226433) * go_2(-1.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 73]     result += mat4(-0.029258793, 0.26618922, 0.02564014, -0.23189862, -0.24074338, -0.18556763, 0.25973624, 0.04746873, 0.0137007125, -0.22239363, -0.12414957, 0.048228756, -0.22406264, 0.282667, -0.021001073, -0.17465611) * go_2(-1.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 74]     result += mat4(0.32401654, -0.1495363, -0.20869227, 0.04271639, -0.0087802755, 0.031325378, 0.23834595, 0.039336167, 0.17265107, 0.20947595, 0.28737286, 0.0028783784, -0.057340365, -0.050347418, -0.11915604, -0.1831807) * go_2(0.0, -1.0);
[   2.205][d][vo/gpu/d3d11] [ 75]     result += mat4(0.1811338, 0.07732653, 0.20975596, -0.47129005, 0.07121942, 0.08410583, 0.44170937, -0.19524159, -0.17807977, 0.12837476, 0.20816846, -0.1741958, -0.04411918, 0.06024972, 0.18159702, -0.052485272) * go_2(0.0, 0.0);
[   2.205][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.15229738, 0.27513, 0.28150418, -0.19543962, -0.02045864, -0.07207227, 0.09589587, 0.09110817, 0.061413247, 0.0046052113, 0.11619411, -0.2988938, 0.065739445, 0.10205611, 0.12847126, -0.028355654) * go_2(0.0, 1.0);
[   2.205][d][vo/gpu/d3d11] [ 77]     result += mat4(0.0657154, -0.047568597, -0.16148911, 0.16392621, -0.25281775, -0.061153214, 0.017480455, -0.026288848, 0.20319715, 0.04763355, 0.010444491, -0.26671803, -0.25821987, 0.32863674, -0.30734694, -0.18190521) * go_2(1.0, -1.0);
[   2.206][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.042703815, 0.06633036, -0.048434302, -0.17176376, -0.12699759, -0.1124558, 0.083266065, 0.03354623, -0.13468939, 0.12706263, 0.053659134, -0.06930602, 0.008196115, 0.2034998, -0.06351442, -0.039730288) * go_2(1.0, 0.0);
[   2.206][d][vo/gpu/d3d11] [ 79]     result += mat4(0.09614661, 0.22500272, 0.088511504, -0.16960482, 0.15364788, -0.18854137, -0.13163191, -0.07503735, -0.23177068, -0.0053305267, -0.041978605, 0.0971947, -0.049034655, 0.04486706, 0.09076307, -0.02310868) * go_2(1.0, 1.0);
[   2.206][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.1304683, 0.17743458, -0.09817326, -0.0646786, 0.07886976, 0.20109388, -0.034114968, -0.2029261, -0.03348398, 0.029337432, -0.07302782, -0.02240758, 0.030242773, -0.30032325, 0.02085572, -0.027314361) * go_3(-1.0, -1.0);
[   2.206][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.037377544, 0.026350772, -0.07430488, -0.114671774, -0.126935, -0.046512567, -0.033628833, -0.19018382, -0.041053895, -0.031206857, 0.08562848, -0.01875709, 0.21099389, -0.092511, 0.0073047103, -0.009811013) * go_3(-1.0, 0.0);
[   2.206][d][vo/gpu/d3d11] [ 82]     result += mat4(0.11358029, 0.17468451, -0.12739041, -0.14332245, -0.22230148, 0.16862972, -0.04462456, 0.2469604, -0.008622369, 0.0081848325, -0.17032363, -0.16024362, 0.21178265, 0.037127133, 0.08559072, 0.11584694) * go_3(-1.0, 1.0);
[   2.206][d][vo/gpu/d3d11] [ 83]     result += mat4(0.008993893, -0.08037705, 0.4426555, 0.15593371, 0.15273719, -0.03249998, 0.055109, -0.1512612, -0.037183985, 0.20825677, -0.08516227, -0.06664223, -0.10011001, -0.3505215, -0.17941694, 0.052089088) * go_3(0.0, -1.0);
[   2.206][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.109703645, -0.13505603, 0.1336451, 0.13118869, 0.010915504, 0.12748592, 0.21201555, -0.40841985, -0.11059143, 0.033772044, -0.039282143, 0.03095394, 0.10394723, -0.21343367, -0.10699851, -0.028351074) * go_3(0.0, 0.0);
[   2.206][d][vo/gpu/d3d11] [ 85]     result += mat4(0.019704714, 0.06243651, 0.09896519, -0.17492259, 0.012675787, -0.004239029, 0.21319824, 0.069183126, -0.0071114586, 0.123431124, -0.24479835, 0.00723795, -0.045293927, 0.014101029, 0.15746681, 0.042405806) * go_3(0.0, 1.0);
[   2.206][d][vo/gpu/d3d11] [ 86]     result += mat4(0.023828225, -0.0015190929, 0.1194638, 0.082163885, 0.10532113, 0.042044062, 0.02528007, 0.015175004, 0.026613194, 0.33525538, -0.1627064, -0.29887968, -0.197707, 0.038967777, -0.15811683, -0.106895216) * go_3(1.0, -1.0);
[   2.206][d][vo/gpu/d3d11] [ 87]     result += mat4(0.044362027, -0.04946742, -0.14815849, -0.17660522, -0.034201477, -0.012243106, -0.050183997, 0.06407372, 0.039822515, 0.15880872, -0.0672721, -0.4081093, 0.019489579, -0.060278706, -0.015096743, -0.07799167) * go_3(1.0, 0.0);
[   2.206][d][vo/gpu/d3d11] [ 88]     result += mat4(0.11861756, 0.27113584, -0.14107186, -0.10246008, -0.124051, -0.1627854, 0.10698585, 0.2846401, -0.061731786, 0.1724438, -0.12428688, -0.09986041, -0.034171514, -0.07100923, 0.041739646, -0.11308375) * go_3(1.0, 1.0);
[   2.206][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.02981662, -0.26338395, -0.011632586, 0.15063232);
[   2.206][d][vo/gpu/d3d11] [ 90]     return result;
[   2.206][d][vo/gpu/d3d11] [ 91] }
[   2.206][d][vo/gpu/d3d11] [ 92] void main() {
[   2.206][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.206][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.206][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.206][d][vo/gpu/d3d11] [ 96] }
[   2.206][d][vo/gpu/d3d11] HLSL source:
[   2.206][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.206][d][vo/gpu/d3d11] [  2] {
[   2.206][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.206][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.206][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.206][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.206][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.206][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.206][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.206][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.206][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.206][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.206][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.206][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.206][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.206][d][vo/gpu/d3d11] [ 16] };
[   2.206][d][vo/gpu/d3d11] [ 17] 
[   2.206][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.206][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.206][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.206][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.206][d][vo/gpu/d3d11] [ 22] 
[   2.206][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.206][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.206][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.206][d][vo/gpu/d3d11] [ 26] 
[   2.206][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.206][d][vo/gpu/d3d11] [ 28] {
[   2.206][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.206][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.206][d][vo/gpu/d3d11] [ 31] };
[   2.206][d][vo/gpu/d3d11] [ 32] 
[   2.206][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.206][d][vo/gpu/d3d11] [ 34] {
[   2.206][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.206][d][vo/gpu/d3d11] [ 36] };
[   2.206][d][vo/gpu/d3d11] [ 37] 
[   2.206][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.206][d][vo/gpu/d3d11] [ 39] {
[   2.206][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.206][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.08220319449901580810546875f, 0.0217200033366680145263671875f, 0.0372547395527362823486328125f, -0.08048348128795623779296875f), float4(0.20632480084896087646484375f, -0.033020593225955963134765625f, -0.17585335671901702880859375f, 0.064762718975543975830078125f), float4(0.012244562618434429168701171875f, 0.02655460871756076812744140625f, 0.014708393253386020660400390625f, 0.266061246395111083984375f), float4(0.14248777925968170166015625f, 0.128173410892486572265625f, -0.0398269332945346832275390625f, -0.12751860916614532470703125f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.24573852121829986572265625f, 0.196959674358367919921875f, -0.062574170529842376708984375f, -0.047828711569309234619140625f), float4(0.3511874973773956298828125f, -0.01808330230414867401123046875f, -0.07734267413616180419921875f, 0.15247666835784912109375f), float4(0.20321761071681976318359375f, -0.074799843132495880126953125f, -0.095485031604766845703125f, 0.08109568059444427490234375f), float4(-0.238087475299835205078125f, 0.072463028132915496826171875f, -0.0042426190339028835296630859375f, 0.1616295278072357177734375f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.13296306133270263671875f, 0.19495387375354766845703125f, 0.009222275577485561370849609375f, 0.0335921980440616607666015625f), float4(0.20443890988826751708984375f, 0.1606385409832000732421875f, -0.258160114288330078125f, -0.01613257825374603271484375f), float4(-0.22964610159397125244140625f, -0.2364732325077056884765625f, -0.15407176315784454345703125f, -0.18265317380428314208984375f), float4(0.23432409763336181640625f, -0.0496973134577274322509765625f, -0.093987829983234405517578125f, 0.41931855678558349609375f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.108660876750946044921875f, -0.406056940555572509765625f, -0.0042648133821785449981689453125f, 0.079438030719757080078125f), float4(0.2691469490528106689453125f, 0.14816476404666900634765625f, 0.0377061069011688232421875f, -0.123223364353179931640625f), float4(-0.199629485607147216796875f, -0.0535345561802387237548828125f, -0.0839740931987762451171875f, -0.0424492396414279937744140625f), float4(-0.07579134404659271240234375f, 0.296292245388031005859375f, 0.2311927974224090576171875f, 0.099177904427051544189453125f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.1748318970203399658203125f, -0.2003186047077178955078125f, -0.32659065723419189453125f, -0.210074126720428466796875f), float4(0.20122464001178741455078125f, 0.0321966074407100677490234375f, -0.02629969827830791473388671875f, 0.33395135402679443359375f), float4(0.1141166388988494873046875f, 0.0597195886075496673583984375f, 0.09001304209232330322265625f, -0.15936212241649627685546875f), float4(0.012322024442255496978759765625f, 0.1993610560894012451171875f, -0.4111860096454620361328125f, -0.083194792270660400390625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.073492176830768585205078125f, 0.0061844359152019023895263671875f, 0.0961991846561431884765625f, -0.0501864962279796600341796875f), float4(0.064047046005725860595703125f, -0.03813128173351287841796875f, -0.057007037103176116943359375f, -0.02555069513618946075439453125f), float4(-0.286314487457275390625f, -0.008512981235980987548828125f, -0.2061596214771270751953125f, 0.18009211122989654541015625f), float4(0.008298396132886409759521484375f, 0.224528133869171142578125f, 0.01084352098405361175537109375f, 0.20169460773468017578125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.269114911556243896484375f, 0.059546686708927154541015625f, 0.0892200469970703125f, 0.22521960735321044921875f), float4(0.3034195601940155029296875f, -0.02448902837932109832763671875f, 0.087045393884181976318359375f, -0.038564421236515045166015625f), float4(-0.1408356130123138427734375f, -0.1768344342708587646484375f, 0.14137805998325347900390625f, 0.155206143856048583984375f), float4(0.20739249885082244873046875f, -0.19525873661041259765625f, 0.236618578433990478515625f, 0.309840500354766845703125f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.0065307230688631534576416015625f, 0.041807360947132110595703125f, -0.04762066900730133056640625f, -0.064395494759082794189453125f), float4(0.02396810986101627349853515625f, -0.13332283496856689453125f, 0.003777564503252506256103515625f, 0.0263094343245029449462890625f), float4(0.003306510858237743377685546875f, -0.083157531917095184326171875f, 0.0291741900146007537841796875f, 0.123304642736911773681640625f), float4(0.22819454967975616455078125f, -0.07489676773548126220703125f, 0.1282905638217926025390625f, -0.097994625568389892578125f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.09983758628368377685546875f, 0.03278349339962005615234375f, 0.110857583582401275634765625f, 0.089930780231952667236328125f), float4(-0.0571105666458606719970703125f, -0.01897393353283405303955078125f, -0.1494617760181427001953125f, -0.0392162911593914031982421875f), float4(0.039757587015628814697265625f, 0.01586009375751018524169921875f, 0.0498956106603145599365234375f, -0.1963478624820709228515625f), float4(0.0435114614665508270263671875f, 0.0193153433501720428466796875f, 0.25972187519073486328125f, 0.17989321053028106689453125f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.041119061410427093505859375f, -0.16560100018978118896484375f, 0.00036821971298195421695709228515625f, -0.056232415139675140380859375f), float4(-0.32716643810272216796875f, -0.24015541374683380126953125f, -0.0575478374958038330078125f, 0.059667289257049560546875f), float4(0.06854747235774993896484375f, 0.03599213063716888427734375f, -0.18798863887786865234375f, 0.118344701826572418212890625f), float4(0.014268468134105205535888671875f, -0.1310833990573883056640625f, 0.064159773290157318115234375f, -0.194141566753387451171875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.0007066167308948934078216552734375f, 0.1767142713069915771484375f, 0.105845682322978973388671875f, -0.060910843312740325927734375f), float4(-0.10428206622600555419921875f, -0.22676117718219757080078125f, -0.01907061971724033355712890625f, 0.2488224506378173828125f), float4(-0.0434547252953052520751953125f, 0.07691623270511627197265625f, -0.4837169647216796875f, 0.0135376714169979095458984375f), float4(-0.02548840455710887908935546875f, 0.061228953301906585693359375f, 0.1854875385761260986328125f, 0.0286711119115352630615234375f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.01215967349708080291748046875f, 0.095957018435001373291015625f, -0.08244918286800384521484375f, -0.117617301642894744873046875f), float4(0.2677335441112518310546875f, -0.02172913588583469390869140625f, 0.075465776026248931884765625f, -0.092887602746486663818359375f), float4(0.124612979590892791748046875f, 0.16830076277256011962890625f, -0.153025686740875244140625f, 0.113850675523281097412109375f), float4(0.098110876977443695068359375f, 0.13006307184696197509765625f, 0.24999009072780609130859375f, 0.102613247931003570556640625f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.0322463773190975189208984375f, 0.0382653735578060150146484375f, -0.2647642195224761962890625f, -0.14428760111331939697265625f), float4(-0.1986608207225799560546875f, 0.086495406925678253173828125f, 0.0414787642657756805419921875f, 0.11155025660991668701171875f), float4(0.215764224529266357421875f, -0.095729120075702667236328125f, -0.1117406785488128662109375f, -0.19722937047481536865234375f), float4(-0.15801934897899627685546875f, 0.2960474491119384765625f, -0.086062677204608917236328125f, -0.1553213596343994140625f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.063155911862850189208984375f, 0.1615164577960968017578125f, -0.00923036225140094757080078125f, -0.0434124581515789031982421875f), float4(0.090855188667774200439453125f, 0.21924476325511932373046875f, 0.380448520183563232421875f, 0.19381900131702423095703125f), float4(0.16622902452945709228515625f, 0.00251346244476735591888427734375f, -0.226884663105010986328125f, -0.02527601458132266998291015625f), float4(0.07714916765689849853515625f, 0.16302192211151123046875f, -0.11767101287841796875f, -0.11086475849151611328125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.0417015291750431060791015625f, 0.001859292038716375827789306640625f, -0.2635235488414764404296875f, 0.10982333123683929443359375f), float4(-0.03186781704425811767578125f, 0.157735168933868408203125f, -0.060263417661190032958984375f, 0.111177630722522735595703125f), float4(-0.0173599720001220703125f, 0.01272612251341342926025390625f, 0.078280203044414520263671875f, -0.16908924281597137451171875f), float4(0.0805168449878692626953125f, -0.056915260851383209228515625f, -0.075301349163055419921875f, -0.14553801715373992919921875f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.061126850545406341552734375f, -0.03228743374347686767578125f, 0.17445667088031768798828125f, -0.04493580758571624755859375f), float4(-0.114491067826747894287109375f, -0.0513945631682872772216796875f, -0.02958933822810649871826171875f, -0.14555557072162628173828125f), float4(0.034406609833240509033203125f, 0.110356152057647705078125f, -0.17174999415874481201171875f, -0.14851088821887969970703125f), float4(0.037362001836299896240234375f, -0.187404811382293701171875f, 0.17278154194355010986328125f, 0.18073405325412750244140625f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(-0.276706516742706298828125f, 0.19484822452068328857421875f, 0.260934889316558837890625f, 0.14550159871578216552734375f), float4(0.044384680688381195068359375f, 0.144918501377105712890625f, 0.11185832321643829345703125f, -0.18598268926143646240234375f), float4(-0.0198466479778289794921875f, 0.118861258029937744140625f, -0.098498634994029998779296875f, 0.15737785398960113525390625f), float4(0.011406795121729373931884765625f, -0.18860828876495361328125f, -0.13705734908580780029296875f, 0.17535744607448577880859375f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.302449047565460205078125f, -0.2869527339935302734375f, 0.114697597920894622802734375f, 0.2114434540271759033203125f), float4(-0.0379801280796527862548828125f, -0.0276798643171787261962890625f, -0.139924943447113037109375f, -0.048845209181308746337890625f), float4(-0.032023884356021881103515625f, -0.07921183109283447265625f, -0.160420954227447509765625f, -0.06935386359691619873046875f), float4(-0.065702371299266815185546875f, -0.110740400850772857666015625f, -0.01816379837691783905029296875f, 0.226259410381317138671875f)));
[   2.206][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.072929553687572479248046875f, -0.073217771947383880615234375f, -0.045146502554416656494140625f, -0.332919657230377197265625f), float4(-0.096732594072818756103515625f, -0.072034947574138641357421875f, 0.3369279801845550537109375f, 0.287073314189910888671875f), float4(0.122160144150257110595703125f, -0.0765745639801025390625f, 0.042844943702220916748046875f, 0.2644834220409393310546875f), float4(0.0767214596271514892578125f, -0.02877527661621570587158203125f, -0.120883129537105560302734375f, 0.1558394730091094970703125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.215893268585205078125f, 0.05258274078369140625f, 0.09705793857574462890625f, -0.02465384639799594879150390625f), float4(-0.0394025146961212158203125f, 0.2848569452762603759765625f, 0.14711736142635345458984375f, -0.1055608689785003662109375f), float4(-0.15140481293201446533203125f, 0.090394981205463409423828125f, 0.017308712005615234375f, 0.1186292171478271484375f), float4(0.082309782505035400390625f, 0.2167824804782867431640625f, -0.043815188109874725341796875f, -0.22643299400806427001953125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(-0.02925879321992397308349609375f, 0.26618921756744384765625f, 0.02564013935625553131103515625f, -0.23189862072467803955078125f), float4(-0.24074338376522064208984375f, -0.18556763231754302978515625f, 0.259736239910125732421875f, 0.047468729317188262939453125f), float4(0.0137007124722003936767578125f, -0.22239363193511962890625f, -0.124149568378925323486328125f, 0.04822875559329986572265625f), float4(-0.22406263649463653564453125f, 0.2826670110225677490234375f, -0.02100107260048389434814453125f, -0.17465610802173614501953125f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.3240165412425994873046875f, -0.14953629672527313232421875f, -0.20869226753711700439453125f, 0.042716391384601593017578125f), float4(-0.008780275471508502960205078125f, 0.031325377523899078369140625f, 0.2383459508419036865234375f, 0.039336167275905609130859375f), float4(0.17265106737613677978515625f, 0.20947594940662384033203125f, 0.2873728573322296142578125f, 0.00287837837822735309600830078125f), float4(-0.0573403649032115936279296875f, -0.0503474175930023193359375f, -0.119156040251255035400390625f, -0.18318070471286773681640625f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.181133806705474853515625f, 0.077326528728008270263671875f, 0.209755957126617431640625f, -0.471290051937103271484375f), float4(0.071219421923160552978515625f, 0.084105826914310455322265625f, 0.4417093694210052490234375f, -0.19524158537387847900390625f), float4(-0.17807976901531219482421875f, 0.128374755382537841796875f, 0.20816846191883087158203125f, -0.1741957962512969970703125f), float4(-0.044119179248809814453125f, 0.0602497197687625885009765625f, 0.1815970242023468017578125f, -0.05248527228832244873046875f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.15229737758636474609375f, 0.2751300036907196044921875f, 0.2815041840076446533203125f, -0.19543962180614471435546875f), float4(-0.02045864053070545196533203125f, -0.0720722675323486328125f, 0.09589587152004241943359375f, 0.0911081731319427490234375f), float4(0.0614132471382617950439453125f, 0.004605211317539215087890625f, 0.116194106638431549072265625f, -0.29889380931854248046875f), float4(0.065739445388317108154296875f, 0.102056108415126800537109375f, 0.12847125530242919921875f, -0.0283556543290615081787109375f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.0657154023647308349609375f, -0.047568596899509429931640625f, -0.16148911416530609130859375f, 0.1639262139797210693359375f), float4(-0.25281774997711181640625f, -0.0611532144248485565185546875f, 0.017480455338954925537109375f, -0.0262888483703136444091796875f), float4(0.2031971514225006103515625f, 0.047633551061153411865234375f, 0.010444491170346736907958984375f, -0.26671802997589111328125f), float4(-0.2582198679447174072265625f, 0.3286367356777191162109375f, -0.30734694004058837890625f, -0.181905210018157958984375f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.042703814804553985595703125f, 0.06633035838603973388671875f, -0.04843430221080780029296875f, -0.17176376283168792724609375f), float4(-0.12699759006500244140625f, -0.11245580017566680908203125f, 0.08326606452465057373046875f, 0.033546231687068939208984375f), float4(-0.134689390659332275390625f, 0.12706263363361358642578125f, 0.053659133613109588623046875f, -0.069306023418903350830078125f), float4(0.008196114562451839447021484375f, 0.20349979400634765625f, -0.063514418900012969970703125f, -0.039730288088321685791015625f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.0961466133594512939453125f, 0.22500272095203399658203125f, 0.088511504232883453369140625f, -0.16960482299327850341796875f), float4(0.15364788472652435302734375f, -0.18854136765003204345703125f, -0.131631910800933837890625f, -0.075037352740764617919921875f), float4(-0.23177067935466766357421875f, -0.0053305267356336116790771484375f, -0.041978605091571807861328125f, 0.0971947014331817626953125f), float4(-0.049034655094146728515625f, 0.044867061078548431396484375f, 0.090763069689273834228515625f, -0.0231086798012256622314453125f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.13046829402446746826171875f, 0.17743457853794097900390625f, -0.09817326068878173828125f, -0.064678601920604705810546875f), float4(0.078869760036468505859375f, 0.2010938823223114013671875f, -0.0341149680316448211669921875f, -0.202926099300384521484375f), float4(-0.0334839783608913421630859375f, 0.0293374322354793548583984375f, -0.0730278193950653076171875f, -0.0224075801670551300048828125f), float4(0.03024277277290821075439453125f, -0.3003232479095458984375f, 0.02085571922361850738525390625f, -0.0273143611848354339599609375f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.037377543747425079345703125f, 0.02635077200829982757568359375f, -0.074304878711700439453125f, -0.114671774208545684814453125f), float4(-0.12693500518798828125f, -0.046512566506862640380859375f, -0.0336288325488567352294921875f, -0.190183818340301513671875f), float4(-0.0410538949072360992431640625f, -0.0312068574130535125732421875f, 0.0856284797191619873046875f, -0.01875708997249603271484375f), float4(0.21099388599395751953125f, -0.092510998249053955078125f, 0.007304710336029529571533203125f, -0.009811013005673885345458984375f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(0.113580286502838134765625f, 0.17468450963497161865234375f, -0.1273904144763946533203125f, -0.14332245290279388427734375f), float4(-0.222301483154296875f, 0.16862972080707550048828125f, -0.044624559581279754638671875f, 0.2469604015350341796875f), float4(-0.00862236879765987396240234375f, 0.008184832520782947540283203125f, -0.17032362520694732666015625f, -0.16024361550807952880859375f), float4(0.21178264915943145751953125f, 0.0371271334588527679443359375f, 0.08559072017669677734375f, 0.115846939384937286376953125f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.008993892930448055267333984375f, -0.080377049744129180908203125f, 0.442655503749847412109375f, 0.1559337079524993896484375f), float4(0.15273718535900115966796875f, -0.0324999801814556121826171875f, 0.055109001696109771728515625f, -0.15126119554042816162109375f), float4(-0.03718398511409759521484375f, 0.20825676620006561279296875f, -0.08516226708889007568359375f, -0.066642232239246368408203125f), float4(-0.10011000931262969970703125f, -0.350521504878997802734375f, -0.17941693961620330810546875f, 0.052089087665081024169921875f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.10970364511013031005859375f, -0.13505603373050689697265625f, 0.13364510238170623779296875f, 0.131188690662384033203125f), float4(0.010915503837168216705322265625f, 0.12748591601848602294921875f, 0.21201555430889129638671875f, -0.4084198474884033203125f), float4(-0.11059142649173736572265625f, 0.033772043883800506591796875f, -0.039282143115997314453125f, 0.0309539400041103363037109375f), float4(0.103947229683399200439453125f, -0.21343366801738739013671875f, -0.106998510658740997314453125f, -0.02835107408463954925537109375f)));
[   2.206][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.01970471441745758056640625f, 0.0624365098774433135986328125f, 0.098965190351009368896484375f, -0.17492258548736572265625f), float4(0.012675787322223186492919921875f, -0.0042390287853777408599853515625f, 0.213198244571685791015625f, 0.06918312609195709228515625f), float4(-0.0071114585734903812408447265625f, 0.123431123793125152587890625f, -0.24479834735393524169921875f, 0.0072379498742520809173583984375f), float4(-0.04529392719268798828125f, 0.014101029373705387115478515625f, 0.15746681392192840576171875f, 0.042405806481838226318359375f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(0.02382822521030902862548828125f, -0.001519092940725386142730712890625f, 0.11946380138397216796875f, 0.08216388523578643798828125f), float4(0.105321131646633148193359375f, 0.0420440621674060821533203125f, 0.0252800695598125457763671875f, 0.0151750035583972930908203125f), float4(0.0266131944954395294189453125f, 0.3352553844451904296875f, -0.1627064049243927001953125f, -0.298879683017730712890625f), float4(-0.197706997394561767578125f, 0.0389677770435810089111328125f, -0.15811683237552642822265625f, -0.106895215809345245361328125f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.0443620271980762481689453125f, -0.0494674183428287506103515625f, -0.148158490657806396484375f, -0.176605224609375f), float4(-0.0342014767229557037353515625f, -0.012243106029927730560302734375f, -0.05018399655818939208984375f, 0.064073719084262847900390625f), float4(0.0398225151002407073974609375f, 0.15880872309207916259765625f, -0.0672720968723297119140625f, -0.40810930728912353515625f), float4(0.019489578902721405029296875f, -0.060278706252574920654296875f, -0.0150967426598072052001953125f, -0.077991671860218048095703125f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.118617556989192962646484375f, 0.2711358368396759033203125f, -0.141071856021881103515625f, -0.102460078895092010498046875f), float4(-0.124050997197628021240234375f, -0.16278539597988128662109375f, 0.10698585212230682373046875f, 0.2846401035785675048828125f), float4(-0.0617317855358123779296875f, 0.172443807125091552734375f, -0.124286882579326629638671875f, -0.099860407412052154541015625f), float4(-0.034171514213085174560546875f, -0.07100923359394073486328125f, 0.0417396463453769683837890625f, -0.1130837500095367431640625f)))) + float4(-0.029816620051860809326171875f, -0.2633839547634124755859375f, -0.01163258589804172515869140625f, 0.150632321834564208984375f);
[   2.206][d][vo/gpu/d3d11] [ 61] }
[   2.206][d][vo/gpu/d3d11] [ 62] 
[   2.206][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.206][d][vo/gpu/d3d11] [ 64] {
[   2.206][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.206][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.206][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.206][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.206][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.206][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.206][d][vo/gpu/d3d11] [ 71] }
[   2.206][d][vo/gpu] Resizing texture: 1920x800
[   2.208][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.212][v][vo/gpu/d3d11] Compiled a vertex shader in 5418us
[   2.212][v][vo/gpu/d3d11] shaderc: 2399us, SPIRV-Cross: 206us, D3DCompile: 2813us
[   2.212][d][vo/gpu/d3d11] GLSL source:
[   2.212][d][vo/gpu/d3d11] [  1] #version 450
[   2.212][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.212][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.212][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.212][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.212][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.212][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.212][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.212][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.212][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.212][d][vo/gpu/d3d11] [ 11] void main() {
[   2.212][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.212][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.212][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.212][d][vo/gpu/d3d11] [ 15] }
[   2.212][d][vo/gpu/d3d11] HLSL source:
[   2.212][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.212][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.212][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.212][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.212][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.212][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.212][d][vo/gpu/d3d11] [  7] 
[   2.212][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.212][d][vo/gpu/d3d11] [  9] {
[   2.212][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.212][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.212][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.212][d][vo/gpu/d3d11] [ 13] };
[   2.212][d][vo/gpu/d3d11] [ 14] 
[   2.212][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.212][d][vo/gpu/d3d11] [ 16] {
[   2.212][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.212][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.212][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.212][d][vo/gpu/d3d11] [ 20] };
[   2.212][d][vo/gpu/d3d11] [ 21] 
[   2.212][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.212][d][vo/gpu/d3d11] [ 23] {
[   2.212][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.212][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.212][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.212][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.212][d][vo/gpu/d3d11] [ 28] }
[   2.212][d][vo/gpu/d3d11] [ 29] 
[   2.212][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.212][d][vo/gpu/d3d11] [ 31] {
[   2.212][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.212][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.212][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.212][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.212][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.212][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.212][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.212][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.212][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.212][d][vo/gpu/d3d11] [ 41] }
[   2.237][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.284][v][vo/gpu/d3d11] Compiled a fragment shader in 72200us
[   2.284][v][vo/gpu/d3d11] shaderc: 25164us, SPIRV-Cross: 2665us, D3DCompile: 44371us
[   2.284][d][vo/gpu/d3d11] GLSL source:
[   2.284][d][vo/gpu/d3d11] [  1] #version 450
[   2.284][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.284][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.284][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.284][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.284][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.284][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.284][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.284][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.284][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.284][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.284][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.284][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.284][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.284][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.284][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.284][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.284][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.284][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.284][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.284][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.284][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.284][d][vo/gpu/d3d11] [ 23] };
[   2.284][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.284][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.284][d][vo/gpu/d3d11] [ 26] #define conv2d_5_tf_raw texture0
[   2.284][d][vo/gpu/d3d11] [ 27] #define conv2d_5_tf_pos texcoord0
[   2.284][d][vo/gpu/d3d11] [ 28] #define conv2d_5_tf_size texture_size0
[   2.284][d][vo/gpu/d3d11] [ 29] #define conv2d_5_tf_rot texture_rot0
[   2.284][d][vo/gpu/d3d11] [ 30] #define conv2d_5_tf_off texture_off0
[   2.284][d][vo/gpu/d3d11] [ 31] #define conv2d_5_tf_pt pixel_size0
[   2.284][d][vo/gpu/d3d11] [ 32] #define conv2d_5_tf_map texmap0
[   2.284][d][vo/gpu/d3d11] [ 33] #define conv2d_5_tf_mul 1.000000
[   2.284][d][vo/gpu/d3d11] [ 34] #define conv2d_5_tf_tex(pos) (conv2d_5_tf_mul * vec4(texture(conv2d_5_tf_raw, pos)).rgba)
[   2.284][d][vo/gpu/d3d11] [ 35] #define conv2d_5_tf_gather(pos, c) (conv2d_5_tf_mul * vec4(textureGather(conv2d_5_tf_raw, pos, c)))
[   2.284][d][vo/gpu/d3d11] [ 36] #define conv2d_5_tf_texOff(off) conv2d_5_tf_tex(conv2d_5_tf_pos + conv2d_5_tf_pt * vec2(off))
[   2.284][d][vo/gpu/d3d11] [ 37] #define conv2d_5_tf1_raw texture1
[   2.284][d][vo/gpu/d3d11] [ 38] #define conv2d_5_tf1_pos texcoord1
[   2.284][d][vo/gpu/d3d11] [ 39] #define conv2d_5_tf1_size texture_size1
[   2.284][d][vo/gpu/d3d11] [ 40] #define conv2d_5_tf1_rot texture_rot1
[   2.284][d][vo/gpu/d3d11] [ 41] #define conv2d_5_tf1_off texture_off1
[   2.284][d][vo/gpu/d3d11] [ 42] #define conv2d_5_tf1_pt pixel_size1
[   2.284][d][vo/gpu/d3d11] [ 43] #define conv2d_5_tf1_map texmap1
[   2.284][d][vo/gpu/d3d11] [ 44] #define conv2d_5_tf1_mul 1.000000
[   2.284][d][vo/gpu/d3d11] [ 45] #define conv2d_5_tf1_tex(pos) (conv2d_5_tf1_mul * vec4(texture(conv2d_5_tf1_raw, pos)).rgba)
[   2.284][d][vo/gpu/d3d11] [ 46] #define conv2d_5_tf1_gather(pos, c) (conv2d_5_tf1_mul * vec4(textureGather(conv2d_5_tf1_raw, pos, c)))
[   2.284][d][vo/gpu/d3d11] [ 47] #define conv2d_5_tf1_texOff(off) conv2d_5_tf1_tex(conv2d_5_tf1_pos + conv2d_5_tf1_pt * vec2(off))
[   2.284][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.284][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.284][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.284][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.284][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.284][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.17082009, 0.031344634, -0.06131912, 0.00887183, -0.01528174, 0.12943709, 0.24537678, 0.008178781, -0.312396, -0.023583878, 0.07827866, -0.1231261, 0.15081584, -0.18161978, -0.25179705, -0.036934935) * go_0(-1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.05768411, 0.16785417, -0.1788644, -0.0067257965, 0.021445744, 0.10066516, -0.23864186, 0.1450302, 0.12892793, 0.19856106, -0.24444748, 0.16531628, -0.044425935, -0.02775357, 0.009059946, -0.12958384) * go_0(-1.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 55]     result += mat4(-0.025798557, -0.17238182, -0.34056288, -0.20921059, -0.03576266, 0.1476854, -0.06264234, 0.14452787, -0.04130045, -0.07275762, 0.034578666, 0.2914669, 0.20879944, 0.21359251, -0.048695553, 0.2638088) * go_0(-1.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.022791177, 0.4204545, 0.116855636, 0.20241925, -0.010444933, -0.14462502, 0.022550104, -0.24423064, -0.09417524, 0.045358784, -0.11405829, 0.035979558, -0.2283092, -0.06670842, -0.23852053, -0.22417003) * go_0(0.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.14526704, 0.040880535, 0.14076385, 0.07795045, -0.059177604, -0.13056375, -0.3373641, -0.19344307, -0.29891858, -0.32578763, -0.29061425, 0.1562214, -0.13578376, 0.36586633, 0.24936736, 0.054629393) * go_0(0.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 58]     result += mat4(-0.025790233, -0.13020341, -0.10084969, 0.15767297, -0.09738769, 0.04034404, 0.0038675873, 0.043515608, 0.16899958, -0.29117966, 0.03420067, 0.14432564, -0.10473084, 0.21014084, 0.07775908, -0.09303797) * go_0(0.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.07443987, -0.16225167, 0.036251917, 0.028432872, 0.03759333, 0.004027401, -0.033941846, 0.0019474924, 0.02357054, 0.30748722, 0.1652115, -0.17361522, 0.16905582, 0.08048018, -0.23639561, -0.029408466) * go_0(1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 60]     result += mat4(0.0461233, -0.09346199, -0.07063276, -0.19447634, -0.049339604, -0.0032855074, -0.22661209, -0.0543389, 0.11924857, -0.21691081, -0.1645725, -0.0075736847, 0.018572787, -0.06552861, -0.01777661, -0.11651732) * go_0(1.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.06425901, 0.123392984, -0.16395192, -0.093448035, -0.029316641, 0.0986573, -0.23135012, 0.011170849, 0.00023920486, 0.15296175, 0.35453254, -0.05189021, 0.20708887, -0.103900835, 0.081992395, -0.21829562) * go_0(1.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.019074136, -0.1572586, 0.27919227, 0.09119617, 0.035954695, 0.2941489, 0.18262725, -0.055522963, -0.21364328, -0.1573611, 0.104966134, 0.08228523, 0.19945285, -0.0039229114, -0.1565048, 0.028975379) * go_1(-1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.18501253, 0.006473006, 0.06637501, 0.04295065, 0.06411007, 0.1166344, -0.10060226, 0.46296063, -0.08600344, -0.03560105, 0.012215349, 0.017885283, 0.061346993, 0.17336361, 0.01935021, 0.20198092) * go_1(-1.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.04451627, -0.10372061, -0.13968691, 0.14479733, 0.1660607, 0.19334625, 0.0085214665, 0.28863636, -0.07600901, -0.014777084, 0.13209191, -0.09045013, 0.104893915, -0.04776884, -0.007936376, 0.104568765) * go_1(-1.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 65]     result += mat4(0.023751335, -0.108048, -0.050531313, 0.15916029, 0.13246661, 0.04644228, -0.09586482, -0.17222965, -0.22898191, -0.033484615, 0.078883134, -0.052609313, -0.2721741, 0.045986425, 0.13972299, -0.28923607) * go_1(0.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.23364568, -0.008875902, -0.40894926, 0.060443908, -0.2839635, -0.5270991, -0.2500865, 0.002020195, -0.24488612, -0.04982319, -0.009110353, -0.018023955, 0.06647274, -0.25225738, 0.26154432, -0.033934146) * go_1(0.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.1535129, -0.21257545, -0.16553773, 0.17471452, -0.06203719, 0.15238857, 0.18702018, 0.18572305, 0.07740396, -0.074217625, -0.072156586, -0.2183728, 0.00403749, 0.13750519, 0.30362993, 0.06550286) * go_1(0.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 68]     result += mat4(0.37164542, -0.1980723, -0.15659203, 0.19498909, 0.01748114, 0.011807152, -0.05424202, 0.11926474, 0.050406165, -0.12925303, -0.020280985, 0.08429331, 0.14769496, -0.077555746, -0.15216178, -0.27070466) * go_1(1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 69]     result += mat4(0.35804263, 0.08539285, -0.14785156, -0.13532467, 0.058254432, 0.20448379, -0.006173341, 0.058168225, -0.21714899, -0.13472849, -0.09392532, -0.12753737, -0.097461835, -0.11419082, 0.09384189, 0.06414768) * go_1(1.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 70]     result += mat4(0.023494452, -0.22187226, -0.16694295, 0.0204334, -0.26720086, 0.15916729, 0.3098874, -0.10292057, 0.008854983, 0.13375004, -0.04409455, 0.09286524, 0.095829524, 0.12427317, -0.048659876, 0.18300754) * go_1(1.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.119153984, 0.10163183, 0.025017537, -0.40096784, 0.026778705, 0.15821172, -0.19947284, -0.33337715, 0.2952563, 0.16820388, -0.057061996, -0.029319009, -0.12184868, 0.09031512, 0.12028806, 0.021044692) * go_2(-1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 72]     result += mat4(0.086744264, -0.046958666, 0.2130253, -0.46672252, 0.07135636, 0.0100029735, -0.13828261, -0.012365689, -0.11374441, 0.21084632, -0.059631422, -0.013799735, -0.037889663, -0.10701892, -0.09493782, 0.15516634) * go_2(-1.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 73]     result += mat4(0.031181194, -0.01535001, 0.029270316, 0.13128386, 0.11838377, -0.17051528, 0.12228499, -0.04841128, 0.33350074, -0.006144013, -0.09055018, 0.27470216, -0.26665646, -0.08703671, -0.01719071, -0.23449609) * go_2(-1.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.12856458, 0.005562174, -0.19517267, 0.13270985, 0.2776414, 0.032003902, -0.15778573, 0.15344355, 0.26930434, -0.13459459, 0.035019353, 0.08896612, 0.12847935, -0.122637205, 0.001815178, 0.08290523) * go_2(0.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 75]     result += mat4(0.33805037, -0.15318587, -0.20955376, -0.26121393, -0.026022578, -0.1617741, 0.1336867, 0.026223289, 0.012059392, -0.17295446, -0.060811974, 0.14027825, -0.21134059, -0.08408573, -0.23773228, 0.110836074) * go_2(0.0, 0.0);
[   2.284][d][vo/gpu/d3d11] [ 76]     result += mat4(0.16176093, 0.15307428, -0.07711325, -0.3458805, 0.061291527, 0.023916256, 0.21370678, 0.0015756418, 0.10642374, 0.24807373, 0.11164451, 0.10780487, 0.087194376, -0.2718231, -0.008457387, 0.054078236) * go_2(0.0, 1.0);
[   2.284][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.03259038, -0.20923306, 0.165477, 0.098864526, -0.02734457, 0.08871225, -0.01552188, 0.047712058, 0.055032052, -0.13044262, -0.2899521, 0.22230095, -0.029343741, -0.16427459, -0.005436118, -0.05111821) * go_2(1.0, -1.0);
[   2.284][d][vo/gpu/d3d11] [ 78]     result += mat4(0.20065974, -0.1556366, -0.12620135, 0.44572976, -0.020925352, 0.12025185, 0.20588058, 0.06391864, 0.046870507, 0.16942503, -0.049370963, 0.008779016, 0.04954915, 0.090298936, -0.16466027, 0.011152038) * go_2(1.0, 0.0);
[   2.285][d][vo/gpu/d3d11] [ 79]     result += mat4(0.13587528, 0.047841422, 0.19804007, -0.1672396, -0.072491, 0.04543739, 0.25287256, 0.015226213, 0.02007356, -0.049578942, -0.08796175, 0.1714897, -0.07819061, 0.1509537, 0.093094915, 0.031139288) * go_2(1.0, 1.0);
[   2.285][d][vo/gpu/d3d11] [ 80]     result += mat4(-0.013774682, 0.118201815, -0.009592314, -0.10837201, -0.0686881, -0.083380274, 0.107689425, 0.046642892, 0.119898744, -0.05502989, -0.19719897, 0.0005697584, -0.0921928, 0.032281205, 0.2568853, 0.2325449) * go_3(-1.0, -1.0);
[   2.285][d][vo/gpu/d3d11] [ 81]     result += mat4(0.02991112, -0.09898633, 0.06076172, -0.20906185, 0.0026118348, 0.06130956, 0.06760944, -0.16662054, 0.065741204, -0.13144116, 0.011419801, 0.22552124, 0.1465757, -0.07417319, -0.10788749, -0.24952699) * go_3(-1.0, 0.0);
[   2.285][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.19238451, -0.024058497, 0.19580396, -0.067399554, -0.18832864, -0.11752747, -0.078949094, -0.23762032, -0.04141864, 0.022530237, -0.02222157, 0.0054874527, 0.057746816, -0.34854797, 0.028730657, -0.08976777) * go_3(-1.0, 1.0);
[   2.285][d][vo/gpu/d3d11] [ 83]     result += mat4(0.16888975, 0.19949849, -0.08456147, -0.03619044, -0.019596824, 0.11214634, 0.13971676, 0.22926724, 0.03219445, -0.04566354, -0.14948955, -0.22817011, -0.08714846, -0.19684613, 0.15479128, 0.2433362) * go_3(0.0, -1.0);
[   2.285][d][vo/gpu/d3d11] [ 84]     result += mat4(0.16050309, -0.102841675, 0.20855242, -0.011171905, -0.10309409, 0.22455123, 0.15892951, -0.06582373, 0.010079549, -0.2055006, -0.09385158, 0.006519388, 0.11838815, 0.37134558, -0.165772, 0.12704434) * go_3(0.0, 0.0);
[   2.285][d][vo/gpu/d3d11] [ 85]     result += mat4(0.11643292, 0.03294274, -0.09800525, -0.13601723, -0.081318736, -0.059975546, -0.039105035, -0.2893635, -0.13024913, -0.058016162, -0.09961072, 0.10532414, 0.24250132, -0.35546342, -0.092634924, 0.093994915) * go_3(0.0, 1.0);
[   2.285][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.18799333, 0.25611782, 0.014645917, -0.063751906, 0.06498416, 0.16619027, -0.14411639, 0.3914421, -0.07343631, -0.116468735, -0.10941946, -0.2553544, -0.37774643, -0.0018441634, 0.06827239, -0.0122299045) * go_3(1.0, -1.0);
[   2.285][d][vo/gpu/d3d11] [ 87]     result += mat4(-0.11884597, -0.2477297, 0.048488285, -0.06438257, -0.124703035, 0.25932777, 0.0650111, -0.0930877, 0.06463341, -0.000544085, 0.0147504965, -0.170097, -0.13241997, 0.20983136, -0.15956205, 0.03424298) * go_3(1.0, 0.0);
[   2.285][d][vo/gpu/d3d11] [ 88]     result += mat4(-0.034574904, 0.06755256, 0.09508443, -0.17162292, 0.046379335, 0.2178781, 0.08699012, -0.055380464, -0.2237568, -0.07427848, -0.028395249, -0.3225617, -0.084454566, -0.24776657, 0.254169, 0.13229847) * go_3(1.0, 1.0);
[   2.285][d][vo/gpu/d3d11] [ 89]     result += vec4(0.18765923, -0.07697714, 0.028134674, -0.060966115);
[   2.285][d][vo/gpu/d3d11] [ 90]     return result;
[   2.285][d][vo/gpu/d3d11] [ 91] }
[   2.285][d][vo/gpu/d3d11] [ 92] void main() {
[   2.285][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.285][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.285][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.285][d][vo/gpu/d3d11] [ 96] }
[   2.285][d][vo/gpu/d3d11] HLSL source:
[   2.285][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.285][d][vo/gpu/d3d11] [  2] {
[   2.285][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.285][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.285][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.285][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.285][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.285][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.285][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.285][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.285][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.285][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.285][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.285][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.285][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.285][d][vo/gpu/d3d11] [ 16] };
[   2.285][d][vo/gpu/d3d11] [ 17] 
[   2.285][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.285][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.285][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.285][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.285][d][vo/gpu/d3d11] [ 22] 
[   2.285][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.285][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.285][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.285][d][vo/gpu/d3d11] [ 26] 
[   2.285][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.285][d][vo/gpu/d3d11] [ 28] {
[   2.285][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.285][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.285][d][vo/gpu/d3d11] [ 31] };
[   2.285][d][vo/gpu/d3d11] [ 32] 
[   2.285][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.285][d][vo/gpu/d3d11] [ 34] {
[   2.285][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.285][d][vo/gpu/d3d11] [ 36] };
[   2.285][d][vo/gpu/d3d11] [ 37] 
[   2.285][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.285][d][vo/gpu/d3d11] [ 39] {
[   2.285][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.285][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.1708200871944427490234375f, 0.0313446335494518280029296875f, -0.061319120228290557861328125f, 0.008871830068528652191162109375f), float4(-0.015281739644706249237060546875f, 0.12943708896636962890625f, 0.24537678062915802001953125f, 0.008178780786693096160888671875f), float4(-0.312395989894866943359375f, -0.0235838778316974639892578125f, 0.07827866077423095703125f, -0.123126097023487091064453125f), float4(0.15081584453582763671875f, -0.18161977827548980712890625f, -0.2517970502376556396484375f, -0.036934934556484222412109375f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.05768410861492156982421875f, 0.16785417497158050537109375f, -0.17886440455913543701171875f, -0.006725796498358249664306640625f), float4(0.021445743739604949951171875f, 0.100665159523487091064453125f, -0.23864185810089111328125f, 0.145030200481414794921875f), float4(0.12892793118953704833984375f, 0.19856105744838714599609375f, -0.24444748461246490478515625f, 0.165316283702850341796875f), float4(-0.0444259345531463623046875f, -0.027753569185733795166015625f, 0.009059946052730083465576171875f, -0.129583835601806640625f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(-0.02579855732619762420654296875f, -0.172381818294525146484375f, -0.340562880039215087890625f, -0.20921058952808380126953125f), float4(-0.035762660205364227294921875f, 0.14768539369106292724609375f, -0.062642343342304229736328125f, 0.14452786743640899658203125f), float4(-0.0413004495203495025634765625f, -0.07275761663913726806640625f, 0.03457866609096527099609375f, 0.291466891765594482421875f), float4(0.20879943668842315673828125f, 0.21359251439571380615234375f, -0.0486955530941486358642578125f, 0.263808786869049072265625f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.0227911770343780517578125f, 0.420454502105712890625f, 0.11685563623905181884765625f, 0.2024192512035369873046875f), float4(-0.010444932617247104644775390625f, -0.14462502300739288330078125f, 0.02255010418593883514404296875f, -0.24423064291477203369140625f), float4(-0.094175241887569427490234375f, 0.045358784496784210205078125f, -0.114058293402194976806640625f, 0.0359795577824115753173828125f), float4(-0.22830919921398162841796875f, -0.066708423197269439697265625f, -0.2385205328464508056640625f, -0.224170029163360595703125f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.1452670395374298095703125f, 0.0408805347979068756103515625f, 0.1407638490200042724609375f, 0.0779504477977752685546875f), float4(-0.0591776035726070404052734375f, -0.13056375086307525634765625f, -0.3373641073703765869140625f, -0.19344307482242584228515625f), float4(-0.2989185750484466552734375f, -0.3257876336574554443359375f, -0.29061424732208251953125f, 0.15622140467166900634765625f), float4(-0.1357837617397308349609375f, 0.3658663332462310791015625f, 0.24936735630035400390625f, 0.054629392921924591064453125f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(-0.0257902331650257110595703125f, -0.13020341098308563232421875f, -0.100849688053131103515625f, 0.1576729714870452880859375f), float4(-0.09738768637180328369140625f, 0.0403440408408641815185546875f, 0.00386758730746805667877197265625f, 0.04351560771465301513671875f), float4(0.1689995825290679931640625f, -0.291179656982421875f, 0.0342006683349609375f, 0.1443256437778472900390625f), float4(-0.104730837047100067138671875f, 0.21014083921909332275390625f, 0.077759079635143280029296875f, -0.093037970364093780517578125f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.07443986833095550537109375f, -0.16225166618824005126953125f, 0.03625191748142242431640625f, 0.0284328721463680267333984375f), float4(0.0375933311879634857177734375f, 0.004027401097118854522705078125f, -0.0339418463408946990966796875f, 0.0019474923610687255859375f), float4(0.02357053942978382110595703125f, 0.3074872195720672607421875f, 0.165211498737335205078125f, -0.1736152172088623046875f), float4(0.16905581951141357421875f, 0.080480180680751800537109375f, -0.23639561235904693603515625f, -0.0294084660708904266357421875f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.0461232997477054595947265625f, -0.0934619903564453125f, -0.070632763206958770751953125f, -0.1944763362407684326171875f), float4(-0.0493396036326885223388671875f, -0.00328550743870437145233154296875f, -0.226612091064453125f, -0.0543388985097408294677734375f), float4(0.119248569011688232421875f, -0.2169108092784881591796875f, -0.1645725071430206298828125f, -0.00757368467748165130615234375f), float4(0.01857278682291507720947265625f, -0.065528608858585357666015625f, -0.01777661032974720001220703125f, -0.11651732027530670166015625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.06425900757312774658203125f, 0.12339298427104949951171875f, -0.16395191848278045654296875f, -0.093448035418987274169921875f), float4(-0.029316641390323638916015625f, 0.098657302558422088623046875f, -0.231350123882293701171875f, 0.01117084920406341552734375f), float4(0.00023920486273709684610366821289062f, 0.15296174585819244384765625f, 0.354532539844512939453125f, -0.05189020931720733642578125f), float4(0.20708887279033660888671875f, -0.10390083491802215576171875f, 0.081992395222187042236328125f, -0.21829561889171600341796875f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.01907413639128208160400390625f, -0.1572585999965667724609375f, 0.279192268848419189453125f, 0.091196171939373016357421875f), float4(0.0359546951949596405029296875f, 0.2941488921642303466796875f, 0.18262724578380584716796875f, -0.05552296340465545654296875f), float4(-0.2136432826519012451171875f, -0.15736110508441925048828125f, 0.1049661338329315185546875f, 0.082285232841968536376953125f), float4(0.1994528472423553466796875f, -0.00392291136085987091064453125f, -0.15650479495525360107421875f, 0.0289753787219524383544921875f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.18501253426074981689453125f, 0.0064730062149465084075927734375f, 0.066375009715557098388671875f, 0.0429506488144397735595703125f), float4(0.0641100704669952392578125f, 0.1166343986988067626953125f, -0.100602261722087860107421875f, 0.4629606306552886962890625f), float4(-0.08600343763828277587890625f, -0.0356010496616363525390625f, 0.012215348891913890838623046875f, 0.01788528263568878173828125f), float4(0.06134699285030364990234375f, 0.17336361110210418701171875f, 0.01935021020472049713134765625f, 0.2019809186458587646484375f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.0445162691175937652587890625f, -0.103720612823963165283203125f, -0.1396869122982025146484375f, 0.14479732513427734375f), float4(0.16606070101261138916015625f, 0.19334624707698822021484375f, 0.008521466515958309173583984375f, 0.2886363565921783447265625f), float4(-0.076009012758731842041015625f, -0.014777083881199359893798828125f, 0.1320919096469879150390625f, -0.090450130403041839599609375f), float4(0.104893915355205535888671875f, -0.047768838703632354736328125f, -0.007936376146972179412841796875f, 0.10456876456737518310546875f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(0.02375133521854877471923828125f, -0.108047999441623687744140625f, -0.05053131282329559326171875f, 0.1591602861881256103515625f), float4(0.132466614246368408203125f, 0.0464422814548015594482421875f, -0.09586481750011444091796875f, -0.17222964763641357421875f), float4(-0.228981912136077880859375f, -0.033484615385532379150390625f, 0.078883133828639984130859375f, -0.0526093132793903350830078125f), float4(-0.2721740901470184326171875f, 0.0459864251315593719482421875f, 0.13972298800945281982421875f, -0.2892360687255859375f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.2336456775665283203125f, -0.008875901810824871063232421875f, -0.40894925594329833984375f, 0.0604439079761505126953125f), float4(-0.283963501453399658203125f, -0.527099072933197021484375f, -0.250086486339569091796875f, 0.00202019489370286464691162109375f), float4(-0.24488611519336700439453125f, -0.0498231910169124603271484375f, -0.009110352955758571624755859375f, -0.01802395470440387725830078125f), float4(0.0664727389812469482421875f, -0.2522573769092559814453125f, 0.2615443170070648193359375f, -0.0339341461658477783203125f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.153512895107269287109375f, -0.21257545053958892822265625f, -0.16553772985935211181640625f, 0.17471452057361602783203125f), float4(-0.0620371885597705841064453125f, 0.15238857269287109375f, 0.18702018260955810546875f, 0.18572305142879486083984375f), float4(0.077403962612152099609375f, -0.074217624962329864501953125f, -0.072156585752964019775390625f, -0.21837280690670013427734375f), float4(0.00403749011456966400146484375f, 0.13750518858432769775390625f, 0.303629934787750244140625f, 0.065502859652042388916015625f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(0.3716454207897186279296875f, -0.19807229936122894287109375f, -0.15659202635288238525390625f, 0.19498908519744873046875f), float4(0.017481140792369842529296875f, 0.011807152070105075836181640625f, -0.0542420186102390289306640625f, 0.11926473677158355712890625f), float4(0.050406165421009063720703125f, -0.12925302982330322265625f, -0.02028098516166210174560546875f, 0.084293313324451446533203125f), float4(0.14769496023654937744140625f, -0.0775557458400726318359375f, -0.152161777019500732421875f, -0.2707046568393707275390625f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(0.3580426275730133056640625f, 0.08539284765720367431640625f, -0.1478515565395355224609375f, -0.13532467186450958251953125f), float4(0.0582544319331645965576171875f, 0.20448379218578338623046875f, -0.0061733410693705081939697265625f, 0.058168224990367889404296875f), float4(-0.2171489894390106201171875f, -0.134728491306304931640625f, -0.093925319612026214599609375f, -0.12753736972808837890625f), float4(-0.09746183454990386962890625f, -0.1141908168792724609375f, 0.093841888010501861572265625f, 0.0641476809978485107421875f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.0234944522380828857421875f, -0.22187225520610809326171875f, -0.16694295406341552734375f, 0.0204333998262882232666015625f), float4(-0.2672008574008941650390625f, 0.15916728973388671875f, 0.309887409210205078125f, -0.102920569479465484619140625f), float4(0.00885498337447643280029296875f, 0.13375003635883331298828125f, -0.0440945513546466827392578125f, 0.09286524355411529541015625f), float4(0.095829524099826812744140625f, 0.124273173511028289794921875f, -0.04865987598896026611328125f, 0.183007538318634033203125f)));
[   2.285][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.119153983891010284423828125f, 0.101631827652454376220703125f, 0.025017537176609039306640625f, -0.4009678363800048828125f), float4(0.026778705418109893798828125f, 0.15821172297000885009765625f, -0.199472844600677490234375f, -0.3333771526813507080078125f), float4(0.2952562868595123291015625f, 0.16820387542247772216796875f, -0.0570619963109493255615234375f, -0.02931900881230831146240234375f), float4(-0.121848680078983306884765625f, 0.09031511843204498291015625f, 0.12028805911540985107421875f, 0.02104469202458858489990234375f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(0.08674426376819610595703125f, -0.0469586662948131561279296875f, 0.2130253016948699951171875f, -0.4667225182056427001953125f), float4(0.071356363594532012939453125f, 0.010002973489463329315185546875f, -0.13828261196613311767578125f, -0.012365688569843769073486328125f), float4(-0.1137444078922271728515625f, 0.21084631979465484619140625f, -0.05963142216205596923828125f, -0.013799735344946384429931640625f), float4(-0.0378896631300449371337890625f, -0.1070189177989959716796875f, -0.094937823712825775146484375f, 0.15516634285449981689453125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.031181193888187408447265625f, -0.0153500102460384368896484375f, 0.02927031554281711578369140625f, 0.13128386437892913818359375f), float4(0.118383772671222686767578125f, -0.17051528394222259521484375f, 0.12228499352931976318359375f, -0.0484112799167633056640625f), float4(0.33350074291229248046875f, -0.0061440127901732921600341796875f, -0.090550176799297332763671875f, 0.2747021615505218505859375f), float4(-0.266656458377838134765625f, -0.087036706507205963134765625f, -0.01719070971012115478515625f, -0.2344960868358612060546875f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.12856458127498626708984375f, 0.005562174133956432342529296875f, -0.19517266750335693359375f, 0.13270984590053558349609375f), float4(0.2776413857936859130859375f, 0.032003901898860931396484375f, -0.15778572857379913330078125f, 0.1534435451030731201171875f), float4(0.269304335117340087890625f, -0.1345945894718170166015625f, 0.03501935303211212158203125f, 0.08896611630916595458984375f), float4(0.12847934663295745849609375f, -0.122637204825878143310546875f, 0.0018151779659092426300048828125f, 0.082905232906341552734375f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.338050365447998046875f, -0.1531858742237091064453125f, -0.20955376327037811279296875f, -0.2612139284610748291015625f), float4(-0.02602257765829563140869140625f, -0.161774098873138427734375f, 0.13368670642375946044921875f, 0.02622328884899616241455078125f), float4(0.01205939240753650665283203125f, -0.17295445501804351806640625f, -0.060811974108219146728515625f, 0.1402782499790191650390625f), float4(-0.21134059131145477294921875f, -0.0840857326984405517578125f, -0.23773227632045745849609375f, 0.11083607375621795654296875f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.16176092624664306640625f, 0.15307427942752838134765625f, -0.077113248407840728759765625f, -0.3458805084228515625f), float4(0.0612915270030498504638671875f, 0.0239162556827068328857421875f, 0.21370677649974822998046875f, 0.0015756417997181415557861328125f), float4(0.106423743069171905517578125f, 0.2480737268924713134765625f, 0.1116445064544677734375f, 0.107804872095584869384765625f), float4(0.087194375693798065185546875f, -0.271823108196258544921875f, -0.00845738686621189117431640625f, 0.05407823622226715087890625f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.032590381801128387451171875f, -0.20923306047916412353515625f, 0.16547699272632598876953125f, 0.0988645255565643310546875f), float4(-0.02734456956386566162109375f, 0.088712252676486968994140625f, -0.0155218802392482757568359375f, 0.0477120578289031982421875f), float4(0.055032052099704742431640625f, -0.13044261932373046875f, -0.289952099323272705078125f, 0.222300946712493896484375f), float4(-0.02934374101459980010986328125f, -0.16427458822727203369140625f, -0.0054361182264983654022216796875f, -0.05111820995807647705078125f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.20065973699092864990234375f, -0.15563659369945526123046875f, -0.12620134651660919189453125f, 0.4457297623157501220703125f), float4(-0.02092535234987735748291015625f, 0.12025184929370880126953125f, 0.205880582332611083984375f, 0.063918642699718475341796875f), float4(0.046870507299900054931640625f, 0.16942502558231353759765625f, -0.0493709631264209747314453125f, 0.008779016323387622833251953125f), float4(0.0495491512119770050048828125f, 0.09029893577098846435546875f, -0.164660274982452392578125f, 0.01115203835070133209228515625f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.135875284671783447265625f, 0.047841422259807586669921875f, 0.198040068149566650390625f, -0.167239606380462646484375f), float4(-0.072490997612476348876953125f, 0.0454373918473720550537109375f, 0.2528725564479827880859375f, 0.01522621326148509979248046875f), float4(0.0200735591351985931396484375f, -0.049578942358493804931640625f, -0.08796174824237823486328125f, 0.17148970067501068115234375f), float4(-0.07819060981273651123046875f, 0.15095369517803192138671875f, 0.0930949151515960693359375f, 0.0311392880976200103759765625f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(-0.0137746818363666534423828125f, 0.118201814591884613037109375f, -0.009592314250767230987548828125f, -0.108372010290622711181640625f), float4(-0.068688102066516876220703125f, -0.083380274474620819091796875f, 0.10768942534923553466796875f, 0.046642892062664031982421875f), float4(0.119898743927478790283203125f, -0.055029891431331634521484375f, -0.19719897210597991943359375f, 0.0005697584128938615322113037109375f), float4(-0.0921927988529205322265625f, 0.03228120505809783935546875f, 0.2568852901458740234375f, 0.23254489898681640625f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(0.0299111194908618927001953125f, -0.098986327648162841796875f, 0.0607617199420928955078125f, -0.20906184613704681396484375f), float4(0.00261183478869497776031494140625f, 0.06130956113338470458984375f, 0.067609436810016632080078125f, -0.16662053763866424560546875f), float4(0.065741203725337982177734375f, -0.13144116103649139404296875f, 0.01141980104148387908935546875f, 0.2255212366580963134765625f), float4(0.14657570421695709228515625f, -0.074173189699649810791015625f, -0.10788749158382415771484375f, -0.24952699244022369384765625f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.1923845112323760986328125f, -0.02405849657952785491943359375f, 0.19580395519733428955078125f, -0.067399553954601287841796875f), float4(-0.18832863867282867431640625f, -0.11752746999263763427734375f, -0.07894909381866455078125f, -0.2376203238964080810546875f), float4(-0.0414186418056488037109375f, 0.02253023721277713775634765625f, -0.02222157083451747894287109375f, 0.0054874527268111705780029296875f), float4(0.0577468164265155792236328125f, -0.3485479652881622314453125f, 0.0287306569516658782958984375f, -0.08976776897907257080078125f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.16888974606990814208984375f, 0.19949848949909210205078125f, -0.08456146717071533203125f, -0.0361904390156269073486328125f), float4(-0.01959682442247867584228515625f, 0.112146340310573577880859375f, 0.13971675932407379150390625f, 0.22926723957061767578125f), float4(0.03219445049762725830078125f, -0.0456635393202304840087890625f, -0.1494895517826080322265625f, -0.22817011177539825439453125f), float4(-0.0871484577655792236328125f, -0.19684612751007080078125f, 0.15479128062725067138671875f, 0.243336200714111328125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.160503089427947998046875f, -0.102841675281524658203125f, 0.208552420139312744140625f, -0.01117190532386302947998046875f), float4(-0.103094093501567840576171875f, 0.2245512306690216064453125f, 0.15892951190471649169921875f, -0.065823726356029510498046875f), float4(0.010079548694193363189697265625f, -0.20550060272216796875f, -0.09385158121585845947265625f, 0.0065193879418075084686279296875f), float4(0.118388153612613677978515625f, 0.371345579624176025390625f, -0.16577200591564178466796875f, 0.12704433500766754150390625f)));
[   2.285][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.11643292009830474853515625f, 0.0329427383840084075927734375f, -0.09800525009632110595703125f, -0.1360172331333160400390625f), float4(-0.08131873607635498046875f, -0.0599755458533763885498046875f, -0.039105035364627838134765625f, -0.28936350345611572265625f), float4(-0.13024912774562835693359375f, -0.0580161623656749725341796875f, -0.099610723555088043212890625f, 0.105324141681194305419921875f), float4(0.242501318454742431640625f, -0.3554634153842926025390625f, -0.092634923756122589111328125f, 0.093994915485382080078125f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.18799333274364471435546875f, 0.25611782073974609375f, 0.01464591734111309051513671875f, -0.0637519061565399169921875f), float4(0.06498415768146514892578125f, 0.16619026660919189453125f, -0.14411638677120208740234375f, 0.3914420902729034423828125f), float4(-0.073436312377452850341796875f, -0.116468735039234161376953125f, -0.109419457614421844482421875f, -0.255354404449462890625f), float4(-0.3777464330196380615234375f, -0.001844163401983678340911865234375f, 0.068272389471530914306640625f, -0.01222990453243255615234375f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(-0.1188459694385528564453125f, -0.24772970378398895263671875f, 0.0484882853925228118896484375f, -0.06438256800174713134765625f), float4(-0.12470303475856781005859375f, 0.25932776927947998046875f, 0.06501109898090362548828125f, -0.0930877029895782470703125f), float4(0.064633406698703765869140625f, -0.0005440849927254021167755126953125f, 0.014750496484339237213134765625f, -0.17009699344635009765625f), float4(-0.1324199736118316650390625f, 0.20983135700225830078125f, -0.159562051296234130859375f, 0.034242980182170867919921875f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(-0.034574903547763824462890625f, 0.067552559077739715576171875f, 0.0950844287872314453125f, -0.17162291705608367919921875f), float4(0.046379335224628448486328125f, 0.2178781032562255859375f, 0.0869901180267333984375f, -0.05538046360015869140625f), float4(-0.22375680506229400634765625f, -0.074278481304645538330078125f, -0.02839524857699871063232421875f, -0.3225617110729217529296875f), float4(-0.0844545662403106689453125f, -0.24776656925678253173828125f, 0.254168987274169921875f, 0.13229846954345703125f)))) + float4(0.1876592338085174560546875f, -0.076977141201496124267578125f, 0.0281346738338470458984375f, -0.0609661154448986053466796875f);
[   2.285][d][vo/gpu/d3d11] [ 61] }
[   2.285][d][vo/gpu/d3d11] [ 62] 
[   2.285][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.285][d][vo/gpu/d3d11] [ 64] {
[   2.285][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.285][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.285][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.285][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.285][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.285][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.285][d][vo/gpu/d3d11] [ 71] }
[   2.285][d][vo/gpu] Resizing texture: 1920x800
[   2.287][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.289][v][vo/gpu/d3d11] Compiled a vertex shader in 3893us
[   2.289][v][vo/gpu/d3d11] shaderc: 2115us, SPIRV-Cross: 124us, D3DCompile: 1654us
[   2.289][d][vo/gpu/d3d11] GLSL source:
[   2.289][d][vo/gpu/d3d11] [  1] #version 450
[   2.289][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.289][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.289][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.289][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.289][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.289][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.289][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.289][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.289][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.289][d][vo/gpu/d3d11] [ 11] void main() {
[   2.289][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.289][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.289][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.289][d][vo/gpu/d3d11] [ 15] }
[   2.289][d][vo/gpu/d3d11] HLSL source:
[   2.289][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.289][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.289][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.289][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.289][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.289][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.289][d][vo/gpu/d3d11] [  7] 
[   2.289][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.289][d][vo/gpu/d3d11] [  9] {
[   2.289][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.289][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.289][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.289][d][vo/gpu/d3d11] [ 13] };
[   2.289][d][vo/gpu/d3d11] [ 14] 
[   2.289][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.289][d][vo/gpu/d3d11] [ 16] {
[   2.289][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.289][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.289][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.289][d][vo/gpu/d3d11] [ 20] };
[   2.289][d][vo/gpu/d3d11] [ 21] 
[   2.289][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.289][d][vo/gpu/d3d11] [ 23] {
[   2.289][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.289][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.289][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.289][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.289][d][vo/gpu/d3d11] [ 28] }
[   2.289][d][vo/gpu/d3d11] [ 29] 
[   2.289][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.289][d][vo/gpu/d3d11] [ 31] {
[   2.289][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.289][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.289][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.289][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.289][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.289][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.289][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.289][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.289][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.289][d][vo/gpu/d3d11] [ 41] }
[   2.314][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.371][v][vo/gpu/d3d11] Compiled a fragment shader in 81957us
[   2.371][v][vo/gpu/d3d11] shaderc: 25195us, SPIRV-Cross: 2762us, D3DCompile: 54000us
[   2.371][d][vo/gpu/d3d11] GLSL source:
[   2.371][d][vo/gpu/d3d11] [  1] #version 450
[   2.371][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.371][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.371][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.371][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.371][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.371][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.371][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.371][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.371][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.371][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.371][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.371][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.371][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.371][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.371][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.371][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.371][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.371][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.371][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.371][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.371][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.371][d][vo/gpu/d3d11] [ 23] };
[   2.371][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.371][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.371][d][vo/gpu/d3d11] [ 26] #define conv2d_6_tf_raw texture0
[   2.371][d][vo/gpu/d3d11] [ 27] #define conv2d_6_tf_pos texcoord0
[   2.371][d][vo/gpu/d3d11] [ 28] #define conv2d_6_tf_size texture_size0
[   2.371][d][vo/gpu/d3d11] [ 29] #define conv2d_6_tf_rot texture_rot0
[   2.371][d][vo/gpu/d3d11] [ 30] #define conv2d_6_tf_off texture_off0
[   2.371][d][vo/gpu/d3d11] [ 31] #define conv2d_6_tf_pt pixel_size0
[   2.371][d][vo/gpu/d3d11] [ 32] #define conv2d_6_tf_map texmap0
[   2.371][d][vo/gpu/d3d11] [ 33] #define conv2d_6_tf_mul 1.000000
[   2.371][d][vo/gpu/d3d11] [ 34] #define conv2d_6_tf_tex(pos) (conv2d_6_tf_mul * vec4(texture(conv2d_6_tf_raw, pos)).rgba)
[   2.371][d][vo/gpu/d3d11] [ 35] #define conv2d_6_tf_gather(pos, c) (conv2d_6_tf_mul * vec4(textureGather(conv2d_6_tf_raw, pos, c)))
[   2.371][d][vo/gpu/d3d11] [ 36] #define conv2d_6_tf_texOff(off) conv2d_6_tf_tex(conv2d_6_tf_pos + conv2d_6_tf_pt * vec2(off))
[   2.371][d][vo/gpu/d3d11] [ 37] #define conv2d_6_tf1_raw texture1
[   2.371][d][vo/gpu/d3d11] [ 38] #define conv2d_6_tf1_pos texcoord1
[   2.371][d][vo/gpu/d3d11] [ 39] #define conv2d_6_tf1_size texture_size1
[   2.371][d][vo/gpu/d3d11] [ 40] #define conv2d_6_tf1_rot texture_rot1
[   2.371][d][vo/gpu/d3d11] [ 41] #define conv2d_6_tf1_off texture_off1
[   2.371][d][vo/gpu/d3d11] [ 42] #define conv2d_6_tf1_pt pixel_size1
[   2.371][d][vo/gpu/d3d11] [ 43] #define conv2d_6_tf1_map texmap1
[   2.371][d][vo/gpu/d3d11] [ 44] #define conv2d_6_tf1_mul 1.000000
[   2.371][d][vo/gpu/d3d11] [ 45] #define conv2d_6_tf1_tex(pos) (conv2d_6_tf1_mul * vec4(texture(conv2d_6_tf1_raw, pos)).rgba)
[   2.371][d][vo/gpu/d3d11] [ 46] #define conv2d_6_tf1_gather(pos, c) (conv2d_6_tf1_mul * vec4(textureGather(conv2d_6_tf1_raw, pos, c)))
[   2.371][d][vo/gpu/d3d11] [ 47] #define conv2d_6_tf1_texOff(off) conv2d_6_tf1_tex(conv2d_6_tf1_pos + conv2d_6_tf1_pt * vec2(off))
[   2.371][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.371][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.371][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.371][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.371][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.371][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(0.21919365, 0.36627784, 0.12603314, 0.24306288, 0.06447028, 0.06472204, -0.05997039, -0.15651788, 0.017059859, -0.006497198, -0.4189735, 0.021636713, -0.23887977, -0.014220949, 0.031113686, -0.17342716) * go_0(-1.0, -1.0);
[   2.371][d][vo/gpu/d3d11] [ 54]     result += mat4(-0.10818789, -0.03273837, 0.33918005, -0.19290088, 0.0955361, -0.34107623, -0.054906327, -0.18083344, -0.060723677, 0.24395694, 0.112975016, -0.07254578, -0.14389384, 0.13235968, -0.15054801, -0.26216486) * go_0(-1.0, 0.0);
[   2.371][d][vo/gpu/d3d11] [ 55]     result += mat4(-0.23442148, -0.07857079, 0.022283873, -0.2656417, 0.037092753, -0.037313666, -0.5057047, 0.042533103, -0.120424, 0.00021930189, -0.0044566668, -0.45536995, 0.00040759926, 0.14597592, -0.094990164, -0.036161344) * go_0(-1.0, 1.0);
[   2.371][d][vo/gpu/d3d11] [ 56]     result += mat4(0.15024352, 0.19903262, -0.0734784, 0.092836305, -0.025753846, 0.024750374, -0.07550193, 0.035420835, 0.11084378, 0.26119822, -0.08443512, -0.0047807065, -0.042685136, 0.24889739, 0.098650105, 0.2088369) * go_0(0.0, -1.0);
[   2.371][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.25551823, 0.14455976, 0.19886157, -0.23465924, 0.20711218, -0.20875362, -0.11320392, -0.30852005, -0.06795657, 0.008670962, 0.30601278, 0.6929064, 0.17079145, 0.15744895, 0.06441601, 0.06514001) * go_0(0.0, 0.0);
[   2.371][d][vo/gpu/d3d11] [ 58]     result += mat4(0.03142604, -0.006410137, -0.023654792, -0.05708553, 0.062985405, -0.077010594, 0.078804865, 0.050882503, 0.010274228, -0.15558401, 0.09490256, 0.14964707, -0.11966925, -0.36176664, 0.27809814, -0.18862294) * go_0(0.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 59]     result += mat4(0.05609992, 0.0041612233, -0.08498908, 0.04479823, -0.080117956, -0.17423204, -0.22858045, 0.054569032, -0.050866384, -0.020000307, 0.027000953, -0.67724514, 0.16240878, -0.04641204, 0.0648367, -0.20613132) * go_0(1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 60]     result += mat4(0.08542306, -0.08254248, -0.11090553, -0.14140448, -0.10788511, -0.13011602, -0.29319742, -0.26007155, 0.11033401, -0.31966573, 0.32668245, 0.19542319, 0.06329418, 0.20904626, 0.2724067, -0.009155685) * go_0(1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 61]     result += mat4(-0.007403411, 0.0012836396, -0.23446666, -0.03017208, 0.062420018, -0.13611084, -0.2975928, 0.13173148, -0.03679939, 0.13743873, -0.10121899, 0.074514665, 0.1497629, -0.09523838, 0.39018926, 0.37807035) * go_0(1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 62]     result += mat4(0.11441487, -0.19565523, -0.25757137, -0.16148767, 0.15575317, -0.12657928, 0.10479676, 0.062919036, 0.010544159, 0.22931573, 0.20360178, 0.4637635, -0.3395036, -0.52467215, 0.08759308, 0.028030418) * go_1(-1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 63]     result += mat4(0.2699195, -0.34218305, 0.15259695, 0.03139074, -0.024053533, -0.029567484, 0.28480124, 0.20525953, 0.15452823, -0.217713, 0.15861876, -0.012275699, 0.21408023, 0.097508304, -0.57126766, -0.14679857) * go_1(-1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 64]     result += mat4(-0.0755847, -0.09751562, -0.29480466, -0.22285318, 0.14196442, 0.114573136, -0.22294767, 0.12463806, 0.3322209, -0.04631724, -0.11097061, -0.27986854, -0.16099304, -0.060079545, 0.00299308, 0.120776065) * go_1(-1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 65]     result += mat4(0.050933484, -0.13776319, -0.18809728, 0.24035202, -0.32528606, -0.41684148, -0.029342847, 0.28642926, -0.07963454, -0.12905268, 0.07606093, 0.24670005, -0.08815598, -0.23320907, -0.008099349, 0.21512873) * go_1(0.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 66]     result += mat4(0.19247563, 0.18083979, -0.09719762, 0.15314941, -0.22350982, 0.46515045, -0.3571128, 0.35953265, 0.06921985, -0.4482386, -0.18732521, -0.5043983, 0.35159567, -0.33315298, -0.21884166, -0.16283798) * go_1(0.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 67]     result += mat4(-0.021124054, -0.007966742, 0.0052493825, 0.022550896, 0.030403977, 0.3377868, -0.47602004, -0.077664234, -0.07222509, -0.07486097, -0.37971064, -0.5107857, -0.06299477, 0.04930232, -0.3330487, 0.29845512) * go_1(0.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.063705474, -0.07917637, -0.02026607, -0.05142568, 0.021577014, -0.07379867, 0.033937998, 0.08148773, -0.02717838, -0.03233838, 0.098000035, 0.036476444, -0.13366953, 0.014477577, 0.24064232, 0.39313284) * go_1(1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 69]     result += mat4(-0.16046515, -0.094624564, 0.35435164, 0.09942324, -0.07137174, -0.27999225, 0.124644354, -0.0062176553, 0.015016751, -0.05500243, -0.23249559, -0.4508382, 0.1860433, 0.10671491, -0.033345353, -0.06611453) * go_1(1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 70]     result += mat4(0.21614046, -0.01307525, -0.18941112, -0.20533535, -0.14481686, -0.47801897, 0.22605121, -0.20298961, -0.06744227, -0.20377496, -0.11926173, 0.15645133, -0.31570885, -0.3495616, -0.024666889, 0.040965475) * go_1(1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.11748018, -0.039976366, -0.00084064255, -0.028653437, -0.16216733, -0.036768105, 0.018064514, -0.0928936, 0.14008482, -0.064511225, 0.24329947, -0.0268608, 0.050330248, 0.08540601, -0.07272679, -0.01187671) * go_2(-1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 72]     result += mat4(-0.09459936, -0.011723822, -0.06952858, -0.07808506, -0.065588176, 0.332501, -0.0120042395, 0.07668016, 0.14735217, -0.14856043, -0.06702449, -0.020953184, -0.023006834, 0.06135422, 0.1491448, -0.028061569) * go_2(-1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 73]     result += mat4(0.25136968, 0.25146323, -0.108277924, -0.20407207, -0.0013780294, 0.16108194, 0.25143847, 0.06672421, -0.033905584, -0.021144686, -0.019152718, 0.34619498, 0.14560962, 0.034437314, 0.024790365, -0.049976267) * go_2(-1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 74]     result += mat4(-0.24928351, 0.12637813, 0.23609994, 0.12722939, -0.036997862, -0.16554876, 0.11144095, -0.10040036, -0.020359103, -0.080701865, -0.3142192, 0.27257237, 0.13546956, -0.14416885, 0.028196262, -0.2886465) * go_2(0.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 75]     result += mat4(0.28524777, -0.4236231, 0.27420738, -0.21095508, 0.23475651, 0.115876295, -0.18837357, -0.0260708, 0.030670704, -0.11516913, -0.11365572, -0.2203149, -0.018612983, -0.10719593, -0.031727783, 0.1403327) * go_2(0.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 76]     result += mat4(0.07240512, 0.03139215, 0.12328737, -0.021201206, -0.13971715, 0.072742075, -0.0011289873, 0.0053133667, 0.035639685, -0.04322272, -0.19288473, -0.15812221, -0.19126481, 0.0698514, 0.17619178, -0.035605464) * go_2(0.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 77]     result += mat4(-0.18552057, 0.07259671, 0.011667668, -0.15630563, 0.11414356, 0.14482655, -0.04021029, 0.18495587, -0.11386139, -0.09058561, -0.011265998, 0.23358451, 0.0521358, 0.12495261, 0.021644838, -0.048094347) * go_2(1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 78]     result += mat4(-0.09222373, 0.0533347, 0.055820454, 0.22382596, 0.18713981, 0.2668916, -0.019384036, 0.012698582, 0.13325234, 0.20361474, -0.33106443, -0.08571572, -0.21243028, -0.10996386, 0.123459645, 0.1534967) * go_2(1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 79]     result += mat4(0.18133277, 0.18108074, -0.05638664, 0.29533157, -0.2108019, -0.033636626, 0.5015888, -0.15116066, -0.041320793, -0.14764231, 0.07314567, -0.18865979, 0.10276937, 0.094240844, -0.1364283, 0.27812913) * go_2(1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 80]     result += mat4(0.06040915, 0.23753685, 0.19019844, 0.23948252, -0.07535012, 0.11848904, 0.14389765, 0.050067905, 0.16150077, -0.030053454, 0.12478255, 0.26020208, 0.111198805, 0.06787492, -0.12771018, 0.006687384) * go_3(-1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 81]     result += mat4(-0.5421617, 0.10414128, -0.21526064, -0.08883624, 0.13145073, -0.29695904, 0.57386386, 0.073361695, -0.09538372, 0.27593842, 0.070922814, 0.21769938, 0.06214975, 0.11847816, 0.10033405, 0.29360098) * go_3(-1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.16294672, -0.014815565, 0.22046989, 0.16858687, 0.058917344, 0.21384977, 0.18803519, 0.105688855, 0.0355118, 0.20571202, -0.07341922, 0.26624045, -0.0415102, 0.050942056, 0.19727907, 0.20122413) * go_3(-1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 83]     result += mat4(-0.020470422, 0.15815964, -0.13437317, -0.1967045, 0.074902646, 0.08356444, 0.055913117, -0.12837863, -0.18647918, 0.07002247, 0.038864706, -0.07288784, 0.04135125, -0.016055549, -0.1340297, -0.15578008) * go_3(0.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 84]     result += mat4(-0.07685624, 0.00079105416, -0.068755336, 0.110282525, -0.014170752, 0.041282844, -0.17035173, 0.19439398, -0.3036256, 0.024148455, -0.19566648, -0.06736254, 0.14203559, -0.13016985, -0.32845357, -0.14266774) * go_3(0.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 85]     result += mat4(0.0087252045, 0.098839566, -0.08770506, -0.08499465, 0.015245115, -0.110854514, 0.054458305, -0.018121868, -0.09666134, -0.08316006, 0.24617113, -0.17195955, 0.2574254, 0.06734342, -0.13792352, -0.07306126) * go_3(0.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.0073954533, -0.20126835, -0.22545357, -0.29462856, 0.057408337, 0.11939119, -0.01846476, 0.12534486, 0.15751605, -0.14282645, -0.14219986, 0.14283386, 0.14090413, 0.10500912, 0.03039335, 0.17448832) * go_3(1.0, -1.0);
[   2.372][d][vo/gpu/d3d11] [ 87]     result += mat4(0.043910783, -0.09140025, -0.21666165, 0.07616939, 0.104454786, 0.309926, -0.12906921, 0.1140117, 0.09372434, 0.049547072, -0.086615674, -0.034449168, 0.096705064, 0.26001686, 0.027063297, 0.12422948) * go_3(1.0, 0.0);
[   2.372][d][vo/gpu/d3d11] [ 88]     result += mat4(0.1365422, 0.2679611, 0.12037257, 0.43346113, 0.08223084, -0.016788265, 0.13570398, -0.017974345, -0.17922844, -0.09475725, 0.073539585, -0.106947675, 0.08998511, 0.04133868, 0.16586913, -0.26291734) * go_3(1.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 89]     result += vec4(-0.19233678, 0.016725872, -0.008011114, -0.1977463);
[   2.372][d][vo/gpu/d3d11] [ 90]     return result;
[   2.372][d][vo/gpu/d3d11] [ 91] }
[   2.372][d][vo/gpu/d3d11] [ 92] void main() {
[   2.372][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.372][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.372][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.372][d][vo/gpu/d3d11] [ 96] }
[   2.372][d][vo/gpu/d3d11] HLSL source:
[   2.372][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.372][d][vo/gpu/d3d11] [  2] {
[   2.372][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.372][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.372][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.372][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.372][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.372][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.372][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.372][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.372][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.372][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.372][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.372][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.372][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.372][d][vo/gpu/d3d11] [ 16] };
[   2.372][d][vo/gpu/d3d11] [ 17] 
[   2.372][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.372][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.372][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.372][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.372][d][vo/gpu/d3d11] [ 22] 
[   2.372][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.372][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.372][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.372][d][vo/gpu/d3d11] [ 26] 
[   2.372][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.372][d][vo/gpu/d3d11] [ 28] {
[   2.372][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.372][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.372][d][vo/gpu/d3d11] [ 31] };
[   2.372][d][vo/gpu/d3d11] [ 32] 
[   2.372][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.372][d][vo/gpu/d3d11] [ 34] {
[   2.372][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.372][d][vo/gpu/d3d11] [ 36] };
[   2.372][d][vo/gpu/d3d11] [ 37] 
[   2.372][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.372][d][vo/gpu/d3d11] [ 39] {
[   2.372][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.372][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(0.21919365227222442626953125f, 0.3662778437137603759765625f, 0.12603314220905303955078125f, 0.2430628836154937744140625f), float4(0.064470283687114715576171875f, 0.064722038805484771728515625f, -0.0599703900516033172607421875f, -0.15651787817478179931640625f), float4(0.0170598588883876800537109375f, -0.006497197784483432769775390625f, -0.418973505496978759765625f, 0.0216367132961750030517578125f), float4(-0.2388797700405120849609375f, -0.0142209492623805999755859375f, 0.03111368604004383087158203125f, -0.173427164554595947265625f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(-0.108187891542911529541015625f, -0.0327383689582347869873046875f, 0.339180052280426025390625f, -0.19290088117122650146484375f), float4(0.09553609788417816162109375f, -0.3410762250423431396484375f, -0.0549063272774219512939453125f, -0.18083344399929046630859375f), float4(-0.06072367727756500244140625f, 0.24395693838596343994140625f, 0.11297501623630523681640625f, -0.07254578173160552978515625f), float4(-0.14389383792877197265625f, 0.132359683513641357421875f, -0.1505480110645294189453125f, -0.2621648609638214111328125f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(-0.23442147672176361083984375f, -0.078570790588855743408203125f, 0.02228387258946895599365234375f, -0.265641689300537109375f), float4(0.037092752754688262939453125f, -0.0373136661946773529052734375f, -0.505704700946807861328125f, 0.0425331033766269683837890625f), float4(-0.1204240024089813232421875f, 0.00021930188813712447881698608398438f, -0.0044566667638719081878662109375f, -0.4553699493408203125f), float4(0.000407599261961877346038818359375f, 0.1459759175777435302734375f, -0.0949901640415191650390625f, -0.0361613444983959197998046875f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(0.1502435207366943359375f, 0.19903261959552764892578125f, -0.073478400707244873046875f, 0.09283630549907684326171875f), float4(-0.02575384639203548431396484375f, 0.024750374257564544677734375f, -0.07550193369388580322265625f, 0.035420835018157958984375f), float4(0.11084377765655517578125f, 0.261198222637176513671875f, -0.08443512022495269775390625f, -0.0047807064838707447052001953125f), float4(-0.04268513619899749755859375f, 0.24889738857746124267578125f, 0.098650105297565460205078125f, 0.20883689820766448974609375f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.2555182278156280517578125f, 0.14455975592136383056640625f, 0.1988615691661834716796875f, -0.23465923964977264404296875f), float4(0.20711217820644378662109375f, -0.2087536156177520751953125f, -0.113203920423984527587890625f, -0.3085200488567352294921875f), float4(-0.06795656681060791015625f, 0.008670962415635585784912109375f, 0.3060127794742584228515625f, 0.69290637969970703125f), float4(0.170791447162628173828125f, 0.157448947429656982421875f, 0.064416013658046722412109375f, 0.0651400089263916015625f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.0314260385930538177490234375f, -0.00641013681888580322265625f, -0.0236547924578189849853515625f, -0.05708552896976470947265625f), float4(0.06298540532588958740234375f, -0.077010594308376312255859375f, 0.07880486547946929931640625f, 0.05088250339031219482421875f), float4(0.0102742277085781097412109375f, -0.1555840075016021728515625f, 0.09490256011486053466796875f, 0.14964707195758819580078125f), float4(-0.119669251143932342529296875f, -0.361766636371612548828125f, 0.2780981361865997314453125f, -0.18862293660640716552734375f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(0.0560999214649200439453125f, 0.0041612233035266399383544921875f, -0.084989078342914581298828125f, 0.0447982288897037506103515625f), float4(-0.08011795580387115478515625f, -0.1742320358753204345703125f, -0.2285804450511932373046875f, 0.0545690320432186126708984375f), float4(-0.0508663840591907501220703125f, -0.02000030688941478729248046875f, 0.0270009525120258331298828125f, -0.67724514007568359375f), float4(0.16240878403186798095703125f, -0.0464120395481586456298828125f, 0.064836703240871429443359375f, -0.20613132417201995849609375f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.085423059761524200439453125f, -0.082542479038238525390625f, -0.11090552806854248046875f, -0.1414044797420501708984375f), float4(-0.10788510739803314208984375f, -0.1301160156726837158203125f, -0.2931974232196807861328125f, -0.2600715458393096923828125f), float4(0.1103340089321136474609375f, -0.319665729999542236328125f, 0.32668244838714599609375f, 0.195423185825347900390625f), float4(0.063294179737567901611328125f, 0.20904625952243804931640625f, 0.27240669727325439453125f, -0.00915568508207798004150390625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(-0.007403410971164703369140625f, 0.0012836395762860774993896484375f, -0.23446665704250335693359375f, -0.0301720798015594482421875f), float4(0.062420018017292022705078125f, -0.136110842227935791015625f, -0.2975927889347076416015625f, 0.1317314803600311279296875f), float4(-0.0367993898689746856689453125f, 0.13743872940540313720703125f, -0.101218990981578826904296875f, 0.074514664709568023681640625f), float4(0.1497628986835479736328125f, -0.095238380134105682373046875f, 0.3901892602443695068359375f, 0.378070354461669921875f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(0.114414870738983154296875f, -0.19565522670745849609375f, -0.2575713694095611572265625f, -0.1614876687526702880859375f), float4(0.1557531654834747314453125f, -0.12657928466796875f, 0.104796759784221649169921875f, 0.06291903555393218994140625f), float4(0.010544159449636936187744140625f, 0.2293157279491424560546875f, 0.203601777553558349609375f, 0.4637635052204132080078125f), float4(-0.339503586292266845703125f, -0.52467215061187744140625f, 0.08759307861328125f, 0.028030417859554290771484375f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(0.26991951465606689453125f, -0.342183053493499755859375f, 0.152596950531005859375f, 0.03139074146747589111328125f), float4(-0.0240535326302051544189453125f, -0.0295674838125705718994140625f, 0.2848012447357177734375f, 0.2052595317363739013671875f), float4(0.1545282304286956787109375f, -0.21771299839019775390625f, 0.15861876308917999267578125f, -0.012275698594748973846435546875f), float4(0.21408022940158843994140625f, 0.097508303821086883544921875f, -0.571267664432525634765625f, -0.14679856598377227783203125f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(-0.075584702193737030029296875f, -0.097515620291233062744140625f, -0.2948046624660491943359375f, -0.222853183746337890625f), float4(0.14196442067623138427734375f, 0.11457313597202301025390625f, -0.22294767200946807861328125f, 0.124638058245182037353515625f), float4(0.33222091197967529296875f, -0.0463172383606433868408203125f, -0.110970608890056610107421875f, -0.279868543148040771484375f), float4(-0.160993039608001708984375f, -0.0600795447826385498046875f, 0.00299308006651699542999267578125f, 0.120776064693927764892578125f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(0.0509334839880466461181640625f, -0.13776318728923797607421875f, -0.18809728324413299560546875f, 0.24035201966762542724609375f), float4(-0.3252860605716705322265625f, -0.4168414771556854248046875f, -0.02934284694492816925048828125f, 0.2864292562007904052734375f), float4(-0.079634539783000946044921875f, -0.12905268371105194091796875f, 0.076060928404331207275390625f, 0.2467000484466552734375f), float4(-0.088155977427959442138671875f, -0.233209073543548583984375f, -0.00809934921562671661376953125f, 0.21512873470783233642578125f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(0.19247563183307647705078125f, 0.18083979189395904541015625f, -0.0971976220607757568359375f, 0.15314941108226776123046875f), float4(-0.2235098183155059814453125f, 0.4651504456996917724609375f, -0.3571127951145172119140625f, 0.359532654285430908203125f), float4(0.069219850003719329833984375f, -0.4482386112213134765625f, -0.1873252093791961669921875f, -0.504398286342620849609375f), float4(0.3515956699848175048828125f, -0.3331529796123504638671875f, -0.21884165704250335693359375f, -0.162837982177734375f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(-0.0211240537464618682861328125f, -0.00796674191951751708984375f, 0.0052493824623525142669677734375f, 0.02255089581012725830078125f), float4(0.03040397725999355316162109375f, 0.33778679370880126953125f, -0.476020038127899169921875f, -0.077664233744144439697265625f), float4(-0.072225086390972137451171875f, -0.074860967695713043212890625f, -0.3797106444835662841796875f, -0.51078569889068603515625f), float4(-0.062994770705699920654296875f, 0.0493023209273815155029296875f, -0.33304870128631591796875f, 0.29845511913299560546875f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.0637054741382598876953125f, -0.079176366329193115234375f, -0.02026606909930706024169921875f, -0.05142568051815032958984375f), float4(0.02157701365649700164794921875f, -0.07379867136478424072265625f, 0.033937998116016387939453125f, 0.08148773014545440673828125f), float4(-0.0271783806383609771728515625f, -0.0323383808135986328125f, 0.09800003468990325927734375f, 0.0364764444530010223388671875f), float4(-0.1336695253849029541015625f, 0.0144775770604610443115234375f, 0.24064232409000396728515625f, 0.3931328356266021728515625f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(-0.1604651510715484619140625f, -0.09462456405162811279296875f, 0.35435163974761962890625f, 0.099423237144947052001953125f), float4(-0.071371741592884063720703125f, -0.2799922525882720947265625f, 0.12464435398578643798828125f, -0.0062176552601158618927001953125f), float4(0.01501675136387348175048828125f, -0.055002428591251373291015625f, -0.23249559104442596435546875f, -0.45083820819854736328125f), float4(0.18604330718517303466796875f, 0.106714911758899688720703125f, -0.0333453528583049774169921875f, -0.06611452996730804443359375f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(0.21614046394824981689453125f, -0.013075250200927257537841796875f, -0.18941111862659454345703125f, -0.2053353488445281982421875f), float4(-0.14481686055660247802734375f, -0.4780189692974090576171875f, 0.22605121135711669921875f, -0.2029896080493927001953125f), float4(-0.0674422681331634521484375f, -0.2037749588489532470703125f, -0.11926172673702239990234375f, 0.15645132958889007568359375f), float4(-0.3157088458538055419921875f, -0.3495616018772125244140625f, -0.02466688863933086395263671875f, 0.040965475142002105712890625f)));
[   2.372][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.117480181157588958740234375f, -0.039976365864276885986328125f, -0.0008406425477005541324615478515625f, -0.02865343727171421051025390625f), float4(-0.16216732561588287353515625f, -0.0367681048810482025146484375f, 0.01806451380252838134765625f, -0.0928936004638671875f), float4(0.14008481800556182861328125f, -0.06451122462749481201171875f, 0.24329946935176849365234375f, -0.0268607996404170989990234375f), float4(0.0503302477300167083740234375f, 0.085406012833118438720703125f, -0.072726793587207794189453125f, -0.011876709759235382080078125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(-0.094599358737468719482421875f, -0.01172382198274135589599609375f, -0.0695285797119140625f, -0.078085057437419891357421875f), float4(-0.065588176250457763671875f, 0.332500994205474853515625f, -0.01200423948466777801513671875f, 0.076680161058902740478515625f), float4(0.14735217392444610595703125f, -0.1485604345798492431640625f, -0.067024491727352142333984375f, -0.02095318399369716644287109375f), float4(-0.023006834089756011962890625f, 0.061354219913482666015625f, 0.1491447985172271728515625f, -0.028061568737030029296875f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(0.2513696849346160888671875f, 0.251463234424591064453125f, -0.108277924358844757080078125f, -0.20407207310199737548828125f), float4(-0.00137802935205399990081787109375f, 0.1610819399356842041015625f, 0.2514384686946868896484375f, 0.0667242109775543212890625f), float4(-0.0339055843651294708251953125f, -0.02114468626677989959716796875f, -0.01915271766483783721923828125f, 0.3461949825286865234375f), float4(0.1456096172332763671875f, 0.03443731367588043212890625f, 0.0247903652489185333251953125f, -0.049976266920566558837890625f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(-0.24928350746631622314453125f, 0.12637813389301300048828125f, 0.23609994351863861083984375f, 0.127229392528533935546875f), float4(-0.036997862160205841064453125f, -0.16554875671863555908203125f, 0.111440949141979217529296875f, -0.1004003584384918212890625f), float4(-0.0203591026365756988525390625f, -0.080701865255832672119140625f, -0.3142192065715789794921875f, 0.2725723683834075927734375f), float4(0.13546955585479736328125f, -0.144168853759765625f, 0.02819626219570636749267578125f, -0.2886464893817901611328125f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(0.2852477729320526123046875f, -0.4236231148242950439453125f, 0.2742073833942413330078125f, -0.210955083370208740234375f), float4(0.23475651443004608154296875f, 0.115876294672489166259765625f, -0.188373565673828125f, -0.0260707996785640716552734375f), float4(0.03067070432007312774658203125f, -0.115169130265712738037109375f, -0.113655723631381988525390625f, -0.22031490504741668701171875f), float4(-0.01861298270523548126220703125f, -0.10719592869281768798828125f, -0.031727783381938934326171875f, 0.140332698822021484375f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(0.072405122220516204833984375f, 0.031392149627208709716796875f, 0.123287372291088104248046875f, -0.02120120637118816375732421875f), float4(-0.13971714675426483154296875f, 0.0727420747280120849609375f, -0.001128987292759120464324951171875f, 0.0053133666515350341796875f), float4(0.0356396846473217010498046875f, -0.0432227216660976409912109375f, -0.19288472831249237060546875f, -0.1581222116947174072265625f), float4(-0.191264808177947998046875f, 0.069851398468017578125f, 0.1761917769908905029296875f, -0.0356054641306400299072265625f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(-0.18552057445049285888671875f, 0.072596706449985504150390625f, 0.011667667888104915618896484375f, -0.15630562603473663330078125f), float4(0.114143557846546173095703125f, 0.14482654631137847900390625f, -0.04021029174327850341796875f, 0.1849558651447296142578125f), float4(-0.113861389458179473876953125f, -0.090585611760616302490234375f, -0.011265997774899005889892578125f, 0.23358450829982757568359375f), float4(0.0521357990801334381103515625f, 0.124952606856822967529296875f, 0.021644838154315948486328125f, -0.04809434711933135986328125f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(-0.0922237336635589599609375f, 0.0533347018063068389892578125f, 0.0558204539120197296142578125f, 0.2238259613513946533203125f), float4(0.187139809131622314453125f, 0.26689159870147705078125f, -0.01938403584063053131103515625f, 0.012698582373559474945068359375f), float4(0.13325233757495880126953125f, 0.2036147415637969970703125f, -0.3310644328594207763671875f, -0.085715718567371368408203125f), float4(-0.21243028342723846435546875f, -0.109963856637477874755859375f, 0.123459644615650177001953125f, 0.15349669754505157470703125f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(0.181332767009735107421875f, 0.18108074367046356201171875f, -0.0563866384327411651611328125f, 0.2953315675258636474609375f), float4(-0.210801899433135986328125f, -0.0336366258561611175537109375f, 0.5015888214111328125f, -0.151160657405853271484375f), float4(-0.041320793330669403076171875f, -0.147642314434051513671875f, 0.07314567267894744873046875f, -0.18865978717803955078125f), float4(0.102769367396831512451171875f, 0.094240844249725341796875f, -0.136428296566009521484375f, 0.2781291306018829345703125f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(0.060409151017665863037109375f, 0.237536847591400146484375f, 0.19019843637943267822265625f, 0.23948252201080322265625f), float4(-0.07535012066364288330078125f, 0.11848904192447662353515625f, 0.14389765262603759765625f, 0.0500679053366184234619140625f), float4(0.16150076687335968017578125f, -0.03005345351994037628173828125f, 0.12478254735469818115234375f, 0.2602020800113677978515625f), float4(0.111198805272579193115234375f, 0.06787492334842681884765625f, -0.12771017849445343017578125f, 0.0066873840987682342529296875f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(-0.5421617031097412109375f, 0.10414128005504608154296875f, -0.21526063978672027587890625f, -0.08883623778820037841796875f), float4(0.13145072758197784423828125f, -0.29695904254913330078125f, 0.57386386394500732421875f, 0.073361694812774658203125f), float4(-0.09538371860980987548828125f, 0.2759384214878082275390625f, 0.070922814309597015380859375f, 0.2176993787288665771484375f), float4(0.06214974820613861083984375f, 0.118478156626224517822265625f, 0.10033404827117919921875f, 0.293600976467132568359375f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.16294671595096588134765625f, -0.0148155651986598968505859375f, 0.220469892024993896484375f, 0.16858686506748199462890625f), float4(0.058917343616485595703125f, 0.21384976804256439208984375f, 0.188035190105438232421875f, 0.10568885505199432373046875f), float4(0.035511799156665802001953125f, 0.205712020397186279296875f, -0.073419220745563507080078125f, 0.2662404477596282958984375f), float4(-0.0415101982653141021728515625f, 0.050942055881023406982421875f, 0.1972790658473968505859375f, 0.20122413337230682373046875f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(-0.0204704217612743377685546875f, 0.1581596434116363525390625f, -0.13437317311763763427734375f, -0.19670450687408447265625f), float4(0.074902646243572235107421875f, 0.083564437925815582275390625f, 0.0559131167829036712646484375f, -0.1283786296844482421875f), float4(-0.1864791810512542724609375f, 0.070022471249103546142578125f, 0.0388647057116031646728515625f, -0.072887837886810302734375f), float4(0.041351251304149627685546875f, -0.01605554856359958648681640625f, -0.13402970135211944580078125f, -0.1557800769805908203125f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(-0.07685624063014984130859375f, 0.0007910541607998311519622802734375f, -0.068755336105823516845703125f, 0.11028252542018890380859375f), float4(-0.014170751906931400299072265625f, 0.0412828437983989715576171875f, -0.17035172879695892333984375f, 0.19439397752285003662109375f), float4(-0.3036256134510040283203125f, 0.02414845488965511322021484375f, -0.19566647708415985107421875f, -0.067362539470195770263671875f), float4(0.14203558862209320068359375f, -0.13016985356807708740234375f, -0.3284535706043243408203125f, -0.1426677405834197998046875f)));
[   2.372][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(0.008725204505026340484619140625f, 0.09883956611156463623046875f, -0.08770506083965301513671875f, -0.084994651377201080322265625f), float4(0.01524511538445949554443359375f, -0.110854513943195343017578125f, 0.05445830523967742919921875f, -0.0181218683719635009765625f), float4(-0.096661336719989776611328125f, -0.08316005766391754150390625f, 0.24617113173007965087890625f, -0.1719595491886138916015625f), float4(0.2574253976345062255859375f, 0.067343421280384063720703125f, -0.13792352378368377685546875f, -0.0730612576007843017578125f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.0073954532854259014129638671875f, -0.2012683451175689697265625f, -0.22545357048511505126953125f, -0.294628560543060302734375f), float4(0.0574083365499973297119140625f, 0.11939118802547454833984375f, -0.01846476085484027862548828125f, 0.12534485757350921630859375f), float4(0.15751604735851287841796875f, -0.14282645285129547119140625f, -0.14219985902309417724609375f, 0.1428338587284088134765625f), float4(0.140904128551483154296875f, 0.10500912368297576904296875f, 0.0303933508694171905517578125f, 0.17448832094669342041015625f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.0439107827842235565185546875f, -0.09140025079250335693359375f, -0.21666164696216583251953125f, 0.07616938650608062744140625f), float4(0.1044547855854034423828125f, 0.3099260032176971435546875f, -0.12906920909881591796875f, 0.114011697471141815185546875f), float4(0.0937243402004241943359375f, 0.0495470724999904632568359375f, -0.086615674197673797607421875f, -0.034449167549610137939453125f), float4(0.09670506417751312255859375f, 0.260016858577728271484375f, 0.02706329710781574249267578125f, 0.124229483306407928466796875f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.13654220104217529296875f, 0.2679611146450042724609375f, 0.120372571051120758056640625f, 0.433461129665374755859375f), float4(0.082230843603610992431640625f, -0.01678826473653316497802734375f, 0.135703980922698974609375f, -0.01797434501349925994873046875f), float4(-0.17922843992710113525390625f, -0.094757251441478729248046875f, 0.0735395848751068115234375f, -0.10694767534732818603515625f), float4(0.089985109865665435791015625f, 0.0413386784493923187255859375f, 0.16586913168430328369140625f, -0.262917339801788330078125f)))) + float4(-0.19233678281307220458984375f, 0.0167258717119693756103515625f, -0.0080111138522624969482421875f, -0.1977463066577911376953125f);
[   2.372][d][vo/gpu/d3d11] [ 61] }
[   2.373][d][vo/gpu/d3d11] [ 62] 
[   2.373][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.373][d][vo/gpu/d3d11] [ 64] {
[   2.373][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.373][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.373][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.373][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.373][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.373][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.373][d][vo/gpu/d3d11] [ 71] }
[   2.373][d][vo/gpu] Resizing texture: 1920x800
[   2.375][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.377][v][vo/gpu/d3d11] Compiled a vertex shader in 4885us
[   2.377][v][vo/gpu/d3d11] shaderc: 2294us, SPIRV-Cross: 119us, D3DCompile: 2472us
[   2.377][d][vo/gpu/d3d11] GLSL source:
[   2.377][d][vo/gpu/d3d11] [  1] #version 450
[   2.377][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.377][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.377][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.377][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.377][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.377][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.377][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.377][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.377][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.377][d][vo/gpu/d3d11] [ 11] void main() {
[   2.377][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.377][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.377][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.377][d][vo/gpu/d3d11] [ 15] }
[   2.377][d][vo/gpu/d3d11] HLSL source:
[   2.377][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.377][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.377][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.377][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.377][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.377][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.377][d][vo/gpu/d3d11] [  7] 
[   2.377][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.377][d][vo/gpu/d3d11] [  9] {
[   2.377][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.377][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.377][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.377][d][vo/gpu/d3d11] [ 13] };
[   2.377][d][vo/gpu/d3d11] [ 14] 
[   2.377][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.377][d][vo/gpu/d3d11] [ 16] {
[   2.377][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.377][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.377][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.377][d][vo/gpu/d3d11] [ 20] };
[   2.377][d][vo/gpu/d3d11] [ 21] 
[   2.377][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.377][d][vo/gpu/d3d11] [ 23] {
[   2.377][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.377][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.377][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.377][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.377][d][vo/gpu/d3d11] [ 28] }
[   2.378][d][vo/gpu/d3d11] [ 29] 
[   2.378][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.378][d][vo/gpu/d3d11] [ 31] {
[   2.378][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.378][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.378][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.378][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.378][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.378][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.378][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.378][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.378][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.378][d][vo/gpu/d3d11] [ 41] }
[   2.402][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.452][v][vo/gpu/d3d11] Compiled a fragment shader in 74048us
[   2.452][v][vo/gpu/d3d11] shaderc: 24911us, SPIRV-Cross: 2690us, D3DCompile: 46447us
[   2.452][d][vo/gpu/d3d11] GLSL source:
[   2.452][d][vo/gpu/d3d11] [  1] #version 450
[   2.452][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.452][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.452][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.452][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.452][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.452][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.452][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.452][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.452][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.452][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.452][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.452][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.452][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.452][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.452][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.452][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.452][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.452][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.452][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.452][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.452][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.452][d][vo/gpu/d3d11] [ 23] };
[   2.452][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.452][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.452][d][vo/gpu/d3d11] [ 26] #define conv2d_6_tf_raw texture0
[   2.452][d][vo/gpu/d3d11] [ 27] #define conv2d_6_tf_pos texcoord0
[   2.452][d][vo/gpu/d3d11] [ 28] #define conv2d_6_tf_size texture_size0
[   2.452][d][vo/gpu/d3d11] [ 29] #define conv2d_6_tf_rot texture_rot0
[   2.452][d][vo/gpu/d3d11] [ 30] #define conv2d_6_tf_off texture_off0
[   2.452][d][vo/gpu/d3d11] [ 31] #define conv2d_6_tf_pt pixel_size0
[   2.452][d][vo/gpu/d3d11] [ 32] #define conv2d_6_tf_map texmap0
[   2.452][d][vo/gpu/d3d11] [ 33] #define conv2d_6_tf_mul 1.000000
[   2.452][d][vo/gpu/d3d11] [ 34] #define conv2d_6_tf_tex(pos) (conv2d_6_tf_mul * vec4(texture(conv2d_6_tf_raw, pos)).rgba)
[   2.452][d][vo/gpu/d3d11] [ 35] #define conv2d_6_tf_gather(pos, c) (conv2d_6_tf_mul * vec4(textureGather(conv2d_6_tf_raw, pos, c)))
[   2.452][d][vo/gpu/d3d11] [ 36] #define conv2d_6_tf_texOff(off) conv2d_6_tf_tex(conv2d_6_tf_pos + conv2d_6_tf_pt * vec2(off))
[   2.452][d][vo/gpu/d3d11] [ 37] #define conv2d_6_tf1_raw texture1
[   2.452][d][vo/gpu/d3d11] [ 38] #define conv2d_6_tf1_pos texcoord1
[   2.452][d][vo/gpu/d3d11] [ 39] #define conv2d_6_tf1_size texture_size1
[   2.452][d][vo/gpu/d3d11] [ 40] #define conv2d_6_tf1_rot texture_rot1
[   2.452][d][vo/gpu/d3d11] [ 41] #define conv2d_6_tf1_off texture_off1
[   2.452][d][vo/gpu/d3d11] [ 42] #define conv2d_6_tf1_pt pixel_size1
[   2.452][d][vo/gpu/d3d11] [ 43] #define conv2d_6_tf1_map texmap1
[   2.452][d][vo/gpu/d3d11] [ 44] #define conv2d_6_tf1_mul 1.000000
[   2.452][d][vo/gpu/d3d11] [ 45] #define conv2d_6_tf1_tex(pos) (conv2d_6_tf1_mul * vec4(texture(conv2d_6_tf1_raw, pos)).rgba)
[   2.452][d][vo/gpu/d3d11] [ 46] #define conv2d_6_tf1_gather(pos, c) (conv2d_6_tf1_mul * vec4(textureGather(conv2d_6_tf1_raw, pos, c)))
[   2.452][d][vo/gpu/d3d11] [ 47] #define conv2d_6_tf1_texOff(off) conv2d_6_tf1_tex(conv2d_6_tf1_pos + conv2d_6_tf1_pt * vec2(off))
[   2.452][d][vo/gpu/d3d11] [ 48] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.452][d][vo/gpu/d3d11] [ 49] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.452][d][vo/gpu/d3d11] [ 50] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   2.452][d][vo/gpu/d3d11] [ 51] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   2.452][d][vo/gpu/d3d11] [ 52] vec4 hook() {
[   2.452][d][vo/gpu/d3d11] [ 53]     vec4 result = mat4(-0.36016628, 0.019064043, 0.3073228, 0.16891135, 0.026739368, 0.31136194, 0.11260383, -0.26918694, 0.0419928, -0.3365078, 0.20189743, -0.04136312, 0.039564647, 0.033199426, 0.18768296, -0.017119858) * go_0(-1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 54]     result += mat4(0.28663483, -0.41716507, 0.059281543, 0.043736435, 0.0028875466, 0.13817391, -0.12543318, -0.2794053, -0.023528943, 0.10610115, 0.09100278, 0.040132936, -0.21949205, -0.027810011, -0.0301218, 0.084047124) * go_0(-1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 55]     result += mat4(0.39674807, -0.0040878756, -0.038235947, 0.11880838, 0.009898328, 0.19107847, -0.009313831, -0.1554276, -0.047341663, 0.18049581, -0.029317195, 0.0708909, 0.0708316, -0.110617444, 0.14584038, -0.022261223) * go_0(-1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 56]     result += mat4(-0.20400241, 0.0896492, -0.010386381, -0.052133385, 0.005023956, -0.06628705, -0.16436209, -0.25345984, -0.05285192, 0.09706557, -0.03778914, -0.152546, 0.17023252, 0.063713826, 0.00743037, 0.056634087) * go_0(0.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 57]     result += mat4(-0.080793336, 0.4204207, 0.19098237, 0.20028038, -0.054076545, 0.22064368, -0.25853387, -0.3643562, 0.2085573, -0.023731, -0.06727709, -0.18683033, -0.18032159, -0.06388348, 0.304463, -0.2517781) * go_0(0.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 58]     result += mat4(0.11940941, 0.10624008, 0.16120581, 0.2369602, 0.3321827, 0.4272075, -0.10403669, -0.31388018, -0.006372124, -0.00653671, 0.109810196, 0.2277172, 0.005771998, 0.086026914, -0.08934813, -0.094941735) * go_0(0.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 59]     result += mat4(-0.13233568, 0.24112508, -0.0068006413, 0.12466225, 0.11396591, -0.07249253, -0.29090378, -0.12828146, -0.22001141, -0.08532405, -0.11932601, 0.29452974, 0.09572195, 0.017603843, 0.12454017, 0.16321751) * go_0(1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 60]     result += mat4(0.042107448, -0.00807216, 0.06580674, -0.1289527, 0.13977426, -0.037159685, -0.21001346, -0.08698161, 0.22370502, -0.29170328, 0.2179206, 0.36621302, 0.0825477, -0.016513655, -0.11157249, 0.12861598) * go_0(1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 61]     result += mat4(0.2246826, -0.13262233, 0.12131653, -0.15522355, 0.38104856, 0.030237729, 0.1286289, -0.19770473, -0.16175011, -0.13688888, 0.23505463, 0.21333031, 0.76352316, -0.17949077, -0.13124311, 0.1613879) * go_0(1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 62]     result += mat4(-0.050607495, 0.0846705, -0.06136092, -0.033436477, 0.41138348, 0.037043408, -0.02676336, -0.37771952, 0.22147503, 0.06490757, -0.04266158, -0.22606373, 0.045775007, -0.054498192, -0.21495876, -0.036050417) * go_1(-1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 63]     result += mat4(-0.06242522, 0.2700824, -0.05602621, -0.12361551, 0.14477442, 0.19403581, 0.23505251, -0.072234035, -0.15831544, 0.4640447, -0.104754634, -0.004539681, -0.20246096, 0.23216484, -0.35886365, 0.11360777) * go_1(-1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 64]     result += mat4(0.14777757, 0.18951412, 0.027219458, 0.11216015, 0.02997997, -0.13466355, -0.0010830094, 0.021302953, 0.23441231, -0.14529245, 0.08068729, 0.10044398, 0.3972878, 0.26570204, 0.0046810666, -0.2863261) * go_1(-1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 65]     result += mat4(-0.10385485, 0.1053724, 0.16961229, 0.20727012, -0.025148917, -0.011365095, 0.03899919, -0.030950211, 0.079080455, -0.32767853, 0.064670205, -0.035771385, 0.16833797, -0.21567492, 0.30871257, -0.19965471) * go_1(0.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 66]     result += mat4(-0.23420888, -0.004894698, -0.18162623, -0.31107524, 0.11976508, 0.14924951, -0.08723316, 0.21401922, -0.58200324, -0.01177345, -0.049033508, 0.19593577, -0.21139073, 0.13016601, 0.08734843, 0.4158892) * go_1(0.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 67]     result += mat4(0.0009789813, 0.33274913, 0.017405733, -0.042906318, -0.26410276, -0.09291333, 0.019387102, 0.105381854, -0.009176527, 0.09483514, -0.28462934, -0.03644404, 0.285194, -0.4260311, 0.14902237, -0.115670316) * go_1(0.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 68]     result += mat4(-0.09344311, 0.4463103, 0.19984834, -0.09733857, -0.118717775, -0.0708026, 0.24919955, -0.11234634, 0.1246395, -0.052909933, 0.1525815, 0.07724016, 0.0070534665, -0.06404165, -0.18149726, -0.014058336) * go_1(1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 69]     result += mat4(-0.17353044, 0.15376104, 0.004588994, -0.13554202, -0.19920237, -0.18918681, 0.11327512, -0.117296435, -0.0785251, 0.013677155, -0.2103214, 0.06843426, -0.27790928, 0.09837545, -0.00019213746, 0.09132539) * go_1(1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 70]     result += mat4(-0.01586651, 0.014929441, 0.2426186, -0.1889374, -0.0865462, -0.07454513, -0.20797268, -0.22366855, 0.19704159, 0.0048206006, -0.16707218, -0.14162683, 0.036798395, -0.1663155, -0.12009389, 0.09603803) * go_1(1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 71]     result += mat4(-0.041532192, 0.05753804, 0.17927068, -0.042112097, 0.12080969, -0.15052572, -0.34855765, -0.07356988, -0.28199884, -0.18958664, 0.15879883, 0.08511588, 0.0034213227, -0.05338495, -0.37285298, 0.06626709) * go_2(-1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 72]     result += mat4(-0.20219134, 0.22150375, -0.29405454, 0.06597703, -0.018885285, -0.010551704, -0.010774283, 0.08758955, -0.2015349, -0.17006227, -0.24321876, -0.06864207, -0.118437864, -0.043977212, -0.029736811, 0.14040919) * go_2(-1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 73]     result += mat4(-0.18709077, -0.09723938, 0.12783436, -0.15167634, 0.29039705, -0.11009911, 0.018371418, -0.060096707, -0.07256923, -0.25799567, -0.06276934, -0.035992302, -0.06729111, -0.059956793, -0.024079734, 0.011838878) * go_2(-1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 74]     result += mat4(0.010449175, -0.08212451, 0.1409803, 0.11861122, -0.18035835, 0.051930565, 0.01049551, -0.09447962, 0.12029649, 0.040604513, -0.059971705, -0.0044667358, -0.22080486, -0.11187681, 0.124374695, -0.004155485) * go_2(0.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 75]     result += mat4(-0.28584236, -0.38480133, -0.13987814, -0.4463469, -0.3890419, -0.022498172, 0.17334452, 0.21895568, -0.15450422, -0.10905497, 0.15111905, -0.22554915, 0.106121585, -0.029144369, 0.36059046, 0.22140682) * go_2(0.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 76]     result += mat4(-0.23780307, -0.023033705, 0.068205886, -0.110635854, -0.26720005, -0.1608183, 0.19523881, 0.07972837, -0.018495852, -0.2793956, 0.17668398, -0.12020479, -0.079556085, -0.02284952, 0.031480275, 0.31818348) * go_2(0.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 77]     result += mat4(0.22501226, -0.00829407, 0.059581667, 0.16512989, 0.18711442, 0.1200968, 0.11812652, -0.16091056, 0.15733972, 0.045156084, 0.20640492, -0.16852027, -0.11217177, 0.06746273, -0.050218176, 0.08643783) * go_2(1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 78]     result += mat4(0.20715691, -0.1082907, 0.027892975, 0.19515261, -0.17838904, 0.1532257, -0.108409844, -0.06632365, -0.13805026, 0.23020233, 0.12416581, -0.14861803, 0.16650471, 0.08158386, -0.09051303, -0.06981649) * go_2(1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 79]     result += mat4(-0.04617126, 0.06579221, 0.25964734, 0.28500968, 0.07641255, -0.090885855, -0.0972522, 0.18298368, -0.06393334, 0.103463, -0.23062052, -0.15270731, 0.13633437, 0.074707486, 0.15065335, -0.024602572) * go_2(1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 80]     result += mat4(0.118319295, 0.010410938, 0.044655934, -0.104725905, 0.030477569, 0.12867387, 0.039075315, 0.18922117, 0.13301082, -0.1601557, 0.038168408, -0.07372259, -0.09522213, -0.095107146, -0.16679631, 0.044673234) * go_3(-1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 81]     result += mat4(0.46229, -0.30780822, -0.09081465, 0.1433387, -0.0315039, 0.059409115, -0.24948491, -0.17146957, 0.060843736, -0.041989822, 0.054005735, 0.22835566, 0.12036598, -0.0070898845, 0.17276852, -0.17754094) * go_3(-1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 82]     result += mat4(-0.35119572, 0.020034311, 0.08751943, 0.08193488, 0.041884877, 0.22649358, -0.07447533, 0.20845473, -0.04859846, -0.16206735, 0.06819576, -0.053000778, 0.18146423, 0.04694148, 0.045293212, 0.06783575) * go_3(-1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 83]     result += mat4(0.280914, -0.14998704, -0.23485807, -0.015608296, 0.1549556, -0.11992663, -0.094974115, 0.05887284, 0.053392075, 0.10322464, -0.075066686, 0.068358354, -0.18663338, 0.009901499, -0.123370335, -0.12502703) * go_3(0.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 84]     result += mat4(0.7748568, -0.17870626, -0.20770052, 0.024692526, -0.056430295, -0.06324113, -0.03660047, 0.29629672, -0.51896983, -0.027231261, 0.05903762, 0.077677645, -0.061675485, -0.20277846, 0.10352223, -0.08198446) * go_3(0.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 85]     result += mat4(-0.06347568, 0.21643166, -0.09718546, 0.0372257, -0.029537952, -0.0357135, -0.09548363, 0.18225233, -0.29609334, -0.3496132, 0.18245913, -0.10162589, -0.18189451, -0.09077887, 0.117313184, -0.06863874) * go_3(0.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 86]     result += mat4(-0.047373574, -0.020289376, -0.25748715, -0.13568166, 0.15656634, -0.06841899, 0.012100781, -0.13611819, 0.0016357322, -0.23870537, 0.14035743, -0.14700134, 0.2535575, -0.13697346, -0.13693139, -0.10365287) * go_3(1.0, -1.0);
[   2.452][d][vo/gpu/d3d11] [ 87]     result += mat4(0.4283934, -0.316192, -0.012617617, 0.018468965, 0.21436644, 0.18408814, -0.42651537, 0.12504087, -0.13894933, 0.091662176, -0.20096369, -0.080727175, -0.005487846, 0.17046383, 0.1383948, -0.0054956395) * go_3(1.0, 0.0);
[   2.452][d][vo/gpu/d3d11] [ 88]     result += mat4(0.20014295, -0.027282396, -0.06317007, 0.04452042, 0.064600386, 0.072222926, -0.33409226, 0.08063831, -0.022607977, 0.1308856, -0.39691743, -0.094889864, -0.1810531, 0.011367248, -0.2531222, -0.22468317) * go_3(1.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 89]     result += vec4(0.26886886, 0.05874665, 0.10268232, 0.05833081);
[   2.452][d][vo/gpu/d3d11] [ 90]     return result;
[   2.452][d][vo/gpu/d3d11] [ 91] }
[   2.452][d][vo/gpu/d3d11] [ 92] void main() {
[   2.452][d][vo/gpu/d3d11] [ 93] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.452][d][vo/gpu/d3d11] [ 94] color = hook();
[   2.452][d][vo/gpu/d3d11] [ 95] out_color = color;
[   2.452][d][vo/gpu/d3d11] [ 96] }
[   2.452][d][vo/gpu/d3d11] HLSL source:
[   2.452][d][vo/gpu/d3d11] [  1] cbuffer _47_49 : register(b0)
[   2.452][d][vo/gpu/d3d11] [  2] {
[   2.452][d][vo/gpu/d3d11] [  3]     float _49_m0 : packoffset(c0);
[   2.452][d][vo/gpu/d3d11] [  4]     int _49_m1 : packoffset(c0.y);
[   2.452][d][vo/gpu/d3d11] [  5]     float2 _49_m2 : packoffset(c0.z);
[   2.452][d][vo/gpu/d3d11] [  6]     float2 _49_m3 : packoffset(c1);
[   2.452][d][vo/gpu/d3d11] [  7]     float2 _49_m4 : packoffset(c1.z);
[   2.452][d][vo/gpu/d3d11] [  8]     float2 _49_m5 : packoffset(c2);
[   2.452][d][vo/gpu/d3d11] [  9]     row_major float2x2 _49_m6 : packoffset(c3);
[   2.452][d][vo/gpu/d3d11] [ 10]     float2 _49_m7 : packoffset(c5);
[   2.452][d][vo/gpu/d3d11] [ 11]     float2 _49_m8 : packoffset(c5.z);
[   2.452][d][vo/gpu/d3d11] [ 12]     float2 _49_m9 : packoffset(c6);
[   2.452][d][vo/gpu/d3d11] [ 13]     row_major float2x2 _49_m10 : packoffset(c7);
[   2.452][d][vo/gpu/d3d11] [ 14]     float2 _49_m11 : packoffset(c9);
[   2.452][d][vo/gpu/d3d11] [ 15]     float2 _49_m12 : packoffset(c9.z);
[   2.452][d][vo/gpu/d3d11] [ 16] };
[   2.452][d][vo/gpu/d3d11] [ 17] 
[   2.452][d][vo/gpu/d3d11] [ 18] Texture2D<float4> _39 : register(t0);
[   2.452][d][vo/gpu/d3d11] [ 19] SamplerState __39_sampler : register(s0);
[   2.452][d][vo/gpu/d3d11] [ 20] Texture2D<float4> _410 : register(t1);
[   2.452][d][vo/gpu/d3d11] [ 21] SamplerState __410_sampler : register(s1);
[   2.452][d][vo/gpu/d3d11] [ 22] 
[   2.452][d][vo/gpu/d3d11] [ 23] static float2 _43;
[   2.452][d][vo/gpu/d3d11] [ 24] static float2 _412;
[   2.452][d][vo/gpu/d3d11] [ 25] static float4 _1477;
[   2.452][d][vo/gpu/d3d11] [ 26] 
[   2.452][d][vo/gpu/d3d11] [ 27] struct SPIRV_Cross_Input
[   2.452][d][vo/gpu/d3d11] [ 28] {
[   2.452][d][vo/gpu/d3d11] [ 29]     float2 _43 : TEXCOORD1;
[   2.452][d][vo/gpu/d3d11] [ 30]     float2 _412 : TEXCOORD2;
[   2.452][d][vo/gpu/d3d11] [ 31] };
[   2.452][d][vo/gpu/d3d11] [ 32] 
[   2.452][d][vo/gpu/d3d11] [ 33] struct SPIRV_Cross_Output
[   2.452][d][vo/gpu/d3d11] [ 34] {
[   2.452][d][vo/gpu/d3d11] [ 35]     float4 _1477 : SV_Target0;
[   2.452][d][vo/gpu/d3d11] [ 36] };
[   2.452][d][vo/gpu/d3d11] [ 37] 
[   2.452][d][vo/gpu/d3d11] [ 38] void frag_main()
[   2.452][d][vo/gpu/d3d11] [ 39] {
[   2.452][d][vo/gpu/d3d11] [ 40]     float4 _1494 = _39.Sample(__39_sampler, mad(_49_m8, (-1.0f).xx, _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 41]     float4 _1510 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 0.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 42]     float4 _1528 = _39.Sample(__39_sampler, mad(_49_m8, float2(-1.0f, 1.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 43]     float4 _1546 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, -1.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 44]     float4 _1564 = _39.Sample(__39_sampler, _43) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 45]     float4 _1582 = _39.Sample(__39_sampler, mad(_49_m8, float2(0.0f, 1.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 46]     float4 _1600 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, -1.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 47]     float4 _1618 = _39.Sample(__39_sampler, mad(_49_m8, float2(1.0f, 0.0f), _43)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 48]     float4 _1636 = _39.Sample(__39_sampler, _43 + _49_m8) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 49]     float4 _1654 = _410.Sample(__410_sampler, mad(_49_m12, (-1.0f).xx, _412)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 50]     float4 _1672 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 0.0f), _412)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 51]     float4 _1690 = _410.Sample(__410_sampler, mad(_49_m12, float2(-1.0f, 1.0f), _412)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 52]     float4 _1708 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, -1.0f), _412)) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 53]     float4 _1726 = _410.Sample(__410_sampler, _412) * 1.0f;
[   2.452][d][vo/gpu/d3d11] [ 54]     float4 _1744 = _410.Sample(__410_sampler, mad(_49_m12, float2(0.0f, 1.0f), _412)) * 1.0f;
[   2.453][d][vo/gpu/d3d11] [ 55]     float4 _1762 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, -1.0f), _412)) * 1.0f;
[   2.453][d][vo/gpu/d3d11] [ 56]     float4 _1780 = _410.Sample(__410_sampler, mad(_49_m12, float2(1.0f, 0.0f), _412)) * 1.0f;
[   2.453][d][vo/gpu/d3d11] [ 57]     float4 _1798 = _410.Sample(__410_sampler, _412 + _49_m12) * 1.0f;
[   2.453][d][vo/gpu/d3d11] [ 58]     float4 _1803 = ((((((((((((((((mul(max(_1494, 0.0f.xxxx), float4x4(float4(-0.3601662814617156982421875f, 0.0190640427172183990478515625f, 0.307322800159454345703125f, 0.16891135275363922119140625f), float4(0.02673936821520328521728515625f, 0.3113619387149810791015625f, 0.11260382831096649169921875f, -0.2691869437694549560546875f), float4(0.04199279844760894775390625f, -0.3365077972412109375f, 0.20189742743968963623046875f, -0.04136312007904052734375f), float4(0.039564646780490875244140625f, 0.0331994257867336273193359375f, 0.1876829564571380615234375f, -0.0171198584139347076416015625f))) + mul(max(_1510, 0.0f.xxxx), float4x4(float4(0.2866348326206207275390625f, -0.4171650707721710205078125f, 0.05928154289722442626953125f, 0.043736435472965240478515625f), float4(0.0028875465504825115203857421875f, 0.1381739079952239990234375f, -0.1254331767559051513671875f, -0.279405295848846435546875f), float4(-0.02352894283831119537353515625f, 0.106101147830486297607421875f, 0.09100277721881866455078125f, 0.0401329360902309417724609375f), float4(-0.2194920480251312255859375f, -0.0278100110590457916259765625f, -0.0301217995584011077880859375f, 0.08404712378978729248046875f)))) + mul(max(_1528, 0.0f.xxxx), float4x4(float4(0.396748065948486328125f, -0.004087875597178936004638671875f, -0.03823594748973846435546875f, 0.118808381259441375732421875f), float4(0.009898328222334384918212890625f, 0.19107846915721893310546875f, -0.00931383110582828521728515625f, -0.1554276049137115478515625f), float4(-0.0473416633903980255126953125f, 0.18049581348896026611328125f, -0.02931719459593296051025390625f, 0.070890903472900390625f), float4(0.070831596851348876953125f, -0.11061744391918182373046875f, 0.1458403766155242919921875f, -0.02226122282445430755615234375f)))) + mul(max(_1546, 0.0f.xxxx), float4x4(float4(-0.2040024101734161376953125f, 0.089649200439453125f, -0.0103863812983036041259765625f, -0.0521333850920200347900390625f), float4(0.0050239558331668376922607421875f, -0.066287048161029815673828125f, -0.16436208784580230712890625f, -0.2534598410129547119140625f), float4(-0.0528519190847873687744140625f, 0.09706556797027587890625f, -0.0377891398966312408447265625f, -0.15254600346088409423828125f), float4(0.17023251950740814208984375f, 0.063713826239109039306640625f, 0.007430369965732097625732421875f, 0.0566340871155261993408203125f)))) + mul(max(_1564, 0.0f.xxxx), float4x4(float4(-0.08079333603382110595703125f, 0.420420706272125244140625f, 0.1909823715686798095703125f, 0.20028038322925567626953125f), float4(-0.054076544940471649169921875f, 0.22064368426799774169921875f, -0.2585338652133941650390625f, -0.3643561899662017822265625f), float4(0.20855729281902313232421875f, -0.023731000721454620361328125f, -0.06727708876132965087890625f, -0.18683032691478729248046875f), float4(-0.18032158911228179931640625f, -0.063883483409881591796875f, 0.3044629991054534912109375f, -0.2517780959606170654296875f)))) + mul(max(_1582, 0.0f.xxxx), float4x4(float4(0.1194094121456146240234375f, 0.10624007880687713623046875f, 0.16120581328868865966796875f, 0.2369602024555206298828125f), float4(0.332182705402374267578125f, 0.4272074997425079345703125f, -0.10403668880462646484375f, -0.3138801753520965576171875f), float4(-0.0063721239566802978515625f, -0.006536710076034069061279296875f, 0.109810195863246917724609375f, 0.22771720588207244873046875f), float4(0.0057719978503882884979248046875f, 0.086026914417743682861328125f, -0.089348129928112030029296875f, -0.09494173526763916015625f)))) + mul(max(_1600, 0.0f.xxxx), float4x4(float4(-0.13233567774295806884765625f, 0.2411250770092010498046875f, -0.006800641305744647979736328125f, 0.1246622502803802490234375f), float4(0.11396591365337371826171875f, -0.072492532432079315185546875f, -0.2909037768840789794921875f, -0.12828145921230316162109375f), float4(-0.220011413097381591796875f, -0.0853240489959716796875f, -0.11932601034641265869140625f, 0.294529736042022705078125f), float4(0.095721952617168426513671875f, 0.01760384254157543182373046875f, 0.124540172517299652099609375f, 0.1632175147533416748046875f)))) + mul(max(_1618, 0.0f.xxxx), float4x4(float4(0.04210744798183441162109375f, -0.008072160184383392333984375f, 0.065806739032268524169921875f, -0.12895269691944122314453125f), float4(0.139774262905120849609375f, -0.0371596850454807281494140625f, -0.21001346409320831298828125f, -0.08698160946369171142578125f), float4(0.2237050235271453857421875f, -0.291703283786773681640625f, 0.217920601367950439453125f, 0.366213023662567138671875f), float4(0.082547701895236968994140625f, -0.01651365496218204498291015625f, -0.11157248914241790771484375f, 0.12861597537994384765625f)))) + mul(max(_1636, 0.0f.xxxx), float4x4(float4(0.2246825993061065673828125f, -0.1326223313808441162109375f, 0.121316529810428619384765625f, -0.155223548412322998046875f), float4(0.38104856014251708984375f, 0.03023772872984409332275390625f, 0.12862889468669891357421875f, -0.197704732418060302734375f), float4(-0.1617501080036163330078125f, -0.13688887655735015869140625f, 0.23505462706089019775390625f, 0.21333031356334686279296875f), float4(0.763523161411285400390625f, -0.1794907748699188232421875f, -0.13124310970306396484375f, 0.16138790547847747802734375f)))) + mul(max(_1654, 0.0f.xxxx), float4x4(float4(-0.050607495009899139404296875f, 0.08467049896717071533203125f, -0.0613609217107295989990234375f, -0.033436477184295654296875f), float4(0.4113834798336029052734375f, 0.03704340755939483642578125f, -0.02676335908472537994384765625f, -0.37771952152252197265625f), float4(0.2214750349521636962890625f, 0.064907573163509368896484375f, -0.0426615811884403228759765625f, -0.22606372833251953125f), float4(0.0457750074565410614013671875f, -0.0544981919229030609130859375f, -0.2149587571620941162109375f, -0.036050416529178619384765625f)))) + mul(max(_1672, 0.0f.xxxx), float4x4(float4(-0.062425218522548675537109375f, 0.270082414150238037109375f, -0.0560262091457843780517578125f, -0.123615510761737823486328125f), float4(0.14477442204952239990234375f, 0.19403581321239471435546875f, 0.23505251109600067138671875f, -0.07223403453826904296875f), float4(-0.15831543505191802978515625f, 0.46404469013214111328125f, -0.104754634201526641845703125f, -0.0045396811328828334808349609375f), float4(-0.20246095955371856689453125f, 0.23216484487056732177734375f, -0.358863651752471923828125f, 0.113607771694660186767578125f)))) + mul(max(_1690, 0.0f.xxxx), float4x4(float4(0.14777757227420806884765625f, 0.18951411545276641845703125f, 0.02721945755183696746826171875f, 0.112160153687000274658203125f), float4(0.0299799703061580657958984375f, -0.1346635520458221435546875f, -0.0010830094106495380401611328125f, 0.02130295336246490478515625f), float4(0.23441231250762939453125f, -0.14529244601726531982421875f, 0.080687291920185089111328125f, 0.100443981587886810302734375f), float4(0.397287786006927490234375f, 0.2657020390033721923828125f, 0.004681066609919071197509765625f, -0.286326110363006591796875f)))) + mul(max(_1708, 0.0f.xxxx), float4x4(float4(-0.10385484993457794189453125f, 0.1053723990917205810546875f, 0.16961228847503662109375f, 0.2072701156139373779296875f), float4(-0.0251489169895648956298828125f, -0.01136509515345096588134765625f, 0.0389991886913776397705078125f, -0.030950210988521575927734375f), float4(0.079080455005168914794921875f, -0.3276785314083099365234375f, 0.06467020511627197265625f, -0.03577138483524322509765625f), float4(0.1683379709720611572265625f, -0.21567492187023162841796875f, 0.3087125718593597412109375f, -0.19965471327304840087890625f)))) + mul(max(_1726, 0.0f.xxxx), float4x4(float4(-0.234208881855010986328125f, -0.00489469803869724273681640625f, -0.1816262304782867431640625f, -0.3110752403736114501953125f), float4(0.119765080511569976806640625f, 0.14924950897693634033203125f, -0.087233163416385650634765625f, 0.21401922404766082763671875f), float4(-0.58200323581695556640625f, -0.01177345030009746551513671875f, -0.04903350770473480224609375f, 0.19593577086925506591796875f), float4(-0.2113907337188720703125f, 0.13016600906848907470703125f, 0.0873484313488006591796875f, 0.415889203548431396484375f)))) + mul(max(_1744, 0.0f.xxxx), float4x4(float4(0.000978981261141598224639892578125f, 0.3327491283416748046875f, 0.01740573346614837646484375f, -0.0429063178598880767822265625f), float4(-0.264102756977081298828125f, -0.092913329601287841796875f, 0.01938710175454616546630859375f, 0.105381853878498077392578125f), float4(-0.009176527149975299835205078125f, 0.094835139811038970947265625f, -0.284629344940185546875f, -0.0364440381526947021484375f), float4(0.2851940095424652099609375f, -0.4260311126708984375f, 0.1490223705768585205078125f, -0.115670315921306610107421875f)))) + mul(max(_1762, 0.0f.xxxx), float4x4(float4(-0.09344311058521270751953125f, 0.4463103115558624267578125f, 0.19984833896160125732421875f, -0.09733857214450836181640625f), float4(-0.11871777474880218505859375f, -0.0708025991916656494140625f, 0.24919955432415008544921875f, -0.112346343696117401123046875f), float4(0.124639503657817840576171875f, -0.052909933030605316162109375f, 0.15258149802684783935546875f, 0.077240161597728729248046875f), float4(0.00705346651375293731689453125f, -0.064041651785373687744140625f, -0.18149726092815399169921875f, -0.014058335684239864349365234375f)))) + mul(max(_1780, 0.0f.xxxx), float4x4(float4(-0.17353044450283050537109375f, 0.15376104414463043212890625f, 0.004588994197547435760498046875f, -0.13554202020168304443359375f), float4(-0.19920237362384796142578125f, -0.1891868114471435546875f, 0.113275118172168731689453125f, -0.117296434938907623291015625f), float4(-0.078525103628635406494140625f, 0.013677154667675495147705078125f, -0.2103213965892791748046875f, 0.068434260785579681396484375f), float4(-0.27790927886962890625f, 0.098375447094440460205078125f, -0.00019213746418245136737823486328125f, 0.09132538735866546630859375f)))) + mul(max(_1798, 0.0f.xxxx), float4x4(float4(-0.015866510570049285888671875f, 0.014929440803825855255126953125f, 0.24261860549449920654296875f, -0.1889373958110809326171875f), float4(-0.08654619753360748291015625f, -0.07454513013362884521484375f, -0.2079726755619049072265625f, -0.2236685454845428466796875f), float4(0.19704158604145050048828125f, 0.0048206006176769733428955078125f, -0.16707217693328857421875f, -0.141626834869384765625f), float4(0.036798395216464996337890625f, -0.166315495967864990234375f, -0.120093889534473419189453125f, 0.09603802859783172607421875f)));
[   2.453][d][vo/gpu/d3d11] [ 59]     float4 _2069 = (((((((((((((_1803 + mul(max(-_1494, 0.0f.xxxx), float4x4(float4(-0.0415321923792362213134765625f, 0.057538039982318878173828125f, 0.179270684719085693359375f, -0.04211209714412689208984375f), float4(0.12080968916416168212890625f, -0.1505257189273834228515625f, -0.348557651042938232421875f, -0.07356987893581390380859375f), float4(-0.2819988429546356201171875f, -0.189586639404296875f, 0.15879882872104644775390625f, 0.0851158797740936279296875f), float4(0.00342132267542183399200439453125f, -0.0533849485218524932861328125f, -0.372852981090545654296875f, 0.06626708805561065673828125f)))) + mul(max(-_1510, 0.0f.xxxx), float4x4(float4(-0.20219133794307708740234375f, 0.22150374948978424072265625f, -0.2940545380115509033203125f, 0.065977029502391815185546875f), float4(-0.0188852846622467041015625f, -0.01055170409381389617919921875f, -0.01077428273856639862060546875f, 0.08758954703807830810546875f), float4(-0.2015348970890045166015625f, -0.1700622737407684326171875f, -0.24321876466274261474609375f, -0.068642072379589080810546875f), float4(-0.118437863886356353759765625f, -0.0439772121608257293701171875f, -0.02973681129515171051025390625f, 0.14040918648242950439453125f)))) + mul(max(-_1528, 0.0f.xxxx), float4x4(float4(-0.18709076941013336181640625f, -0.097239382565021514892578125f, 0.12783436477184295654296875f, -0.15167634189128875732421875f), float4(0.29039704799652099609375f, -0.1100991070270538330078125f, 0.01837141811847686767578125f, -0.0600967071950435638427734375f), float4(-0.072569228708744049072265625f, -0.257995665073394775390625f, -0.06276933848857879638671875f, -0.035992302000522613525390625f), float4(-0.0672911107540130615234375f, -0.0599567927420139312744140625f, -0.02407973445951938629150390625f, 0.01183887757360935211181640625f)))) + mul(max(-_1546, 0.0f.xxxx), float4x4(float4(0.0104491747915744781494140625f, -0.082124508917331695556640625f, 0.140980303287506103515625f, 0.11861121654510498046875f), float4(-0.180358350276947021484375f, 0.0519305653870105743408203125f, 0.0104955099523067474365234375f, -0.094479620456695556640625f), float4(0.12029649317264556884765625f, 0.0406045131385326385498046875f, -0.05997170507907867431640625f, -0.004466735757887363433837890625f), float4(-0.22080485522747039794921875f, -0.111876808106899261474609375f, 0.124374695122241973876953125f, -0.00415548495948314666748046875f)))) + mul(max(-_1564, 0.0f.xxxx), float4x4(float4(-0.285842359066009521484375f, -0.384801328182220458984375f, -0.13987813889980316162109375f, -0.4463469088077545166015625f), float4(-0.389041900634765625f, -0.0224981717765331268310546875f, 0.1733445227146148681640625f, 0.21895568072795867919921875f), float4(-0.15450422465801239013671875f, -0.10905496776103973388671875f, 0.151119053363800048828125f, -0.22554914653301239013671875f), float4(0.10612158477306365966796875f, -0.029144369065761566162109375f, 0.360590457916259765625f, 0.22140681743621826171875f)))) + mul(max(-_1582, 0.0f.xxxx), float4x4(float4(-0.2378030717372894287109375f, -0.0230337046086788177490234375f, 0.068205885589122772216796875f, -0.110635854303836822509765625f), float4(-0.267200052738189697265625f, -0.16081829369068145751953125f, 0.19523881375789642333984375f, 0.079728372395038604736328125f), float4(-0.01849585212767124176025390625f, -0.2793956100940704345703125f, 0.17668397724628448486328125f, -0.12020479142665863037109375f), float4(-0.079556085169315338134765625f, -0.02284952066838741302490234375f, 0.031480275094509124755859375f, 0.318183481693267822265625f)))) + mul(max(-_1600, 0.0f.xxxx), float4x4(float4(0.22501225769519805908203125f, -0.00829407013952732086181640625f, 0.0595816671848297119140625f, 0.16512988507747650146484375f), float4(0.187114417552947998046875f, 0.12009680271148681640625f, 0.118126519024372100830078125f, -0.16091056168079376220703125f), float4(0.1573397219181060791015625f, 0.045156084001064300537109375f, 0.2064049243927001953125f, -0.168520271778106689453125f), float4(-0.11217176914215087890625f, 0.06746272742748260498046875f, -0.0502181760966777801513671875f, 0.086437828838825225830078125f)))) + mul(max(-_1618, 0.0f.xxxx), float4x4(float4(0.20715691149234771728515625f, -0.1082907021045684814453125f, 0.02789297513663768768310546875f, 0.1951526105403900146484375f), float4(-0.1783890426158905029296875f, 0.15322570502758026123046875f, -0.108409844338893890380859375f, -0.06632365286350250244140625f), float4(-0.138050258159637451171875f, 0.23020233213901519775390625f, 0.124165810644626617431640625f, -0.14861802756786346435546875f), float4(0.1665047109127044677734375f, 0.08158385753631591796875f, -0.090513028204441070556640625f, -0.069816492497920989990234375f)))) + mul(max(-_1636, 0.0f.xxxx), float4x4(float4(-0.0461712591350078582763671875f, 0.065792210400104522705078125f, 0.2596473395824432373046875f, 0.285009682178497314453125f), float4(0.076412551105022430419921875f, -0.090885855257511138916015625f, -0.097252197563648223876953125f, 0.18298368155956268310546875f), float4(-0.0639333426952362060546875f, 0.103463001549243927001953125f, -0.23062051832675933837890625f, -0.1527073085308074951171875f), float4(0.13633437454700469970703125f, 0.074707485735416412353515625f, 0.15065334737300872802734375f, -0.02460257150232791900634765625f)))) + mul(max(-_1654, 0.0f.xxxx), float4x4(float4(0.118319295346736907958984375f, 0.0104109384119510650634765625f, 0.04465593397617340087890625f, -0.104725904762744903564453125f), float4(0.03047756850719451904296875f, 0.12867386639118194580078125f, 0.039075314998626708984375f, 0.1892211735248565673828125f), float4(0.13301081955432891845703125f, -0.16015569865703582763671875f, 0.038168407976627349853515625f, -0.073722593486309051513671875f), float4(-0.09522213041782379150390625f, -0.095107145607471466064453125f, -0.16679631173610687255859375f, 0.0446732342243194580078125f)))) + mul(max(-_1672, 0.0f.xxxx), float4x4(float4(0.462289988994598388671875f, -0.307808220386505126953125f, -0.090814650058746337890625f, 0.14333869516849517822265625f), float4(-0.03150390088558197021484375f, 0.0594091154634952545166015625f, -0.24948491156101226806640625f, -0.17146956920623779296875f), float4(0.0608437359333038330078125f, -0.0419898219406604766845703125f, 0.054005734622478485107421875f, 0.22835566103458404541015625f), float4(0.12036597728729248046875f, -0.0070898844860494136810302734375f, 0.17276851832866668701171875f, -0.17754094302654266357421875f)))) + mul(max(-_1690, 0.0f.xxxx), float4x4(float4(-0.3511957228183746337890625f, 0.02003431133925914764404296875f, 0.087519429624080657958984375f, 0.081934876739978790283203125f), float4(0.041884876787662506103515625f, 0.22649358212947845458984375f, -0.07447533309459686279296875f, 0.20845472812652587890625f), float4(-0.048598460853099822998046875f, -0.162067353725433349609375f, 0.068195760250091552734375f, -0.0530007779598236083984375f), float4(0.1814642250537872314453125f, 0.046941481530666351318359375f, 0.04529321193695068359375f, 0.067835748195648193359375f)))) + mul(max(-_1708, 0.0f.xxxx), float4x4(float4(0.280914008617401123046875f, -0.149987041950225830078125f, -0.2348580658435821533203125f, -0.01560829579830169677734375f), float4(0.1549555957317352294921875f, -0.119926631450653076171875f, -0.09497411549091339111328125f, 0.058872841298580169677734375f), float4(0.053392075002193450927734375f, 0.103224642574787139892578125f, -0.07506668567657470703125f, 0.068358354270458221435546875f), float4(-0.1866333782672882080078125f, 0.00990149937570095062255859375f, -0.12337033450603485107421875f, -0.1250270307064056396484375f)))) + mul(max(-_1726, 0.0f.xxxx), float4x4(float4(0.7748568058013916015625f, -0.1787062585353851318359375f, -0.2077005207538604736328125f, 0.02469252608716487884521484375f), float4(-0.05643029510974884033203125f, -0.063241131603717803955078125f, -0.03660047054290771484375f, 0.29629671573638916015625f), float4(-0.518969833850860595703125f, -0.02723126113414764404296875f, 0.059037618339061737060546875f, 0.077677644789218902587890625f), float4(-0.0616754852235317230224609375f, -0.20277845859527587890625f, 0.103522233664989471435546875f, -0.081984460353851318359375f)));
[   2.453][d][vo/gpu/d3d11] [ 60]     _1477 = ((((_2069 + mul(max(-_1744, 0.0f.xxxx), float4x4(float4(-0.06347568333148956298828125f, 0.21643166244029998779296875f, -0.0971854627132415771484375f, 0.037225700914859771728515625f), float4(-0.02953795157372951507568359375f, -0.035713501274585723876953125f, -0.0954836308956146240234375f, 0.18225233256816864013671875f), float4(-0.29609334468841552734375f, -0.349613189697265625f, 0.18245913088321685791015625f, -0.1016258895397186279296875f), float4(-0.1818945109844207763671875f, -0.09077887237071990966796875f, 0.117313183844089508056640625f, -0.068638741970062255859375f)))) + mul(max(-_1762, 0.0f.xxxx), float4x4(float4(-0.0473735742270946502685546875f, -0.02028937637805938720703125f, -0.2574871480464935302734375f, -0.1356816589832305908203125f), float4(0.15656633675098419189453125f, -0.068418987095355987548828125f, 0.012100781314074993133544921875f, -0.13611818850040435791015625f), float4(0.001635732245631515979766845703125f, -0.2387053668498992919921875f, 0.140357434749603271484375f, -0.14700134098529815673828125f), float4(0.253557503223419189453125f, -0.13697345554828643798828125f, -0.1369313895702362060546875f, -0.103652872145175933837890625f)))) + mul(max(-_1780, 0.0f.xxxx), float4x4(float4(0.4283933937549591064453125f, -0.3161920011043548583984375f, -0.012617616914212703704833984375f, 0.0184689648449420928955078125f), float4(0.214366436004638671875f, 0.1840881407260894775390625f, -0.4265153706073760986328125f, 0.12504087388515472412109375f), float4(-0.138949334621429443359375f, 0.091662175953388214111328125f, -0.20096369087696075439453125f, -0.08072717487812042236328125f), float4(-0.00548784621059894561767578125f, 0.1704638302326202392578125f, 0.1383948028087615966796875f, -0.00549563951790332794189453125f)))) + mul(max(-_1798, 0.0f.xxxx), float4x4(float4(0.2001429498195648193359375f, -0.02728239633142948150634765625f, -0.063170067965984344482421875f, 0.0445204190909862518310546875f), float4(0.064600385725498199462890625f, 0.072222925722599029541015625f, -0.33409225940704345703125f, 0.080638311803340911865234375f), float4(-0.02260797657072544097900390625f, 0.130885601043701171875f, -0.3969174325466156005859375f, -0.09488986432552337646484375f), float4(-0.181053102016448974609375f, 0.01136724837124347686767578125f, -0.25312221050262451171875f, -0.22468316555023193359375f)))) + float4(0.268868863582611083984375f, 0.05874665081501007080078125f, 0.1026823222637176513671875f, 0.058330811560153961181640625f);
[   2.453][d][vo/gpu/d3d11] [ 61] }
[   2.453][d][vo/gpu/d3d11] [ 62] 
[   2.453][d][vo/gpu/d3d11] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.453][d][vo/gpu/d3d11] [ 64] {
[   2.453][d][vo/gpu/d3d11] [ 65]     _43 = stage_input._43;
[   2.453][d][vo/gpu/d3d11] [ 66]     _412 = stage_input._412;
[   2.453][d][vo/gpu/d3d11] [ 67]     frag_main();
[   2.453][d][vo/gpu/d3d11] [ 68]     SPIRV_Cross_Output stage_output;
[   2.453][d][vo/gpu/d3d11] [ 69]     stage_output._1477 = _1477;
[   2.453][d][vo/gpu/d3d11] [ 70]     return stage_output;
[   2.453][d][vo/gpu/d3d11] [ 71] }
[   2.453][d][vo/gpu] Resizing texture: 1920x800
[   2.456][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.460][v][vo/gpu/d3d11] Compiled a vertex shader in 7520us
[   2.460][v][vo/gpu/d3d11] shaderc: 2853us, SPIRV-Cross: 222us, D3DCompile: 4445us
[   2.460][d][vo/gpu/d3d11] GLSL source:
[   2.460][d][vo/gpu/d3d11] [  1] #version 450
[   2.460][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.460][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.460][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.460][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.460][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.461][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.461][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.461][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.461][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.461][d][vo/gpu/d3d11] [ 11] layout(location=3) in vec2 vertex_texcoord2;
[   2.461][d][vo/gpu/d3d11] [ 12] layout(location=3) out vec2 texcoord2;
[   2.461][d][vo/gpu/d3d11] [ 13] layout(location=4) in vec2 vertex_texcoord3;
[   2.461][d][vo/gpu/d3d11] [ 14] layout(location=4) out vec2 texcoord3;
[   2.461][d][vo/gpu/d3d11] [ 15] layout(location=5) in vec2 vertex_texcoord4;
[   2.461][d][vo/gpu/d3d11] [ 16] layout(location=5) out vec2 texcoord4;
[   2.461][d][vo/gpu/d3d11] [ 17] layout(location=6) in vec2 vertex_texcoord5;
[   2.461][d][vo/gpu/d3d11] [ 18] layout(location=6) out vec2 texcoord5;
[   2.461][d][vo/gpu/d3d11] [ 19] layout(location=7) in vec2 vertex_texcoord6;
[   2.461][d][vo/gpu/d3d11] [ 20] layout(location=7) out vec2 texcoord6;
[   2.461][d][vo/gpu/d3d11] [ 21] layout(location=8) in vec2 vertex_texcoord7;
[   2.461][d][vo/gpu/d3d11] [ 22] layout(location=8) out vec2 texcoord7;
[   2.461][d][vo/gpu/d3d11] [ 23] layout(location=9) in vec2 vertex_texcoord8;
[   2.461][d][vo/gpu/d3d11] [ 24] layout(location=9) out vec2 texcoord8;
[   2.461][d][vo/gpu/d3d11] [ 25] layout(location=10) in vec2 vertex_texcoord9;
[   2.461][d][vo/gpu/d3d11] [ 26] layout(location=10) out vec2 texcoord9;
[   2.461][d][vo/gpu/d3d11] [ 27] layout(location=11) in vec2 vertex_texcoord10;
[   2.461][d][vo/gpu/d3d11] [ 28] layout(location=11) out vec2 texcoord10;
[   2.461][d][vo/gpu/d3d11] [ 29] layout(location=12) in vec2 vertex_texcoord11;
[   2.461][d][vo/gpu/d3d11] [ 30] layout(location=12) out vec2 texcoord11;
[   2.461][d][vo/gpu/d3d11] [ 31] layout(location=13) in vec2 vertex_texcoord12;
[   2.461][d][vo/gpu/d3d11] [ 32] layout(location=13) out vec2 texcoord12;
[   2.461][d][vo/gpu/d3d11] [ 33] layout(location=14) in vec2 vertex_texcoord13;
[   2.461][d][vo/gpu/d3d11] [ 34] layout(location=14) out vec2 texcoord13;
[   2.461][d][vo/gpu/d3d11] [ 35] layout(location=15) in vec2 vertex_texcoord14;
[   2.461][d][vo/gpu/d3d11] [ 36] layout(location=15) out vec2 texcoord14;
[   2.461][d][vo/gpu/d3d11] [ 37] void main() {
[   2.461][d][vo/gpu/d3d11] [ 38] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.461][d][vo/gpu/d3d11] [ 39] texcoord0 = vertex_texcoord0;
[   2.461][d][vo/gpu/d3d11] [ 40] texcoord1 = vertex_texcoord1;
[   2.461][d][vo/gpu/d3d11] [ 41] texcoord2 = vertex_texcoord2;
[   2.461][d][vo/gpu/d3d11] [ 42] texcoord3 = vertex_texcoord3;
[   2.461][d][vo/gpu/d3d11] [ 43] texcoord4 = vertex_texcoord4;
[   2.461][d][vo/gpu/d3d11] [ 44] texcoord5 = vertex_texcoord5;
[   2.461][d][vo/gpu/d3d11] [ 45] texcoord6 = vertex_texcoord6;
[   2.461][d][vo/gpu/d3d11] [ 46] texcoord7 = vertex_texcoord7;
[   2.461][d][vo/gpu/d3d11] [ 47] texcoord8 = vertex_texcoord8;
[   2.461][d][vo/gpu/d3d11] [ 48] texcoord9 = vertex_texcoord9;
[   2.461][d][vo/gpu/d3d11] [ 49] texcoord10 = vertex_texcoord10;
[   2.461][d][vo/gpu/d3d11] [ 50] texcoord11 = vertex_texcoord11;
[   2.461][d][vo/gpu/d3d11] [ 51] texcoord12 = vertex_texcoord12;
[   2.461][d][vo/gpu/d3d11] [ 52] texcoord13 = vertex_texcoord13;
[   2.461][d][vo/gpu/d3d11] [ 53] texcoord14 = vertex_texcoord14;
[   2.461][d][vo/gpu/d3d11] [ 54] }
[   2.461][d][vo/gpu/d3d11] HLSL source:
[   2.461][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.461][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.461][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.461][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.461][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.461][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.461][d][vo/gpu/d3d11] [  7] static float2 _33;
[   2.461][d][vo/gpu/d3d11] [  8] static float2 _34;
[   2.461][d][vo/gpu/d3d11] [  9] static float2 _36;
[   2.461][d][vo/gpu/d3d11] [ 10] static float2 _37;
[   2.461][d][vo/gpu/d3d11] [ 11] static float2 _39;
[   2.461][d][vo/gpu/d3d11] [ 12] static float2 _40;
[   2.461][d][vo/gpu/d3d11] [ 13] static float2 _42;
[   2.461][d][vo/gpu/d3d11] [ 14] static float2 _43;
[   2.461][d][vo/gpu/d3d11] [ 15] static float2 _45;
[   2.461][d][vo/gpu/d3d11] [ 16] static float2 _46;
[   2.461][d][vo/gpu/d3d11] [ 17] static float2 _48;
[   2.461][d][vo/gpu/d3d11] [ 18] static float2 _49;
[   2.461][d][vo/gpu/d3d11] [ 19] static float2 _51;
[   2.461][d][vo/gpu/d3d11] [ 20] static float2 _52;
[   2.461][d][vo/gpu/d3d11] [ 21] static float2 _54;
[   2.461][d][vo/gpu/d3d11] [ 22] static float2 _55;
[   2.461][d][vo/gpu/d3d11] [ 23] static float2 _57;
[   2.461][d][vo/gpu/d3d11] [ 24] static float2 _58;
[   2.461][d][vo/gpu/d3d11] [ 25] static float2 _60;
[   2.461][d][vo/gpu/d3d11] [ 26] static float2 _61;
[   2.461][d][vo/gpu/d3d11] [ 27] static float2 _63;
[   2.461][d][vo/gpu/d3d11] [ 28] static float2 _64;
[   2.461][d][vo/gpu/d3d11] [ 29] static float2 _66;
[   2.461][d][vo/gpu/d3d11] [ 30] static float2 _67;
[   2.461][d][vo/gpu/d3d11] [ 31] static float2 _69;
[   2.461][d][vo/gpu/d3d11] [ 32] static float2 _70;
[   2.461][d][vo/gpu/d3d11] [ 33] 
[   2.461][d][vo/gpu/d3d11] [ 34] struct SPIRV_Cross_Input
[   2.461][d][vo/gpu/d3d11] [ 35] {
[   2.461][d][vo/gpu/d3d11] [ 36]     float2 _18 : TEXCOORD0;
[   2.461][d][vo/gpu/d3d11] [ 37]     float2 _28 : TEXCOORD1;
[   2.461][d][vo/gpu/d3d11] [ 38]     float2 _31 : TEXCOORD2;
[   2.461][d][vo/gpu/d3d11] [ 39]     float2 _34 : TEXCOORD3;
[   2.461][d][vo/gpu/d3d11] [ 40]     float2 _37 : TEXCOORD4;
[   2.461][d][vo/gpu/d3d11] [ 41]     float2 _40 : TEXCOORD5;
[   2.461][d][vo/gpu/d3d11] [ 42]     float2 _43 : TEXCOORD6;
[   2.461][d][vo/gpu/d3d11] [ 43]     float2 _46 : TEXCOORD7;
[   2.461][d][vo/gpu/d3d11] [ 44]     float2 _49 : TEXCOORD8;
[   2.461][d][vo/gpu/d3d11] [ 45]     float2 _52 : TEXCOORD9;
[   2.461][d][vo/gpu/d3d11] [ 46]     float2 _55 : TEXCOORD10;
[   2.461][d][vo/gpu/d3d11] [ 47]     float2 _58 : TEXCOORD11;
[   2.461][d][vo/gpu/d3d11] [ 48]     float2 _61 : TEXCOORD12;
[   2.461][d][vo/gpu/d3d11] [ 49]     float2 _64 : TEXCOORD13;
[   2.461][d][vo/gpu/d3d11] [ 50]     float2 _67 : TEXCOORD14;
[   2.461][d][vo/gpu/d3d11] [ 51]     float2 _70 : TEXCOORD15;
[   2.461][d][vo/gpu/d3d11] [ 52] };
[   2.461][d][vo/gpu/d3d11] [ 53] 
[   2.461][d][vo/gpu/d3d11] [ 54] struct SPIRV_Cross_Output
[   2.461][d][vo/gpu/d3d11] [ 55] {
[   2.461][d][vo/gpu/d3d11] [ 56]     float2 _27 : TEXCOORD1;
[   2.461][d][vo/gpu/d3d11] [ 57]     float2 _30 : TEXCOORD2;
[   2.461][d][vo/gpu/d3d11] [ 58]     float2 _33 : TEXCOORD3;
[   2.461][d][vo/gpu/d3d11] [ 59]     float2 _36 : TEXCOORD4;
[   2.461][d][vo/gpu/d3d11] [ 60]     float2 _39 : TEXCOORD5;
[   2.461][d][vo/gpu/d3d11] [ 61]     float2 _42 : TEXCOORD6;
[   2.461][d][vo/gpu/d3d11] [ 62]     float2 _45 : TEXCOORD7;
[   2.461][d][vo/gpu/d3d11] [ 63]     float2 _48 : TEXCOORD8;
[   2.461][d][vo/gpu/d3d11] [ 64]     float2 _51 : TEXCOORD9;
[   2.461][d][vo/gpu/d3d11] [ 65]     float2 _54 : TEXCOORD10;
[   2.461][d][vo/gpu/d3d11] [ 66]     float2 _57 : TEXCOORD11;
[   2.461][d][vo/gpu/d3d11] [ 67]     float2 _60 : TEXCOORD12;
[   2.461][d][vo/gpu/d3d11] [ 68]     float2 _63 : TEXCOORD13;
[   2.461][d][vo/gpu/d3d11] [ 69]     float2 _66 : TEXCOORD14;
[   2.461][d][vo/gpu/d3d11] [ 70]     float2 _69 : TEXCOORD15;
[   2.461][d][vo/gpu/d3d11] [ 71]     float4 gl_Position : SV_Position;
[   2.461][d][vo/gpu/d3d11] [ 72] };
[   2.461][d][vo/gpu/d3d11] [ 73] 
[   2.461][d][vo/gpu/d3d11] [ 74] void vert_main()
[   2.461][d][vo/gpu/d3d11] [ 75] {
[   2.461][d][vo/gpu/d3d11] [ 76]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.461][d][vo/gpu/d3d11] [ 77]     _27 = _28;
[   2.461][d][vo/gpu/d3d11] [ 78]     _30 = _31;
[   2.461][d][vo/gpu/d3d11] [ 79]     _33 = _34;
[   2.461][d][vo/gpu/d3d11] [ 80]     _36 = _37;
[   2.461][d][vo/gpu/d3d11] [ 81]     _39 = _40;
[   2.461][d][vo/gpu/d3d11] [ 82]     _42 = _43;
[   2.461][d][vo/gpu/d3d11] [ 83]     _45 = _46;
[   2.461][d][vo/gpu/d3d11] [ 84]     _48 = _49;
[   2.461][d][vo/gpu/d3d11] [ 85]     _51 = _52;
[   2.461][d][vo/gpu/d3d11] [ 86]     _54 = _55;
[   2.461][d][vo/gpu/d3d11] [ 87]     _57 = _58;
[   2.461][d][vo/gpu/d3d11] [ 88]     _60 = _61;
[   2.461][d][vo/gpu/d3d11] [ 89]     _63 = _64;
[   2.461][d][vo/gpu/d3d11] [ 90]     _66 = _67;
[   2.461][d][vo/gpu/d3d11] [ 91]     _69 = _70;
[   2.461][d][vo/gpu/d3d11] [ 92]     gl_Position.y = -gl_Position.y;
[   2.461][d][vo/gpu/d3d11] [ 93] }
[   2.461][d][vo/gpu/d3d11] [ 94] 
[   2.461][d][vo/gpu/d3d11] [ 95] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.461][d][vo/gpu/d3d11] [ 96] {
[   2.461][d][vo/gpu/d3d11] [ 97]     _18 = stage_input._18;
[   2.461][d][vo/gpu/d3d11] [ 98]     _28 = stage_input._28;
[   2.461][d][vo/gpu/d3d11] [ 99]     _31 = stage_input._31;
[   2.461][d][vo/gpu/d3d11] [100]     _34 = stage_input._34;
[   2.461][d][vo/gpu/d3d11] [101]     _37 = stage_input._37;
[   2.461][d][vo/gpu/d3d11] [102]     _40 = stage_input._40;
[   2.461][d][vo/gpu/d3d11] [103]     _43 = stage_input._43;
[   2.461][d][vo/gpu/d3d11] [104]     _46 = stage_input._46;
[   2.461][d][vo/gpu/d3d11] [105]     _49 = stage_input._49;
[   2.461][d][vo/gpu/d3d11] [106]     _52 = stage_input._52;
[   2.461][d][vo/gpu/d3d11] [107]     _55 = stage_input._55;
[   2.461][d][vo/gpu/d3d11] [108]     _58 = stage_input._58;
[   2.461][d][vo/gpu/d3d11] [109]     _61 = stage_input._61;
[   2.461][d][vo/gpu/d3d11] [110]     _64 = stage_input._64;
[   2.461][d][vo/gpu/d3d11] [111]     _67 = stage_input._67;
[   2.461][d][vo/gpu/d3d11] [112]     _70 = stage_input._70;
[   2.461][d][vo/gpu/d3d11] [113]     vert_main();
[   2.461][d][vo/gpu/d3d11] [114]     SPIRV_Cross_Output stage_output;
[   2.461][d][vo/gpu/d3d11] [115]     stage_output.gl_Position = gl_Position;
[   2.461][d][vo/gpu/d3d11] [116]     stage_output._27 = _27;
[   2.461][d][vo/gpu/d3d11] [117]     stage_output._30 = _30;
[   2.461][d][vo/gpu/d3d11] [118]     stage_output._33 = _33;
[   2.461][d][vo/gpu/d3d11] [119]     stage_output._36 = _36;
[   2.461][d][vo/gpu/d3d11] [120]     stage_output._39 = _39;
[   2.461][d][vo/gpu/d3d11] [121]     stage_output._42 = _42;
[   2.461][d][vo/gpu/d3d11] [122]     stage_output._45 = _45;
[   2.461][d][vo/gpu/d3d11] [123]     stage_output._48 = _48;
[   2.461][d][vo/gpu/d3d11] [124]     stage_output._51 = _51;
[   2.461][d][vo/gpu/d3d11] [125]     stage_output._54 = _54;
[   2.461][d][vo/gpu/d3d11] [126]     stage_output._57 = _57;
[   2.461][d][vo/gpu/d3d11] [127]     stage_output._60 = _60;
[   2.461][d][vo/gpu/d3d11] [128]     stage_output._63 = _63;
[   2.461][d][vo/gpu/d3d11] [129]     stage_output._66 = _66;
[   2.461][d][vo/gpu/d3d11] [130]     stage_output._69 = _69;
[   2.461][d][vo/gpu/d3d11] [131]     return stage_output;
[   2.461][d][vo/gpu/d3d11] [132] }
[   2.479][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.506][v][vo/gpu/d3d11] Compiled a fragment shader in 44990us
[   2.506][v][vo/gpu/d3d11] shaderc: 17517us, SPIRV-Cross: 1768us, D3DCompile: 25705us
[   2.506][d][vo/gpu/d3d11] GLSL source:
[   2.506][d][vo/gpu/d3d11] [  1] #version 450
[   2.506][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.506][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.506][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.506][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.506][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.506][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.506][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.506][d][vo/gpu/d3d11] [  9] layout(location=3) in vec2 texcoord2;
[   2.506][d][vo/gpu/d3d11] [ 10] layout(location=4) in vec2 texcoord3;
[   2.506][d][vo/gpu/d3d11] [ 11] layout(location=5) in vec2 texcoord4;
[   2.506][d][vo/gpu/d3d11] [ 12] layout(location=6) in vec2 texcoord5;
[   2.506][d][vo/gpu/d3d11] [ 13] layout(location=7) in vec2 texcoord6;
[   2.506][d][vo/gpu/d3d11] [ 14] layout(location=8) in vec2 texcoord7;
[   2.506][d][vo/gpu/d3d11] [ 15] layout(location=9) in vec2 texcoord8;
[   2.506][d][vo/gpu/d3d11] [ 16] layout(location=10) in vec2 texcoord9;
[   2.506][d][vo/gpu/d3d11] [ 17] layout(location=11) in vec2 texcoord10;
[   2.506][d][vo/gpu/d3d11] [ 18] layout(location=12) in vec2 texcoord11;
[   2.506][d][vo/gpu/d3d11] [ 19] layout(location=13) in vec2 texcoord12;
[   2.506][d][vo/gpu/d3d11] [ 20] layout(location=14) in vec2 texcoord13;
[   2.506][d][vo/gpu/d3d11] [ 21] layout(location=15) in vec2 texcoord14;
[   2.506][d][vo/gpu/d3d11] [ 22] layout(std140, binding=0) uniform UBO {
[   2.506][d][vo/gpu/d3d11] [ 23] layout(offset=0) float random;
[   2.506][d][vo/gpu/d3d11] [ 24] layout(offset=4) int frame;
[   2.506][d][vo/gpu/d3d11] [ 25] layout(offset=8) vec2 input_size;
[   2.506][d][vo/gpu/d3d11] [ 26] layout(offset=16) vec2 target_size;
[   2.506][d][vo/gpu/d3d11] [ 27] layout(offset=24) vec2 tex_offset;
[   2.506][d][vo/gpu/d3d11] [ 28] layout(offset=32) vec2 texture_size0;
[   2.506][d][vo/gpu/d3d11] [ 29] layout(offset=48) mat2 texture_rot0;
[   2.506][d][vo/gpu/d3d11] [ 30] layout(offset=80) vec2 texture_off0;
[   2.506][d][vo/gpu/d3d11] [ 31] layout(offset=88) vec2 pixel_size0;
[   2.506][d][vo/gpu/d3d11] [ 32] layout(offset=96) vec2 texture_size1;
[   2.506][d][vo/gpu/d3d11] [ 33] layout(offset=112) mat2 texture_rot1;
[   2.506][d][vo/gpu/d3d11] [ 34] layout(offset=144) vec2 texture_off1;
[   2.506][d][vo/gpu/d3d11] [ 35] layout(offset=152) vec2 pixel_size1;
[   2.506][d][vo/gpu/d3d11] [ 36] layout(offset=160) vec2 texture_size2;
[   2.506][d][vo/gpu/d3d11] [ 37] layout(offset=176) mat2 texture_rot2;
[   2.506][d][vo/gpu/d3d11] [ 38] layout(offset=208) vec2 texture_off2;
[   2.506][d][vo/gpu/d3d11] [ 39] layout(offset=216) vec2 pixel_size2;
[   2.506][d][vo/gpu/d3d11] [ 40] layout(offset=224) vec2 texture_size3;
[   2.506][d][vo/gpu/d3d11] [ 41] layout(offset=240) mat2 texture_rot3;
[   2.506][d][vo/gpu/d3d11] [ 42] layout(offset=272) vec2 texture_off3;
[   2.506][d][vo/gpu/d3d11] [ 43] layout(offset=280) vec2 pixel_size3;
[   2.506][d][vo/gpu/d3d11] [ 44] layout(offset=288) vec2 texture_size4;
[   2.506][d][vo/gpu/d3d11] [ 45] layout(offset=304) mat2 texture_rot4;
[   2.506][d][vo/gpu/d3d11] [ 46] layout(offset=336) vec2 texture_off4;
[   2.506][d][vo/gpu/d3d11] [ 47] layout(offset=344) vec2 pixel_size4;
[   2.506][d][vo/gpu/d3d11] [ 48] layout(offset=352) vec2 texture_size5;
[   2.506][d][vo/gpu/d3d11] [ 49] layout(offset=368) mat2 texture_rot5;
[   2.506][d][vo/gpu/d3d11] [ 50] layout(offset=400) vec2 texture_off5;
[   2.506][d][vo/gpu/d3d11] [ 51] layout(offset=408) vec2 pixel_size5;
[   2.506][d][vo/gpu/d3d11] [ 52] layout(offset=416) vec2 texture_size6;
[   2.506][d][vo/gpu/d3d11] [ 53] layout(offset=432) mat2 texture_rot6;
[   2.506][d][vo/gpu/d3d11] [ 54] layout(offset=464) vec2 texture_off6;
[   2.506][d][vo/gpu/d3d11] [ 55] layout(offset=472) vec2 pixel_size6;
[   2.506][d][vo/gpu/d3d11] [ 56] layout(offset=480) vec2 texture_size7;
[   2.506][d][vo/gpu/d3d11] [ 57] layout(offset=496) mat2 texture_rot7;
[   2.506][d][vo/gpu/d3d11] [ 58] layout(offset=528) vec2 texture_off7;
[   2.506][d][vo/gpu/d3d11] [ 59] layout(offset=536) vec2 pixel_size7;
[   2.506][d][vo/gpu/d3d11] [ 60] layout(offset=544) vec2 texture_size8;
[   2.506][d][vo/gpu/d3d11] [ 61] layout(offset=560) mat2 texture_rot8;
[   2.506][d][vo/gpu/d3d11] [ 62] layout(offset=592) vec2 texture_off8;
[   2.506][d][vo/gpu/d3d11] [ 63] layout(offset=600) vec2 pixel_size8;
[   2.506][d][vo/gpu/d3d11] [ 64] layout(offset=608) vec2 texture_size9;
[   2.506][d][vo/gpu/d3d11] [ 65] layout(offset=624) mat2 texture_rot9;
[   2.506][d][vo/gpu/d3d11] [ 66] layout(offset=656) vec2 texture_off9;
[   2.506][d][vo/gpu/d3d11] [ 67] layout(offset=664) vec2 pixel_size9;
[   2.506][d][vo/gpu/d3d11] [ 68] layout(offset=672) vec2 texture_size10;
[   2.506][d][vo/gpu/d3d11] [ 69] layout(offset=688) mat2 texture_rot10;
[   2.506][d][vo/gpu/d3d11] [ 70] layout(offset=720) vec2 texture_off10;
[   2.506][d][vo/gpu/d3d11] [ 71] layout(offset=728) vec2 pixel_size10;
[   2.507][d][vo/gpu/d3d11] [ 72] layout(offset=736) vec2 texture_size11;
[   2.507][d][vo/gpu/d3d11] [ 73] layout(offset=752) mat2 texture_rot11;
[   2.507][d][vo/gpu/d3d11] [ 74] layout(offset=784) vec2 texture_off11;
[   2.507][d][vo/gpu/d3d11] [ 75] layout(offset=792) vec2 pixel_size11;
[   2.507][d][vo/gpu/d3d11] [ 76] layout(offset=800) vec2 texture_size12;
[   2.507][d][vo/gpu/d3d11] [ 77] layout(offset=816) mat2 texture_rot12;
[   2.507][d][vo/gpu/d3d11] [ 78] layout(offset=848) vec2 texture_off12;
[   2.507][d][vo/gpu/d3d11] [ 79] layout(offset=856) vec2 pixel_size12;
[   2.507][d][vo/gpu/d3d11] [ 80] layout(offset=864) vec2 texture_size13;
[   2.507][d][vo/gpu/d3d11] [ 81] layout(offset=880) mat2 texture_rot13;
[   2.507][d][vo/gpu/d3d11] [ 82] layout(offset=912) vec2 texture_off13;
[   2.507][d][vo/gpu/d3d11] [ 83] layout(offset=920) vec2 pixel_size13;
[   2.507][d][vo/gpu/d3d11] [ 84] layout(offset=928) vec2 texture_size14;
[   2.507][d][vo/gpu/d3d11] [ 85] layout(offset=944) mat2 texture_rot14;
[   2.507][d][vo/gpu/d3d11] [ 86] layout(offset=976) vec2 texture_off14;
[   2.507][d][vo/gpu/d3d11] [ 87] layout(offset=984) vec2 pixel_size14;
[   2.507][d][vo/gpu/d3d11] [ 88] };
[   2.507][d][vo/gpu/d3d11] [ 89] layout(binding=0) uniform sampler2D texture0;
[   2.507][d][vo/gpu/d3d11] [ 90] layout(binding=1) uniform sampler2D texture1;
[   2.507][d][vo/gpu/d3d11] [ 91] layout(binding=2) uniform sampler2D texture2;
[   2.507][d][vo/gpu/d3d11] [ 92] layout(binding=3) uniform sampler2D texture3;
[   2.507][d][vo/gpu/d3d11] [ 93] layout(binding=4) uniform sampler2D texture4;
[   2.507][d][vo/gpu/d3d11] [ 94] layout(binding=5) uniform sampler2D texture5;
[   2.507][d][vo/gpu/d3d11] [ 95] layout(binding=6) uniform sampler2D texture6;
[   2.507][d][vo/gpu/d3d11] [ 96] layout(binding=7) uniform sampler2D texture7;
[   2.507][d][vo/gpu/d3d11] [ 97] layout(binding=8) uniform sampler2D texture8;
[   2.507][d][vo/gpu/d3d11] [ 98] layout(binding=9) uniform sampler2D texture9;
[   2.507][d][vo/gpu/d3d11] [ 99] layout(binding=10) uniform sampler2D texture10;
[   2.507][d][vo/gpu/d3d11] [100] layout(binding=11) uniform sampler2D texture11;
[   2.507][d][vo/gpu/d3d11] [101] layout(binding=12) uniform sampler2D texture12;
[   2.507][d][vo/gpu/d3d11] [102] layout(binding=13) uniform sampler2D texture13;
[   2.507][d][vo/gpu/d3d11] [103] layout(binding=14) uniform sampler2D texture14;
[   2.507][d][vo/gpu/d3d11] [104] #define MAIN_raw texture0
[   2.507][d][vo/gpu/d3d11] [105] #define MAIN_pos texcoord0
[   2.507][d][vo/gpu/d3d11] [106] #define MAIN_size texture_size0
[   2.507][d][vo/gpu/d3d11] [107] #define MAIN_rot texture_rot0
[   2.507][d][vo/gpu/d3d11] [108] #define MAIN_off texture_off0
[   2.507][d][vo/gpu/d3d11] [109] #define MAIN_pt pixel_size0
[   2.507][d][vo/gpu/d3d11] [110] #define MAIN_map texmap0
[   2.507][d][vo/gpu/d3d11] [111] #define MAIN_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [112] #define MAIN_tex(pos) (MAIN_mul * vec4(texture(MAIN_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [113] #define MAIN_gather(pos, c) (MAIN_mul * vec4(textureGather(MAIN_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [114] #define MAIN_texOff(off) MAIN_tex(MAIN_pos + MAIN_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [115] #define conv2d_1_tf_raw texture1
[   2.507][d][vo/gpu/d3d11] [116] #define conv2d_1_tf_pos texcoord1
[   2.507][d][vo/gpu/d3d11] [117] #define conv2d_1_tf_size texture_size1
[   2.507][d][vo/gpu/d3d11] [118] #define conv2d_1_tf_rot texture_rot1
[   2.507][d][vo/gpu/d3d11] [119] #define conv2d_1_tf_off texture_off1
[   2.507][d][vo/gpu/d3d11] [120] #define conv2d_1_tf_pt pixel_size1
[   2.507][d][vo/gpu/d3d11] [121] #define conv2d_1_tf_map texmap1
[   2.507][d][vo/gpu/d3d11] [122] #define conv2d_1_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [123] #define conv2d_1_tf_tex(pos) (conv2d_1_tf_mul * vec4(texture(conv2d_1_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [124] #define conv2d_1_tf_gather(pos, c) (conv2d_1_tf_mul * vec4(textureGather(conv2d_1_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [125] #define conv2d_1_tf_texOff(off) conv2d_1_tf_tex(conv2d_1_tf_pos + conv2d_1_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [126] #define conv2d_1_tf1_raw texture2
[   2.507][d][vo/gpu/d3d11] [127] #define conv2d_1_tf1_pos texcoord2
[   2.507][d][vo/gpu/d3d11] [128] #define conv2d_1_tf1_size texture_size2
[   2.507][d][vo/gpu/d3d11] [129] #define conv2d_1_tf1_rot texture_rot2
[   2.507][d][vo/gpu/d3d11] [130] #define conv2d_1_tf1_off texture_off2
[   2.507][d][vo/gpu/d3d11] [131] #define conv2d_1_tf1_pt pixel_size2
[   2.507][d][vo/gpu/d3d11] [132] #define conv2d_1_tf1_map texmap2
[   2.507][d][vo/gpu/d3d11] [133] #define conv2d_1_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [134] #define conv2d_1_tf1_tex(pos) (conv2d_1_tf1_mul * vec4(texture(conv2d_1_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [135] #define conv2d_1_tf1_gather(pos, c) (conv2d_1_tf1_mul * vec4(textureGather(conv2d_1_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [136] #define conv2d_1_tf1_texOff(off) conv2d_1_tf1_tex(conv2d_1_tf1_pos + conv2d_1_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [137] #define conv2d_2_tf_raw texture3
[   2.507][d][vo/gpu/d3d11] [138] #define conv2d_2_tf_pos texcoord3
[   2.507][d][vo/gpu/d3d11] [139] #define conv2d_2_tf_size texture_size3
[   2.507][d][vo/gpu/d3d11] [140] #define conv2d_2_tf_rot texture_rot3
[   2.507][d][vo/gpu/d3d11] [141] #define conv2d_2_tf_off texture_off3
[   2.507][d][vo/gpu/d3d11] [142] #define conv2d_2_tf_pt pixel_size3
[   2.507][d][vo/gpu/d3d11] [143] #define conv2d_2_tf_map texmap3
[   2.507][d][vo/gpu/d3d11] [144] #define conv2d_2_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [145] #define conv2d_2_tf_tex(pos) (conv2d_2_tf_mul * vec4(texture(conv2d_2_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [146] #define conv2d_2_tf_gather(pos, c) (conv2d_2_tf_mul * vec4(textureGather(conv2d_2_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [147] #define conv2d_2_tf_texOff(off) conv2d_2_tf_tex(conv2d_2_tf_pos + conv2d_2_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [148] #define conv2d_2_tf1_raw texture4
[   2.507][d][vo/gpu/d3d11] [149] #define conv2d_2_tf1_pos texcoord4
[   2.507][d][vo/gpu/d3d11] [150] #define conv2d_2_tf1_size texture_size4
[   2.507][d][vo/gpu/d3d11] [151] #define conv2d_2_tf1_rot texture_rot4
[   2.507][d][vo/gpu/d3d11] [152] #define conv2d_2_tf1_off texture_off4
[   2.507][d][vo/gpu/d3d11] [153] #define conv2d_2_tf1_pt pixel_size4
[   2.507][d][vo/gpu/d3d11] [154] #define conv2d_2_tf1_map texmap4
[   2.507][d][vo/gpu/d3d11] [155] #define conv2d_2_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [156] #define conv2d_2_tf1_tex(pos) (conv2d_2_tf1_mul * vec4(texture(conv2d_2_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [157] #define conv2d_2_tf1_gather(pos, c) (conv2d_2_tf1_mul * vec4(textureGather(conv2d_2_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [158] #define conv2d_2_tf1_texOff(off) conv2d_2_tf1_tex(conv2d_2_tf1_pos + conv2d_2_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [159] #define conv2d_3_tf_raw texture5
[   2.507][d][vo/gpu/d3d11] [160] #define conv2d_3_tf_pos texcoord5
[   2.507][d][vo/gpu/d3d11] [161] #define conv2d_3_tf_size texture_size5
[   2.507][d][vo/gpu/d3d11] [162] #define conv2d_3_tf_rot texture_rot5
[   2.507][d][vo/gpu/d3d11] [163] #define conv2d_3_tf_off texture_off5
[   2.507][d][vo/gpu/d3d11] [164] #define conv2d_3_tf_pt pixel_size5
[   2.507][d][vo/gpu/d3d11] [165] #define conv2d_3_tf_map texmap5
[   2.507][d][vo/gpu/d3d11] [166] #define conv2d_3_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [167] #define conv2d_3_tf_tex(pos) (conv2d_3_tf_mul * vec4(texture(conv2d_3_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [168] #define conv2d_3_tf_gather(pos, c) (conv2d_3_tf_mul * vec4(textureGather(conv2d_3_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [169] #define conv2d_3_tf_texOff(off) conv2d_3_tf_tex(conv2d_3_tf_pos + conv2d_3_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [170] #define conv2d_3_tf1_raw texture6
[   2.507][d][vo/gpu/d3d11] [171] #define conv2d_3_tf1_pos texcoord6
[   2.507][d][vo/gpu/d3d11] [172] #define conv2d_3_tf1_size texture_size6
[   2.507][d][vo/gpu/d3d11] [173] #define conv2d_3_tf1_rot texture_rot6
[   2.507][d][vo/gpu/d3d11] [174] #define conv2d_3_tf1_off texture_off6
[   2.507][d][vo/gpu/d3d11] [175] #define conv2d_3_tf1_pt pixel_size6
[   2.507][d][vo/gpu/d3d11] [176] #define conv2d_3_tf1_map texmap6
[   2.507][d][vo/gpu/d3d11] [177] #define conv2d_3_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [178] #define conv2d_3_tf1_tex(pos) (conv2d_3_tf1_mul * vec4(texture(conv2d_3_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [179] #define conv2d_3_tf1_gather(pos, c) (conv2d_3_tf1_mul * vec4(textureGather(conv2d_3_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [180] #define conv2d_3_tf1_texOff(off) conv2d_3_tf1_tex(conv2d_3_tf1_pos + conv2d_3_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [181] #define conv2d_4_tf_raw texture7
[   2.507][d][vo/gpu/d3d11] [182] #define conv2d_4_tf_pos texcoord7
[   2.507][d][vo/gpu/d3d11] [183] #define conv2d_4_tf_size texture_size7
[   2.507][d][vo/gpu/d3d11] [184] #define conv2d_4_tf_rot texture_rot7
[   2.507][d][vo/gpu/d3d11] [185] #define conv2d_4_tf_off texture_off7
[   2.507][d][vo/gpu/d3d11] [186] #define conv2d_4_tf_pt pixel_size7
[   2.507][d][vo/gpu/d3d11] [187] #define conv2d_4_tf_map texmap7
[   2.507][d][vo/gpu/d3d11] [188] #define conv2d_4_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [189] #define conv2d_4_tf_tex(pos) (conv2d_4_tf_mul * vec4(texture(conv2d_4_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [190] #define conv2d_4_tf_gather(pos, c) (conv2d_4_tf_mul * vec4(textureGather(conv2d_4_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [191] #define conv2d_4_tf_texOff(off) conv2d_4_tf_tex(conv2d_4_tf_pos + conv2d_4_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [192] #define conv2d_4_tf1_raw texture8
[   2.507][d][vo/gpu/d3d11] [193] #define conv2d_4_tf1_pos texcoord8
[   2.507][d][vo/gpu/d3d11] [194] #define conv2d_4_tf1_size texture_size8
[   2.507][d][vo/gpu/d3d11] [195] #define conv2d_4_tf1_rot texture_rot8
[   2.507][d][vo/gpu/d3d11] [196] #define conv2d_4_tf1_off texture_off8
[   2.507][d][vo/gpu/d3d11] [197] #define conv2d_4_tf1_pt pixel_size8
[   2.507][d][vo/gpu/d3d11] [198] #define conv2d_4_tf1_map texmap8
[   2.507][d][vo/gpu/d3d11] [199] #define conv2d_4_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [200] #define conv2d_4_tf1_tex(pos) (conv2d_4_tf1_mul * vec4(texture(conv2d_4_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [201] #define conv2d_4_tf1_gather(pos, c) (conv2d_4_tf1_mul * vec4(textureGather(conv2d_4_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [202] #define conv2d_4_tf1_texOff(off) conv2d_4_tf1_tex(conv2d_4_tf1_pos + conv2d_4_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [203] #define conv2d_5_tf_raw texture9
[   2.507][d][vo/gpu/d3d11] [204] #define conv2d_5_tf_pos texcoord9
[   2.507][d][vo/gpu/d3d11] [205] #define conv2d_5_tf_size texture_size9
[   2.507][d][vo/gpu/d3d11] [206] #define conv2d_5_tf_rot texture_rot9
[   2.507][d][vo/gpu/d3d11] [207] #define conv2d_5_tf_off texture_off9
[   2.507][d][vo/gpu/d3d11] [208] #define conv2d_5_tf_pt pixel_size9
[   2.507][d][vo/gpu/d3d11] [209] #define conv2d_5_tf_map texmap9
[   2.507][d][vo/gpu/d3d11] [210] #define conv2d_5_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [211] #define conv2d_5_tf_tex(pos) (conv2d_5_tf_mul * vec4(texture(conv2d_5_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [212] #define conv2d_5_tf_gather(pos, c) (conv2d_5_tf_mul * vec4(textureGather(conv2d_5_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [213] #define conv2d_5_tf_texOff(off) conv2d_5_tf_tex(conv2d_5_tf_pos + conv2d_5_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [214] #define conv2d_5_tf1_raw texture10
[   2.507][d][vo/gpu/d3d11] [215] #define conv2d_5_tf1_pos texcoord10
[   2.507][d][vo/gpu/d3d11] [216] #define conv2d_5_tf1_size texture_size10
[   2.507][d][vo/gpu/d3d11] [217] #define conv2d_5_tf1_rot texture_rot10
[   2.507][d][vo/gpu/d3d11] [218] #define conv2d_5_tf1_off texture_off10
[   2.507][d][vo/gpu/d3d11] [219] #define conv2d_5_tf1_pt pixel_size10
[   2.507][d][vo/gpu/d3d11] [220] #define conv2d_5_tf1_map texmap10
[   2.507][d][vo/gpu/d3d11] [221] #define conv2d_5_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [222] #define conv2d_5_tf1_tex(pos) (conv2d_5_tf1_mul * vec4(texture(conv2d_5_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [223] #define conv2d_5_tf1_gather(pos, c) (conv2d_5_tf1_mul * vec4(textureGather(conv2d_5_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [224] #define conv2d_5_tf1_texOff(off) conv2d_5_tf1_tex(conv2d_5_tf1_pos + conv2d_5_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [225] #define conv2d_6_tf_raw texture11
[   2.507][d][vo/gpu/d3d11] [226] #define conv2d_6_tf_pos texcoord11
[   2.507][d][vo/gpu/d3d11] [227] #define conv2d_6_tf_size texture_size11
[   2.507][d][vo/gpu/d3d11] [228] #define conv2d_6_tf_rot texture_rot11
[   2.507][d][vo/gpu/d3d11] [229] #define conv2d_6_tf_off texture_off11
[   2.507][d][vo/gpu/d3d11] [230] #define conv2d_6_tf_pt pixel_size11
[   2.507][d][vo/gpu/d3d11] [231] #define conv2d_6_tf_map texmap11
[   2.507][d][vo/gpu/d3d11] [232] #define conv2d_6_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [233] #define conv2d_6_tf_tex(pos) (conv2d_6_tf_mul * vec4(texture(conv2d_6_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [234] #define conv2d_6_tf_gather(pos, c) (conv2d_6_tf_mul * vec4(textureGather(conv2d_6_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [235] #define conv2d_6_tf_texOff(off) conv2d_6_tf_tex(conv2d_6_tf_pos + conv2d_6_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [236] #define conv2d_6_tf1_raw texture12
[   2.507][d][vo/gpu/d3d11] [237] #define conv2d_6_tf1_pos texcoord12
[   2.507][d][vo/gpu/d3d11] [238] #define conv2d_6_tf1_size texture_size12
[   2.507][d][vo/gpu/d3d11] [239] #define conv2d_6_tf1_rot texture_rot12
[   2.507][d][vo/gpu/d3d11] [240] #define conv2d_6_tf1_off texture_off12
[   2.507][d][vo/gpu/d3d11] [241] #define conv2d_6_tf1_pt pixel_size12
[   2.507][d][vo/gpu/d3d11] [242] #define conv2d_6_tf1_map texmap12
[   2.507][d][vo/gpu/d3d11] [243] #define conv2d_6_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [244] #define conv2d_6_tf1_tex(pos) (conv2d_6_tf1_mul * vec4(texture(conv2d_6_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [245] #define conv2d_6_tf1_gather(pos, c) (conv2d_6_tf1_mul * vec4(textureGather(conv2d_6_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [246] #define conv2d_6_tf1_texOff(off) conv2d_6_tf1_tex(conv2d_6_tf1_pos + conv2d_6_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [247] #define conv2d_7_tf_raw texture13
[   2.507][d][vo/gpu/d3d11] [248] #define conv2d_7_tf_pos texcoord13
[   2.507][d][vo/gpu/d3d11] [249] #define conv2d_7_tf_size texture_size13
[   2.507][d][vo/gpu/d3d11] [250] #define conv2d_7_tf_rot texture_rot13
[   2.507][d][vo/gpu/d3d11] [251] #define conv2d_7_tf_off texture_off13
[   2.507][d][vo/gpu/d3d11] [252] #define conv2d_7_tf_pt pixel_size13
[   2.507][d][vo/gpu/d3d11] [253] #define conv2d_7_tf_map texmap13
[   2.507][d][vo/gpu/d3d11] [254] #define conv2d_7_tf_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [255] #define conv2d_7_tf_tex(pos) (conv2d_7_tf_mul * vec4(texture(conv2d_7_tf_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [256] #define conv2d_7_tf_gather(pos, c) (conv2d_7_tf_mul * vec4(textureGather(conv2d_7_tf_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [257] #define conv2d_7_tf_texOff(off) conv2d_7_tf_tex(conv2d_7_tf_pos + conv2d_7_tf_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [258] #define conv2d_7_tf1_raw texture14
[   2.507][d][vo/gpu/d3d11] [259] #define conv2d_7_tf1_pos texcoord14
[   2.507][d][vo/gpu/d3d11] [260] #define conv2d_7_tf1_size texture_size14
[   2.507][d][vo/gpu/d3d11] [261] #define conv2d_7_tf1_rot texture_rot14
[   2.507][d][vo/gpu/d3d11] [262] #define conv2d_7_tf1_off texture_off14
[   2.507][d][vo/gpu/d3d11] [263] #define conv2d_7_tf1_pt pixel_size14
[   2.507][d][vo/gpu/d3d11] [264] #define conv2d_7_tf1_map texmap14
[   2.507][d][vo/gpu/d3d11] [265] #define conv2d_7_tf1_mul 1.000000
[   2.507][d][vo/gpu/d3d11] [266] #define conv2d_7_tf1_tex(pos) (conv2d_7_tf1_mul * vec4(texture(conv2d_7_tf1_raw, pos)).rgba)
[   2.507][d][vo/gpu/d3d11] [267] #define conv2d_7_tf1_gather(pos, c) (conv2d_7_tf1_mul * vec4(textureGather(conv2d_7_tf1_raw, pos, c)))
[   2.507][d][vo/gpu/d3d11] [268] #define conv2d_7_tf1_texOff(off) conv2d_7_tf1_tex(conv2d_7_tf1_pos + conv2d_7_tf1_pt * vec2(off))
[   2.507][d][vo/gpu/d3d11] [269] #define g_0 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [270] #define g_1 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [271] #define g_2 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [272] #define g_3 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [273] #define g_4 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [274] #define g_5 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [275] #define g_6 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [276] #define g_7 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [277] #define g_8 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [278] #define g_9 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   2.507][d][vo/gpu/d3d11] [279] #define g_10 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [280] #define g_11 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [281] #define g_12 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [282] #define g_13 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [283] #define g_14 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [284] #define g_15 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [285] #define g_16 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [286] #define g_17 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [287] #define g_18 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [288] #define g_19 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [289] #define g_20 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [290] #define g_21 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [291] #define g_22 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [292] #define g_23 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [293] #define g_24 (max((conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [294] #define g_25 (max((conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [295] #define g_26 (max(-(conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [296] #define g_27 (max(-(conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   2.508][d][vo/gpu/d3d11] [297] vec4 hook() {
[   2.508][d][vo/gpu/d3d11] [298]     vec4 result = mat4(0.09689336, 0.06046458, 0.072598994, 0.0, 0.11994565, 0.104477674, 0.09302802, 0.0, -0.05718302, 0.050438102, 0.08814741, 0.0, 0.0308889, 0.0033925986, -0.01715605, 0.0) * g_0;
[   2.508][d][vo/gpu/d3d11] [299]     result += mat4(-0.028314235, 0.06597744, 0.0966897, 0.0, 0.035656154, 0.07770106, 0.075551905, 0.0, 0.0001793458, -0.000479495, -0.00297406, 0.0, -0.053916585, -0.016807461, -0.0057141334, 0.0) * g_1;
[   2.508][d][vo/gpu/d3d11] [300]     result += mat4(-0.047189303, -0.0207, -0.020910334, 0.0, -0.07933196, -0.06961211, -0.086069845, 0.0, 0.0943727, 0.008463375, 0.010755166, 0.0, 0.062410597, 0.022625161, 0.04068433, 0.0) * g_2;
[   2.508][d][vo/gpu/d3d11] [301]     result += mat4(0.10270994, -0.019080428, 0.0050091282, 0.0, -0.004672948, -0.013966742, -0.0063746064, 0.0, -2.5856789e-05, 0.03151499, -0.0023983798, 0.0, 0.113539025, 0.12381699, 0.100360274, 0.0) * g_3;
[   2.508][d][vo/gpu/d3d11] [302]     result += mat4(0.07868885, -0.030913834, -0.009213676, 0.0, 0.04870991, 0.021467991, 0.038739506, 0.0, -0.042969644, -0.07122453, -0.08798675, 0.0, -0.09784122, 0.021434791, 0.02510374, 0.0) * g_4;
[   2.508][d][vo/gpu/d3d11] [303]     result += mat4(0.050420716, 0.0729716, 0.076532185, 0.0, -0.019112485, -0.01037939, -0.026948035, 0.0, -0.02591423, 0.008927897, -0.00042541025, 0.0, 0.1043701, -0.0071186824, -0.041817162, 0.0) * g_5;
[   2.508][d][vo/gpu/d3d11] [304]     result += mat4(-0.16143242, -0.0009298223, -0.01228508, 0.0, 0.07744052, -0.018313263, -0.0488145, 0.0, 0.09241393, 0.07128674, 0.055164956, 0.0, 0.054884013, -0.04834418, -0.06281626, 0.0) * g_6;
[   2.508][d][vo/gpu/d3d11] [305]     result += mat4(-0.049036566, -0.05979936, -0.05594288, 0.0, -0.014564307, 0.031926468, 0.037857566, 0.0, 0.015474487, -0.11385003, -0.11527764, 0.0, -0.07076006, 0.057038613, 0.095983796, 0.0) * g_7;
[   2.508][d][vo/gpu/d3d11] [306]     result += mat4(0.03094887, -0.008734403, 0.00042712069, 0.0, 0.053891554, 0.05837673, 0.06200635, 0.0, 0.09071558, -0.04202184, -0.046172567, 0.0, -0.0425916, 0.04905093, 0.020835675, 0.0) * g_8;
[   2.508][d][vo/gpu/d3d11] [307]     result += mat4(0.096628904, -0.037792254, -0.043241944, 0.0, -0.011923947, -0.025950424, -0.031381752, 0.0, -0.060941868, -0.07859433, -0.07535451, 0.0, -0.026777223, 0.08604982, 0.07829908, 0.0) * g_9;
[   2.508][d][vo/gpu/d3d11] [308]     result += mat4(-0.06435972, 0.0036599538, 0.00786578, 0.0, -0.061972067, -0.05681472, -0.06667608, 0.0, -0.106890626, 0.007406496, 0.029977169, 0.0, -0.20519382, -0.044860814, 0.0021225857, 0.0) * g_10;
[   2.508][d][vo/gpu/d3d11] [309]     result += mat4(-0.16876474, 0.012789643, 0.026692612, 0.0, 0.017817136, 0.026935097, 0.02227043, 0.0, 0.01690181, 0.07716103, 0.086527, 0.0, 0.07923805, -0.10443151, -0.10859543, 0.0) * g_11;
[   2.508][d][vo/gpu/d3d11] [310]     result += mat4(0.003730466, -0.024648283, -0.022169832, 0.0, -0.0062762927, 0.022062732, 0.032966793, 0.0, 0.016349113, 0.017197203, 0.020952817, 0.0, -0.1763789, 0.035497356, 0.053835396, 0.0) * g_12;
[   2.508][d][vo/gpu/d3d11] [311]     result += mat4(0.020886675, -0.07054202, -0.079142675, 0.0, 0.06664387, 0.044960167, 0.042230908, 0.0, -0.095019594, 0.012421141, 0.0142890485, 0.0, 0.056814816, -0.012751135, -0.014684506, 0.0) * g_13;
[   2.508][d][vo/gpu/d3d11] [312]     result += mat4(0.011765893, 0.0008920681, -0.0018258415, 0.0, -0.010473814, -0.023085753, -0.028783914, 0.0, -0.023034256, -0.0024786016, -0.0052162083, 0.0, 0.1643386, -0.06132718, -0.09289065, 0.0) * g_14;
[   2.508][d][vo/gpu/d3d11] [313]     result += mat4(0.016597198, 0.09389637, 0.10833379, 0.0, -0.043163072, -0.04714812, -0.035274632, 0.0, 0.09634976, -0.009292612, -0.022424143, 0.0, -0.08765172, 0.0051558353, 0.010900356, 0.0) * g_15;
[   2.508][d][vo/gpu/d3d11] [314]     result += mat4(0.030815786, 0.021069322, 0.01812191, 0.0, 0.084839165, -0.0080813095, -0.029270556, 0.0, -0.10456346, 0.062386703, 0.0665605, 0.0, 0.11926609, -0.1104228, -0.13291118, 0.0) * g_16;
[   2.508][d][vo/gpu/d3d11] [315]     result += mat4(-0.07159541, -0.007267032, -0.010134558, 0.0, 0.008234213, 0.045609634, 0.040295456, 0.0, 0.018416971, 0.01308482, 0.014649557, 0.0, 0.035107512, -0.02140815, -0.030279048, 0.0) * g_17;
[   2.508][d][vo/gpu/d3d11] [316]     result += mat4(0.01918586, 0.03875863, 0.03229402, 0.0, -0.07917104, 0.041135103, 0.057182517, 0.0, 0.08609541, 0.0079662455, 0.004327576, 0.0, -0.14332893, 0.03120354, 0.056732506, 0.0) * g_18;
[   2.508][d][vo/gpu/d3d11] [317]     result += mat4(0.03200192, -0.0035752193, -0.0031064528, 0.0, -0.010902813, 0.014607456, 0.019431474, 0.0, -0.016461229, -0.004938204, -0.004655488, 0.0, -0.033470232, 0.0026075812, 0.005896968, 0.0) * g_19;
[   2.508][d][vo/gpu/d3d11] [318]     result += mat4(0.037410006, 0.048742272, 0.04348088, 0.0, 0.037719514, 0.030768529, 0.03127472, 0.0, 0.056426726, 0.03066893, 0.016440205, 0.0, -0.010599352, 0.022832409, 0.023211194, 0.0) * g_20;
[   2.508][d][vo/gpu/d3d11] [319]     result += mat4(-0.005733291, 0.06365659, 0.06663611, 0.0, -0.041917093, -0.016493445, -0.020438088, 0.0, -0.0014357592, -0.0022506563, -0.0045095007, 0.0, 0.029893145, -0.009129354, -0.015173116, 0.0) * g_21;
[   2.508][d][vo/gpu/d3d11] [320]     result += mat4(0.013052085, 0.005108175, 0.0025906067, 0.0, -0.021950055, -0.036447693, -0.036141638, 0.0, -0.036296472, 0.0068928464, 0.013102313, 0.0, 0.0060471976, -0.024798103, -0.023548538, 0.0) * g_22;
[   2.508][d][vo/gpu/d3d11] [321]     result += mat4(0.0067743887, -0.06191211, -0.062355213, 0.0, 0.0016080744, -0.020445071, -0.016840393, 0.0, 0.028264903, 0.01852915, 0.015891539, 0.0, -0.023877412, -0.013271666, -0.008158679, 0.0) * g_23;
[   2.508][d][vo/gpu/d3d11] [322]     result += mat4(-0.04317466, -0.018953001, -0.020452993, 0.0, -0.009322576, -0.03022352, -0.030970376, 0.0, 0.05653658, 0.05430553, 0.046692245, 0.0, 0.05615359, 0.059338935, 0.056018773, 0.0) * g_24;
[   2.508][d][vo/gpu/d3d11] [323]     result += mat4(0.022878079, 0.03392234, 0.033057988, 0.0, -0.017554542, -0.0141542535, -0.014122613, 0.0, -0.048634093, -0.05316463, -0.047988772, 0.0, -0.058002178, -0.040221967, -0.034025013, 0.0) * g_25;
[   2.508][d][vo/gpu/d3d11] [324]     result += mat4(-0.018253656, -0.04197674, -0.040467236, 0.0, -0.04358929, -0.028309818, -0.025425073, 0.0, -0.008488672, -0.001727991, 0.00035808363, 0.0, -0.0011709273, 0.0052514165, 0.0059479307, 0.0) * g_26;
[   2.508][d][vo/gpu/d3d11] [325]     result += mat4(-0.08333935, -0.09818201, -0.09476284, 0.0, -0.033692095, -0.046259012, -0.045797516, 0.0, -0.007577072, 0.0022402718, 0.0016200038, 0.0, 0.0029786075, -0.020728534, -0.018938033, 0.0) * g_27;
[   2.508][d][vo/gpu/d3d11] [326]     result += vec4(0.047567394, -0.02504617, -0.028163986, 0.0);
[   2.508][d][vo/gpu/d3d11] [327]     return result + MAIN_tex(MAIN_pos);
[   2.508][d][vo/gpu/d3d11] [328] }
[   2.508][d][vo/gpu/d3d11] [329] void main() {
[   2.508][d][vo/gpu/d3d11] [330] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.508][d][vo/gpu/d3d11] [331] color = hook();
[   2.508][d][vo/gpu/d3d11] [332] color.a = 1.000000;
[   2.508][d][vo/gpu/d3d11] [333] out_color = color;
[   2.508][d][vo/gpu/d3d11] [334] }
[   2.508][d][vo/gpu/d3d11] HLSL source:
[   2.508][d][vo/gpu/d3d11] [  1] Texture2D<float4> _36 : register(t1);
[   2.508][d][vo/gpu/d3d11] [  2] SamplerState __36_sampler : register(s1);
[   2.508][d][vo/gpu/d3d11] [  3] Texture2D<float4> _69 : register(t2);
[   2.508][d][vo/gpu/d3d11] [  4] SamplerState __69_sampler : register(s2);
[   2.508][d][vo/gpu/d3d11] [  5] Texture2D<float4> _166 : register(t3);
[   2.508][d][vo/gpu/d3d11] [  6] SamplerState __166_sampler : register(s3);
[   2.508][d][vo/gpu/d3d11] [  7] Texture2D<float4> _199 : register(t4);
[   2.508][d][vo/gpu/d3d11] [  8] SamplerState __199_sampler : register(s4);
[   2.508][d][vo/gpu/d3d11] [  9] Texture2D<float4> _296 : register(t5);
[   2.508][d][vo/gpu/d3d11] [ 10] SamplerState __296_sampler : register(s5);
[   2.508][d][vo/gpu/d3d11] [ 11] Texture2D<float4> _329 : register(t6);
[   2.508][d][vo/gpu/d3d11] [ 12] SamplerState __329_sampler : register(s6);
[   2.508][d][vo/gpu/d3d11] [ 13] Texture2D<float4> _426 : register(t7);
[   2.508][d][vo/gpu/d3d11] [ 14] SamplerState __426_sampler : register(s7);
[   2.508][d][vo/gpu/d3d11] [ 15] Texture2D<float4> _459 : register(t8);
[   2.508][d][vo/gpu/d3d11] [ 16] SamplerState __459_sampler : register(s8);
[   2.508][d][vo/gpu/d3d11] [ 17] Texture2D<float4> _556 : register(t9);
[   2.508][d][vo/gpu/d3d11] [ 18] SamplerState __556_sampler : register(s9);
[   2.508][d][vo/gpu/d3d11] [ 19] Texture2D<float4> _589 : register(t10);
[   2.508][d][vo/gpu/d3d11] [ 20] SamplerState __589_sampler : register(s10);
[   2.508][d][vo/gpu/d3d11] [ 21] Texture2D<float4> _686 : register(t11);
[   2.508][d][vo/gpu/d3d11] [ 22] SamplerState __686_sampler : register(s11);
[   2.508][d][vo/gpu/d3d11] [ 23] Texture2D<float4> _719 : register(t12);
[   2.508][d][vo/gpu/d3d11] [ 24] SamplerState __719_sampler : register(s12);
[   2.508][d][vo/gpu/d3d11] [ 25] Texture2D<float4> _816 : register(t13);
[   2.508][d][vo/gpu/d3d11] [ 26] SamplerState __816_sampler : register(s13);
[   2.508][d][vo/gpu/d3d11] [ 27] Texture2D<float4> _849 : register(t14);
[   2.508][d][vo/gpu/d3d11] [ 28] SamplerState __849_sampler : register(s14);
[   2.508][d][vo/gpu/d3d11] [ 29] Texture2D<float4> _936 : register(t0);
[   2.508][d][vo/gpu/d3d11] [ 30] SamplerState __936_sampler : register(s0);
[   2.508][d][vo/gpu/d3d11] [ 31] 
[   2.508][d][vo/gpu/d3d11] [ 32] static float2 _40;
[   2.508][d][vo/gpu/d3d11] [ 33] static float2 _71;
[   2.508][d][vo/gpu/d3d11] [ 34] static float2 _168;
[   2.508][d][vo/gpu/d3d11] [ 35] static float2 _201;
[   2.508][d][vo/gpu/d3d11] [ 36] static float2 _298;
[   2.508][d][vo/gpu/d3d11] [ 37] static float2 _331;
[   2.508][d][vo/gpu/d3d11] [ 38] static float2 _428;
[   2.508][d][vo/gpu/d3d11] [ 39] static float2 _461;
[   2.508][d][vo/gpu/d3d11] [ 40] static float2 _558;
[   2.508][d][vo/gpu/d3d11] [ 41] static float2 _591;
[   2.508][d][vo/gpu/d3d11] [ 42] static float2 _688;
[   2.508][d][vo/gpu/d3d11] [ 43] static float2 _721;
[   2.508][d][vo/gpu/d3d11] [ 44] static float2 _818;
[   2.508][d][vo/gpu/d3d11] [ 45] static float2 _851;
[   2.508][d][vo/gpu/d3d11] [ 46] static float2 _938;
[   2.508][d][vo/gpu/d3d11] [ 47] static float4 _958;
[   2.508][d][vo/gpu/d3d11] [ 48] 
[   2.508][d][vo/gpu/d3d11] [ 49] struct SPIRV_Cross_Input
[   2.508][d][vo/gpu/d3d11] [ 50] {
[   2.508][d][vo/gpu/d3d11] [ 51]     float2 _938 : TEXCOORD1;
[   2.508][d][vo/gpu/d3d11] [ 52]     float2 _40 : TEXCOORD2;
[   2.508][d][vo/gpu/d3d11] [ 53]     float2 _71 : TEXCOORD3;
[   2.508][d][vo/gpu/d3d11] [ 54]     float2 _168 : TEXCOORD4;
[   2.508][d][vo/gpu/d3d11] [ 55]     float2 _201 : TEXCOORD5;
[   2.508][d][vo/gpu/d3d11] [ 56]     float2 _298 : TEXCOORD6;
[   2.508][d][vo/gpu/d3d11] [ 57]     float2 _331 : TEXCOORD7;
[   2.508][d][vo/gpu/d3d11] [ 58]     float2 _428 : TEXCOORD8;
[   2.508][d][vo/gpu/d3d11] [ 59]     float2 _461 : TEXCOORD9;
[   2.508][d][vo/gpu/d3d11] [ 60]     float2 _558 : TEXCOORD10;
[   2.508][d][vo/gpu/d3d11] [ 61]     float2 _591 : TEXCOORD11;
[   2.508][d][vo/gpu/d3d11] [ 62]     float2 _688 : TEXCOORD12;
[   2.508][d][vo/gpu/d3d11] [ 63]     float2 _721 : TEXCOORD13;
[   2.508][d][vo/gpu/d3d11] [ 64]     float2 _818 : TEXCOORD14;
[   2.508][d][vo/gpu/d3d11] [ 65]     float2 _851 : TEXCOORD15;
[   2.508][d][vo/gpu/d3d11] [ 66] };
[   2.508][d][vo/gpu/d3d11] [ 67] 
[   2.508][d][vo/gpu/d3d11] [ 68] struct SPIRV_Cross_Output
[   2.508][d][vo/gpu/d3d11] [ 69] {
[   2.508][d][vo/gpu/d3d11] [ 70]     float4 _958 : SV_Target0;
[   2.508][d][vo/gpu/d3d11] [ 71] };
[   2.508][d][vo/gpu/d3d11] [ 72] 
[   2.508][d][vo/gpu/d3d11] [ 73] void frag_main()
[   2.508][d][vo/gpu/d3d11] [ 74] {
[   2.508][d][vo/gpu/d3d11] [ 75]     float4 _976 = _36.Sample(__36_sampler, _40) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 76]     float4 _988 = _69.Sample(__69_sampler, _71) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 77]     float4 _1032 = _166.Sample(__166_sampler, _168) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 78]     float4 _1046 = _199.Sample(__199_sampler, _201) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 79]     float4 _1090 = _296.Sample(__296_sampler, _298) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 80]     float4 _1104 = _329.Sample(__329_sampler, _331) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 81]     float4 _1148 = _426.Sample(__426_sampler, _428) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 82]     float4 _1162 = _459.Sample(__459_sampler, _461) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 83]     float4 _1206 = _556.Sample(__556_sampler, _558) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 84]     float4 _1220 = _589.Sample(__589_sampler, _591) * 1.0f;
[   2.508][d][vo/gpu/d3d11] [ 85]     float4 _1225 = ((((((((((((((((mul(max(_976, 0.0f.xxxx), float4x4(float4(0.096893362700939178466796875f, 0.0604645796120166778564453125f, 0.072598993778228759765625f, 0.0f), float4(0.119945652782917022705078125f, 0.1044776737689971923828125f, 0.093028016388416290283203125f, 0.0f), float4(-0.057183019816875457763671875f, 0.0504381023347377777099609375f, 0.088147409260272979736328125f, 0.0f), float4(0.03088890016078948974609375f, 0.003392598591744899749755859375f, -0.01715604960918426513671875f, 0.0f))) + mul(max(_988, 0.0f.xxxx), float4x4(float4(-0.02831423468887805938720703125f, 0.06597743928432464599609375f, 0.096689701080322265625f, 0.0f), float4(0.035656154155731201171875f, 0.0777010619640350341796875f, 0.075551904737949371337890625f, 0.0f), float4(0.00017934580682776868343353271484375f, -0.00047949500731192529201507568359375f, -0.0029740598984062671661376953125f, 0.0f), float4(-0.0539165847003459930419921875f, -0.01680746115744113922119140625f, -0.00571413338184356689453125f, 0.0f)))) + mul(max(-_976, 0.0f.xxxx), float4x4(float4(-0.047189302742481231689453125f, -0.020700000226497650146484375f, -0.0209103338420391082763671875f, 0.0f), float4(-0.079331956803798675537109375f, -0.069612108170986175537109375f, -0.086069844663143157958984375f, 0.0f), float4(0.094372697174549102783203125f, 0.008463375270366668701171875f, 0.01075516641139984130859375f, 0.0f), float4(0.0624105967581272125244140625f, 0.02262516133487224578857421875f, 0.0406843312084674835205078125f, 0.0f)))) + mul(max(-_988, 0.0f.xxxx), float4x4(float4(0.102709941565990447998046875f, -0.01908042840659618377685546875f, 0.0050091282464563846588134765625f, 0.0f), float4(-0.0046729478053748607635498046875f, -0.013966741971671581268310546875f, -0.0063746063970029354095458984375f, 0.0f), float4(-2.5856788852252066135406494140625e-05f, 0.0315149910748004913330078125f, -0.00239837984554469585418701171875f, 0.0f), float4(0.11353902518749237060546875f, 0.123816989362239837646484375f, 0.10036027431488037109375f, 0.0f)))) + mul(max(_1032, 0.0f.xxxx), float4x4(float4(0.078688852488994598388671875f, -0.0309138335287570953369140625f, -0.009213675744831562042236328125f, 0.0f), float4(0.0487099103629589080810546875f, 0.021467991173267364501953125f, 0.0387395061552524566650390625f, 0.0f), float4(-0.042969644069671630859375f, -0.071224533021450042724609375f, -0.08798675239086151123046875f, 0.0f), float4(-0.09784121811389923095703125f, 0.021434791386127471923828125f, 0.025103740394115447998046875f, 0.0f)))) + mul(max(_1046, 0.0f.xxxx), float4x4(float4(0.05042071640491485595703125f, 0.07297159731388092041015625f, 0.076532185077667236328125f, 0.0f), float4(-0.01911248452961444854736328125f, -0.010379389859735965728759765625f, -0.026948034763336181640625f, 0.0f), float4(-0.025914229452610015869140625f, 0.00892789661884307861328125f, -0.00042541025322861969470977783203125f, 0.0f), float4(0.10437010228633880615234375f, -0.007118682377040386199951171875f, -0.0418171621859073638916015625f, 0.0f)))) + mul(max(-_1032, 0.0f.xxxx), float4x4(float4(-0.1614324152469635009765625f, -0.0009298222721554338932037353515625f, -0.0122850798070430755615234375f, 0.0f), float4(0.077440522611141204833984375f, -0.0183132626116275787353515625f, -0.0488145016133785247802734375f, 0.0f), float4(0.0924139320850372314453125f, 0.071286737918853759765625f, 0.055164955556392669677734375f, 0.0f), float4(0.0548840127885341644287109375f, -0.04834417998790740966796875f, -0.06281626224517822265625f, 0.0f)))) + mul(max(-_1046, 0.0f.xxxx), float4x4(float4(-0.0490365661680698394775390625f, -0.05979935824871063232421875f, -0.0559428818523883819580078125f, 0.0f), float4(-0.01456430740654468536376953125f, 0.03192646801471710205078125f, 0.0378575660288333892822265625f, 0.0f), float4(0.0154744870960712432861328125f, -0.1138500273227691650390625f, -0.115277640521526336669921875f, 0.0f), float4(-0.07076005637645721435546875f, 0.057038612663745880126953125f, 0.095983795821666717529296875f, 0.0f)))) + mul(max(_1090, 0.0f.xxxx), float4x4(float4(0.030948869884014129638671875f, -0.00873440317809581756591796875f, 0.00042712068534456193447113037109375f, 0.0f), float4(0.05389155447483062744140625f, 0.058376729488372802734375f, 0.0620063506066799163818359375f, 0.0f), float4(0.090715579688549041748046875f, -0.0420218408107757568359375f, -0.046172566711902618408203125f, 0.0f), float4(-0.0425916016101837158203125f, 0.0490509308874607086181640625f, 0.020835675299167633056640625f, 0.0f)))) + mul(max(_1104, 0.0f.xxxx), float4x4(float4(0.0966289043426513671875f, -0.0377922542393207550048828125f, -0.0432419441640377044677734375f, 0.0f), float4(-0.011923947371542453765869140625f, -0.025950424373149871826171875f, -0.0313817523419857025146484375f, 0.0f), float4(-0.060941867530345916748046875f, -0.07859432697296142578125f, -0.075354509055614471435546875f, 0.0f), float4(-0.02677722275257110595703125f, 0.086049817502498626708984375f, 0.078299082815647125244140625f, 0.0f)))) + mul(max(-_1090, 0.0f.xxxx), float4x4(float4(-0.064359717071056365966796875f, 0.0036599538289010524749755859375f, 0.007865780033171176910400390625f, 0.0f), float4(-0.06197206676006317138671875f, -0.0568147189915180206298828125f, -0.066676080226898193359375f, 0.0f), float4(-0.106890626251697540283203125f, 0.0074064959771931171417236328125f, 0.0299771688878536224365234375f, 0.0f), float4(-0.205193817615509033203125f, -0.0448608137667179107666015625f, 0.002122585661709308624267578125f, 0.0f)))) + mul(max(-_1104, 0.0f.xxxx), float4x4(float4(-0.1687647402286529541015625f, 0.012789643369615077972412109375f, 0.02669261209666728973388671875f, 0.0f), float4(0.0178171359002590179443359375f, 0.0269350968301296234130859375f, 0.0222704298794269561767578125f, 0.0f), float4(0.0169018097221851348876953125f, 0.07716102898120880126953125f, 0.086526997387409210205078125f, 0.0f), float4(0.079238049685955047607421875f, -0.10443150997161865234375f, -0.108595430850982666015625f, 0.0f)))) + mul(max(_1148, 0.0f.xxxx), float4x4(float4(0.00373046589083969593048095703125f, -0.0246482826769351959228515625f, -0.0221698321402072906494140625f, 0.0f), float4(-0.00627629272639751434326171875f, 0.02206273190677165985107421875f, 0.032966792583465576171875f, 0.0f), float4(0.01634911261498928070068359375f, 0.0171972028911113739013671875f, 0.0209528170526027679443359375f, 0.0f), float4(-0.176378905773162841796875f, 0.0354973562061786651611328125f, 0.0538353957235813140869140625f, 0.0f)))) + mul(max(_1162, 0.0f.xxxx), float4x4(float4(0.02088667452335357666015625f, -0.07054202258586883544921875f, -0.07914267480373382568359375f, 0.0f), float4(0.066643871366977691650390625f, 0.0449601672589778900146484375f, 0.0422309078276157379150390625f, 0.0f), float4(-0.09501959383487701416015625f, 0.012421141378581523895263671875f, 0.014289048500359058380126953125f, 0.0f), float4(0.0568148158490657806396484375f, -0.012751135043799877166748046875f, -0.014684505760669708251953125f, 0.0f)))) + mul(max(-_1148, 0.0f.xxxx), float4x4(float4(0.011765892617404460906982421875f, 0.0008920680847950279712677001953125f, -0.001825841492973268032073974609375f, 0.0f), float4(-0.0104738138616085052490234375f, -0.02308575250208377838134765625f, -0.0287839137017726898193359375f, 0.0f), float4(-0.0230342559516429901123046875f, -0.00247860164381563663482666015625f, -0.005216208286583423614501953125f, 0.0f), float4(0.16433860361576080322265625f, -0.061327181756496429443359375f, -0.0928906500339508056640625f, 0.0f)))) + mul(max(-_1162, 0.0f.xxxx), float4x4(float4(0.01659719832241535186767578125f, 0.093896366655826568603515625f, 0.108333788812160491943359375f, 0.0f), float4(-0.0431630723178386688232421875f, -0.0471481196582317352294921875f, -0.035274632275104522705078125f, 0.0f), float4(0.09634976089000701904296875f, -0.00929261185228824615478515625f, -0.0224241428077220916748046875f, 0.0f), float4(-0.087651722133159637451171875f, 0.0051558353006839752197265625f, 0.010900355875492095947265625f, 0.0f)))) + mul(max(_1206, 0.0f.xxxx), float4x4(float4(0.03081578575074672698974609375f, 0.0210693217813968658447265625f, 0.0181219093501567840576171875f, 0.0f), float4(0.084839165210723876953125f, -0.008081309497356414794921875f, -0.0292705558240413665771484375f, 0.0f), float4(-0.10456345975399017333984375f, 0.0623867027461528778076171875f, 0.066560499370098114013671875f, 0.0f), float4(0.119266092777252197265625f, -0.110422797501087188720703125f, -0.1329111754894256591796875f, 0.0f)))) + mul(max(_1220, 0.0f.xxxx), float4x4(float4(-0.071595408022403717041015625f, -0.0072670318186283111572265625f, -0.010134558193385601043701171875f, 0.0f), float4(0.008234213106334209442138671875f, 0.0456096343696117401123046875f, 0.0402954556047916412353515625f, 0.0f), float4(0.0184169709682464599609375f, 0.01308481954038143157958984375f, 0.01464955694973468780517578125f, 0.0f), float4(0.0351075120270252227783203125f, -0.02140814997255802154541015625f, -0.030279047787189483642578125f, 0.0f)));
[   2.509][d][vo/gpu/d3d11] [ 86]     float4 _1264 = _686.Sample(__686_sampler, _688) * 1.0f;
[   2.509][d][vo/gpu/d3d11] [ 87]     float4 _1278 = _719.Sample(__719_sampler, _721) * 1.0f;
[   2.509][d][vo/gpu/d3d11] [ 88]     float4 _1322 = _816.Sample(__816_sampler, _818) * 1.0f;
[   2.509][d][vo/gpu/d3d11] [ 89]     float4 _1336 = _849.Sample(__849_sampler, _851) * 1.0f;
[   2.509][d][vo/gpu/d3d11] [ 90]     float4 _1384 = (((((((((((_1225 + mul(max(-_1206, 0.0f.xxxx), float4x4(float4(0.0191858597099781036376953125f, 0.0387586317956447601318359375f, 0.03229402005672454833984375f, 0.0f), float4(-0.079171039164066314697265625f, 0.0411351025104522705078125f, 0.0571825169026851654052734375f, 0.0f), float4(0.08609540760517120361328125f, 0.007966245524585247039794921875f, 0.0043275761418044567108154296875f, 0.0f), float4(-0.1433289349079132080078125f, 0.03120354004204273223876953125f, 0.0567325055599212646484375f, 0.0f)))) + mul(max(-_1220, 0.0f.xxxx), float4x4(float4(0.032001920044422149658203125f, -0.0035752193070948123931884765625f, -0.00310645275749266147613525390625f, 0.0f), float4(-0.01090281270444393157958984375f, 0.0146074555814266204833984375f, 0.01943147368729114532470703125f, 0.0f), float4(-0.01646122895181179046630859375f, -0.0049382038414478302001953125f, -0.004655487835407257080078125f, 0.0f), float4(-0.0334702320396900177001953125f, 0.002607581205666065216064453125f, 0.005896967835724353790283203125f, 0.0f)))) + mul(max(_1264, 0.0f.xxxx), float4x4(float4(0.03741000592708587646484375f, 0.048742271959781646728515625f, 0.043480880558490753173828125f, 0.0f), float4(0.0377195142209529876708984375f, 0.03076852858066558837890625f, 0.03127472102642059326171875f, 0.0f), float4(0.056426726281642913818359375f, 0.03066892921924591064453125f, 0.016440205276012420654296875f, 0.0f), float4(-0.010599352419376373291015625f, 0.02283240854740142822265625f, 0.02321119420230388641357421875f, 0.0f)))) + mul(max(_1278, 0.0f.xxxx), float4x4(float4(-0.0057332911528646945953369140625f, 0.063656590878963470458984375f, 0.066636107861995697021484375f, 0.0f), float4(-0.041917093098163604736328125f, -0.01649344526231288909912109375f, -0.02043808810412883758544921875f, 0.0f), float4(-0.00143575924448668956756591796875f, -0.00225065625272691249847412109375f, -0.0045095006935298442840576171875f, 0.0f), float4(0.02989314496517181396484375f, -0.009129353798925876617431640625f, -0.015173115767538547515869140625f, 0.0f)))) + mul(max(-_1264, 0.0f.xxxx), float4x4(float4(0.01305208541452884674072265625f, 0.005108174867928028106689453125f, 0.00259060668759047985076904296875f, 0.0f), float4(-0.0219500549137592315673828125f, -0.0364476926624774932861328125f, -0.0361416377127170562744140625f, 0.0f), float4(-0.03629647195339202880859375f, 0.0068928464315831661224365234375f, 0.013102312572300434112548828125f, 0.0f), float4(0.006047197617590427398681640625f, -0.024798102676868438720703125f, -0.02354853786528110504150390625f, 0.0f)))) + mul(max(-_1278, 0.0f.xxxx), float4x4(float4(0.0067743887193500995635986328125f, -0.0619121082127094268798828125f, -0.062355212867259979248046875f, 0.0f), float4(0.00160807440988719463348388671875f, -0.020445071160793304443359375f, -0.01684039272367954254150390625f, 0.0f), float4(0.028264902532100677490234375f, 0.0185291506350040435791015625f, 0.01589153893291950225830078125f, 0.0f), float4(-0.0238774120807647705078125f, -0.013271666131913661956787109375f, -0.008158679120242595672607421875f, 0.0f)))) + mul(max(_1322, 0.0f.xxxx), float4x4(float4(-0.043174661695957183837890625f, -0.01895300112664699554443359375f, -0.02045299299061298370361328125f, 0.0f), float4(-0.009322576224803924560546875f, -0.03022352047264575958251953125f, -0.0309703759849071502685546875f, 0.0f), float4(0.0565365813672542572021484375f, 0.054305531084537506103515625f, 0.046692244708538055419921875f, 0.0f), float4(0.0561535917222499847412109375f, 0.059338934719562530517578125f, 0.0560187734663486480712890625f, 0.0f)))) + mul(max(_1336, 0.0f.xxxx), float4x4(float4(0.02287807874381542205810546875f, 0.0339223407208919525146484375f, 0.033057987689971923828125f, 0.0f), float4(-0.01755454204976558685302734375f, -0.01415425352752208709716796875f, -0.014122612774372100830078125f, 0.0f), float4(-0.0486340932548046112060546875f, -0.0531646311283111572265625f, -0.04798877239227294921875f, 0.0f), float4(-0.0580021776258945465087890625f, -0.040221966803073883056640625f, -0.034025013446807861328125f, 0.0f)))) + mul(max(-_1322, 0.0f.xxxx), float4x4(float4(-0.01825365610420703887939453125f, -0.0419767387211322784423828125f, -0.0404672361910343170166015625f, 0.0f), float4(-0.0435892902314662933349609375f, -0.0283098183572292327880859375f, -0.0254250727593898773193359375f, 0.0f), float4(-0.00848867185413837432861328125f, -0.00172799103893339633941650390625f, 0.000358083634637296199798583984375f, 0.0f), float4(-0.001170927309431135654449462890625f, 0.0052514164708554744720458984375f, 0.00594793073832988739013671875f, 0.0f)))) + mul(max(-_1336, 0.0f.xxxx), float4x4(float4(-0.08333934843540191650390625f, -0.09818200767040252685546875f, -0.094762839376926422119140625f, 0.0f), float4(-0.0336920954287052154541015625f, -0.0462590120732784271240234375f, -0.0457975156605243682861328125f, 0.0f), float4(-0.007577071897685527801513671875f, 0.0022402717731893062591552734375f, 0.001620003837160766124725341796875f, 0.0f), float4(0.0029786075465381145477294921875f, -0.02072853408753871917724609375f, -0.01893803291022777557373046875f, 0.0f)))) + float4(0.0475673936307430267333984375f, -0.025046169757843017578125f, -0.02816398628056049346923828125f, 0.0f)) + (_936.Sample(__936_sampler, _938) * 1.0f);
[   2.509][d][vo/gpu/d3d11] [ 91]     _1384.w = 1.0f;
[   2.509][d][vo/gpu/d3d11] [ 92]     _958 = _1384;
[   2.509][d][vo/gpu/d3d11] [ 93] }
[   2.509][d][vo/gpu/d3d11] [ 94] 
[   2.509][d][vo/gpu/d3d11] [ 95] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.509][d][vo/gpu/d3d11] [ 96] {
[   2.509][d][vo/gpu/d3d11] [ 97]     _40 = stage_input._40;
[   2.509][d][vo/gpu/d3d11] [ 98]     _71 = stage_input._71;
[   2.509][d][vo/gpu/d3d11] [ 99]     _168 = stage_input._168;
[   2.509][d][vo/gpu/d3d11] [100]     _201 = stage_input._201;
[   2.509][d][vo/gpu/d3d11] [101]     _298 = stage_input._298;
[   2.509][d][vo/gpu/d3d11] [102]     _331 = stage_input._331;
[   2.509][d][vo/gpu/d3d11] [103]     _428 = stage_input._428;
[   2.509][d][vo/gpu/d3d11] [104]     _461 = stage_input._461;
[   2.509][d][vo/gpu/d3d11] [105]     _558 = stage_input._558;
[   2.509][d][vo/gpu/d3d11] [106]     _591 = stage_input._591;
[   2.509][d][vo/gpu/d3d11] [107]     _688 = stage_input._688;
[   2.509][d][vo/gpu/d3d11] [108]     _721 = stage_input._721;
[   2.509][d][vo/gpu/d3d11] [109]     _818 = stage_input._818;
[   2.509][d][vo/gpu/d3d11] [110]     _851 = stage_input._851;
[   2.509][d][vo/gpu/d3d11] [111]     _938 = stage_input._938;
[   2.509][d][vo/gpu/d3d11] [112]     frag_main();
[   2.509][d][vo/gpu/d3d11] [113]     SPIRV_Cross_Output stage_output;
[   2.509][d][vo/gpu/d3d11] [114]     stage_output._958 = _958;
[   2.509][d][vo/gpu/d3d11] [115]     return stage_output;
[   2.509][d][vo/gpu/d3d11] [116] }
[   2.509][d][vo/gpu] Resizing texture: 1920x800
[   2.511][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.513][v][vo/gpu/d3d11] Compiled a vertex shader in 3986us
[   2.513][v][vo/gpu/d3d11] shaderc: 2394us, SPIRV-Cross: 114us, D3DCompile: 1478us
[   2.513][d][vo/gpu/d3d11] GLSL source:
[   2.513][d][vo/gpu/d3d11] [  1] #version 450
[   2.513][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.513][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.513][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.513][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.513][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.513][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.513][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.513][d][vo/gpu/d3d11] [  9] void main() {
[   2.513][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.513][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   2.513][d][vo/gpu/d3d11] [ 12] }
[   2.513][d][vo/gpu/d3d11] HLSL source:
[   2.513][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.513][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.513][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.513][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.513][d][vo/gpu/d3d11] [  5] 
[   2.513][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   2.513][d][vo/gpu/d3d11] [  7] {
[   2.513][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   2.513][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   2.513][d][vo/gpu/d3d11] [ 10] };
[   2.513][d][vo/gpu/d3d11] [ 11] 
[   2.513][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   2.513][d][vo/gpu/d3d11] [ 13] {
[   2.513][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   2.513][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   2.513][d][vo/gpu/d3d11] [ 16] };
[   2.513][d][vo/gpu/d3d11] [ 17] 
[   2.513][d][vo/gpu/d3d11] [ 18] void vert_main()
[   2.513][d][vo/gpu/d3d11] [ 19] {
[   2.513][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.513][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   2.513][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   2.513][d][vo/gpu/d3d11] [ 23] }
[   2.513][d][vo/gpu/d3d11] [ 24] 
[   2.513][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.513][d][vo/gpu/d3d11] [ 26] {
[   2.513][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   2.513][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   2.513][d][vo/gpu/d3d11] [ 29]     vert_main();
[   2.513][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   2.513][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   2.513][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   2.513][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   2.513][d][vo/gpu/d3d11] [ 34] }
[   2.515][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.517][v][vo/gpu/d3d11] Compiled a fragment shader in 4690us
[   2.517][v][vo/gpu/d3d11] shaderc: 2466us, SPIRV-Cross: 167us, D3DCompile: 2057us
[   2.517][d][vo/gpu/d3d11] GLSL source:
[   2.517][d][vo/gpu/d3d11] [  1] #version 450
[   2.517][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.517][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.517][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.517][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.517][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.517][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.517][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   2.517][d][vo/gpu/d3d11] [  9] layout(offset=0) vec2 texture_size0;
[   2.517][d][vo/gpu/d3d11] [ 10] layout(offset=16) mat2 texture_rot0;
[   2.517][d][vo/gpu/d3d11] [ 11] layout(offset=48) vec2 texture_off0;
[   2.517][d][vo/gpu/d3d11] [ 12] layout(offset=56) vec2 pixel_size0;
[   2.517][d][vo/gpu/d3d11] [ 13] };
[   2.517][d][vo/gpu/d3d11] [ 14] layout(binding=0) uniform sampler2D texture0;
[   2.517][d][vo/gpu/d3d11] [ 15] void main() {
[   2.517][d][vo/gpu/d3d11] [ 16] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.517][d][vo/gpu/d3d11] [ 17] color.rgb = 1.000000 * vec4(texture(texture0, texcoord0)).rgb;
[   2.517][d][vo/gpu/d3d11] [ 18] // scaler pre-conversion
[   2.518][d][vo/gpu/d3d11] [ 19] out_color = color;
[   2.518][d][vo/gpu/d3d11] [ 20] }
[   2.518][d][vo/gpu/d3d11] HLSL source:
[   2.518][d][vo/gpu/d3d11] [  1] Texture2D<float4> _16 : register(t0);
[   2.518][d][vo/gpu/d3d11] [  2] SamplerState __16_sampler : register(s0);
[   2.518][d][vo/gpu/d3d11] [  3] 
[   2.518][d][vo/gpu/d3d11] [  4] static float2 _20;
[   2.518][d][vo/gpu/d3d11] [  5] static float4 _43;
[   2.518][d][vo/gpu/d3d11] [  6] 
[   2.518][d][vo/gpu/d3d11] [  7] struct SPIRV_Cross_Input
[   2.518][d][vo/gpu/d3d11] [  8] {
[   2.518][d][vo/gpu/d3d11] [  9]     float2 _20 : TEXCOORD1;
[   2.518][d][vo/gpu/d3d11] [ 10] };
[   2.518][d][vo/gpu/d3d11] [ 11] 
[   2.518][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   2.518][d][vo/gpu/d3d11] [ 13] {
[   2.518][d][vo/gpu/d3d11] [ 14]     float4 _43 : SV_Target0;
[   2.518][d][vo/gpu/d3d11] [ 15] };
[   2.518][d][vo/gpu/d3d11] [ 16] 
[   2.518][d][vo/gpu/d3d11] [ 17] void frag_main()
[   2.518][d][vo/gpu/d3d11] [ 18] {
[   2.518][d][vo/gpu/d3d11] [ 19]     float3 _30 = _16.Sample(__16_sampler, _20).xyz * 1.0f;
[   2.518][d][vo/gpu/d3d11] [ 20]     float4 _50 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   2.518][d][vo/gpu/d3d11] [ 21]     _50.x = _30.x;
[   2.518][d][vo/gpu/d3d11] [ 22]     _50.y = _30.y;
[   2.518][d][vo/gpu/d3d11] [ 23]     _50.z = _30.z;
[   2.518][d][vo/gpu/d3d11] [ 24]     _43 = _50;
[   2.518][d][vo/gpu/d3d11] [ 25] }
[   2.518][d][vo/gpu/d3d11] [ 26] 
[   2.518][d][vo/gpu/d3d11] [ 27] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.518][d][vo/gpu/d3d11] [ 28] {
[   2.518][d][vo/gpu/d3d11] [ 29]     _20 = stage_input._20;
[   2.518][d][vo/gpu/d3d11] [ 30]     frag_main();
[   2.518][d][vo/gpu/d3d11] [ 31]     SPIRV_Cross_Output stage_output;
[   2.518][d][vo/gpu/d3d11] [ 32]     stage_output._43 = _43;
[   2.518][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   2.518][d][vo/gpu/d3d11] [ 34] }
[   2.518][d][vo/gpu] Resizing texture: 1920x800
[   2.520][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.522][v][vo/gpu/d3d11] Compiled a vertex shader in 3640us
[   2.522][v][vo/gpu/d3d11] shaderc: 1878us, SPIRV-Cross: 112us, D3DCompile: 1650us
[   2.522][d][vo/gpu/d3d11] GLSL source:
[   2.522][d][vo/gpu/d3d11] [  1] #version 450
[   2.522][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.522][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.522][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.522][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.522][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.522][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.522][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.522][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.522][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.522][d][vo/gpu/d3d11] [ 11] void main() {
[   2.522][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.522][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.522][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.522][d][vo/gpu/d3d11] [ 15] }
[   2.522][d][vo/gpu/d3d11] HLSL source:
[   2.522][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.522][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.522][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.522][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.522][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.522][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.522][d][vo/gpu/d3d11] [  7] 
[   2.522][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.522][d][vo/gpu/d3d11] [  9] {
[   2.522][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.522][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.522][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.522][d][vo/gpu/d3d11] [ 13] };
[   2.522][d][vo/gpu/d3d11] [ 14] 
[   2.522][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.522][d][vo/gpu/d3d11] [ 16] {
[   2.522][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.522][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.522][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.522][d][vo/gpu/d3d11] [ 20] };
[   2.522][d][vo/gpu/d3d11] [ 21] 
[   2.522][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.522][d][vo/gpu/d3d11] [ 23] {
[   2.522][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.522][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.522][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.522][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.522][d][vo/gpu/d3d11] [ 28] }
[   2.522][d][vo/gpu/d3d11] [ 29] 
[   2.522][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.522][d][vo/gpu/d3d11] [ 31] {
[   2.522][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.522][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.522][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.522][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.522][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.522][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.522][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.522][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.522][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.522][d][vo/gpu/d3d11] [ 41] }
[   2.525][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.528][v][vo/gpu/d3d11] Compiled a fragment shader in 6330us
[   2.528][v][vo/gpu/d3d11] shaderc: 3410us, SPIRV-Cross: 176us, D3DCompile: 2744us
[   2.528][d][vo/gpu/d3d11] GLSL source:
[   2.528][d][vo/gpu/d3d11] [  1] #version 450
[   2.528][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.528][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.528][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.528][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.528][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.528][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.528][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.528][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.528][d][vo/gpu/d3d11] [ 10] layout(offset=0) float random;
[   2.528][d][vo/gpu/d3d11] [ 11] layout(offset=4) int frame;
[   2.528][d][vo/gpu/d3d11] [ 12] layout(offset=8) vec2 input_size;
[   2.528][d][vo/gpu/d3d11] [ 13] layout(offset=16) vec2 target_size;
[   2.528][d][vo/gpu/d3d11] [ 14] layout(offset=24) vec2 tex_offset;
[   2.528][d][vo/gpu/d3d11] [ 15] layout(offset=32) vec2 texture_size0;
[   2.528][d][vo/gpu/d3d11] [ 16] layout(offset=48) mat2 texture_rot0;
[   2.528][d][vo/gpu/d3d11] [ 17] layout(offset=80) vec2 texture_off0;
[   2.528][d][vo/gpu/d3d11] [ 18] layout(offset=88) vec2 pixel_size0;
[   2.528][d][vo/gpu/d3d11] [ 19] layout(offset=96) vec2 texture_size1;
[   2.528][d][vo/gpu/d3d11] [ 20] layout(offset=112) mat2 texture_rot1;
[   2.528][d][vo/gpu/d3d11] [ 21] layout(offset=144) vec2 texture_off1;
[   2.528][d][vo/gpu/d3d11] [ 22] layout(offset=152) vec2 pixel_size1;
[   2.528][d][vo/gpu/d3d11] [ 23] };
[   2.528][d][vo/gpu/d3d11] [ 24] layout(binding=0) uniform sampler2D texture0;
[   2.528][d][vo/gpu/d3d11] [ 25] layout(binding=1) uniform sampler2D texture1;
[   2.528][d][vo/gpu/d3d11] [ 26] #define HOOKED_raw texture0
[   2.528][d][vo/gpu/d3d11] [ 27] #define HOOKED_pos texcoord0
[   2.528][d][vo/gpu/d3d11] [ 28] #define HOOKED_size texture_size0
[   2.528][d][vo/gpu/d3d11] [ 29] #define HOOKED_rot texture_rot0
[   2.528][d][vo/gpu/d3d11] [ 30] #define HOOKED_off texture_off0
[   2.528][d][vo/gpu/d3d11] [ 31] #define HOOKED_pt pixel_size0
[   2.528][d][vo/gpu/d3d11] [ 32] #define HOOKED_map texmap0
[   2.528][d][vo/gpu/d3d11] [ 33] #define HOOKED_mul 1.000000
[   2.528][d][vo/gpu/d3d11] [ 34] #define HOOKED_tex(pos) (HOOKED_mul * vec4(texture(HOOKED_raw, pos)).rgba)
[   2.528][d][vo/gpu/d3d11] [ 35] #define HOOKED_gather(pos, c) (HOOKED_mul * vec4(textureGather(HOOKED_raw, pos, c)))
[   2.528][d][vo/gpu/d3d11] [ 36] #define HOOKED_texOff(off) HOOKED_tex(HOOKED_pos + HOOKED_pt * vec2(off))
[   2.528][d][vo/gpu/d3d11] [ 37] #define PREKERNEL_raw texture0
[   2.528][d][vo/gpu/d3d11] [ 38] #define PREKERNEL_pos texcoord0
[   2.528][d][vo/gpu/d3d11] [ 39] #define PREKERNEL_size texture_size0
[   2.528][d][vo/gpu/d3d11] [ 40] #define PREKERNEL_rot texture_rot0
[   2.528][d][vo/gpu/d3d11] [ 41] #define PREKERNEL_off texture_off0
[   2.528][d][vo/gpu/d3d11] [ 42] #define PREKERNEL_pt pixel_size0
[   2.528][d][vo/gpu/d3d11] [ 43] #define PREKERNEL_map texmap0
[   2.528][d][vo/gpu/d3d11] [ 44] #define PREKERNEL_mul 1.000000
[   2.528][d][vo/gpu/d3d11] [ 45] #define PREKERNEL_tex(pos) (PREKERNEL_mul * vec4(texture(PREKERNEL_raw, pos)).rgba)
[   2.528][d][vo/gpu/d3d11] [ 46] #define PREKERNEL_gather(pos, c) (PREKERNEL_mul * vec4(textureGather(PREKERNEL_raw, pos, c)))
[   2.528][d][vo/gpu/d3d11] [ 47] #define PREKERNEL_texOff(off) PREKERNEL_tex(PREKERNEL_pos + PREKERNEL_pt * vec2(off))
[   2.528][d][vo/gpu/d3d11] [ 48] #define STATSMAX_raw texture1
[   2.528][d][vo/gpu/d3d11] [ 49] #define STATSMAX_pos texcoord1
[   2.528][d][vo/gpu/d3d11] [ 50] #define STATSMAX_size texture_size1
[   2.528][d][vo/gpu/d3d11] [ 51] #define STATSMAX_rot texture_rot1
[   2.528][d][vo/gpu/d3d11] [ 52] #define STATSMAX_off texture_off1
[   2.528][d][vo/gpu/d3d11] [ 53] #define STATSMAX_pt pixel_size1
[   2.528][d][vo/gpu/d3d11] [ 54] #define STATSMAX_map texmap1
[   2.528][d][vo/gpu/d3d11] [ 55] #define STATSMAX_mul 1.000000
[   2.528][d][vo/gpu/d3d11] [ 56] #define STATSMAX_tex(pos) (STATSMAX_mul * vec4(texture(STATSMAX_raw, pos)).rgba)
[   2.528][d][vo/gpu/d3d11] [ 57] #define STATSMAX_gather(pos, c) (STATSMAX_mul * vec4(textureGather(STATSMAX_raw, pos, c)))
[   2.528][d][vo/gpu/d3d11] [ 58] #define STATSMAX_texOff(off) STATSMAX_tex(STATSMAX_pos + STATSMAX_pt * vec2(off))
[   2.528][d][vo/gpu/d3d11] [ 59] 
[   2.528][d][vo/gpu/d3d11] [ 60] float get_luma(vec4 rgba) {
[   2.528][d][vo/gpu/d3d11] [ 61] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   2.528][d][vo/gpu/d3d11] [ 62] }
[   2.528][d][vo/gpu/d3d11] [ 63] 
[   2.528][d][vo/gpu/d3d11] [ 64] vec4 hook() {
[   2.528][d][vo/gpu/d3d11] [ 65] 
[   2.528][d][vo/gpu/d3d11] [ 66] 	float current_luma = get_luma(HOOKED_tex(HOOKED_pos));
[   2.529][d][vo/gpu/d3d11] [ 67] 	float new_luma = min(current_luma, STATSMAX_tex(HOOKED_pos).x);
[   2.529][d][vo/gpu/d3d11] [ 68] 	
[   2.529][d][vo/gpu/d3d11] [ 69] 	//This trick is only possible if the inverse Y->RGB matrix has 1 for every row... (which is the case for BT.709)
[   2.529][d][vo/gpu/d3d11] [ 70] 	//Otherwise we would need to convert RGB to YUV, modify Y then convert back to RGB.
[   2.529][d][vo/gpu/d3d11] [ 71]     return HOOKED_tex(HOOKED_pos) - (current_luma - new_luma); 
[   2.529][d][vo/gpu/d3d11] [ 72] }void main() {
[   2.529][d][vo/gpu/d3d11] [ 73] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.529][d][vo/gpu/d3d11] [ 74] color = hook();
[   2.529][d][vo/gpu/d3d11] [ 75] color.a = 1.000000;
[   2.529][d][vo/gpu/d3d11] [ 76] out_color = color;
[   2.529][d][vo/gpu/d3d11] [ 77] }
[   2.529][d][vo/gpu/d3d11] HLSL source:
[   2.529][d][vo/gpu/d3d11] [  1] Texture2D<float4> _31 : register(t0);
[   2.529][d][vo/gpu/d3d11] [  2] SamplerState __31_sampler : register(s0);
[   2.529][d][vo/gpu/d3d11] [  3] Texture2D<float4> _48 : register(t1);
[   2.529][d][vo/gpu/d3d11] [  4] SamplerState __48_sampler : register(s1);
[   2.529][d][vo/gpu/d3d11] [  5] 
[   2.529][d][vo/gpu/d3d11] [  6] static float2 _35;
[   2.529][d][vo/gpu/d3d11] [  7] static float4 _84;
[   2.529][d][vo/gpu/d3d11] [  8] 
[   2.529][d][vo/gpu/d3d11] [  9] struct SPIRV_Cross_Input
[   2.529][d][vo/gpu/d3d11] [ 10] {
[   2.529][d][vo/gpu/d3d11] [ 11]     float2 _35 : TEXCOORD1;
[   2.529][d][vo/gpu/d3d11] [ 12] };
[   2.529][d][vo/gpu/d3d11] [ 13] 
[   2.529][d][vo/gpu/d3d11] [ 14] struct SPIRV_Cross_Output
[   2.529][d][vo/gpu/d3d11] [ 15] {
[   2.529][d][vo/gpu/d3d11] [ 16]     float4 _84 : SV_Target0;
[   2.529][d][vo/gpu/d3d11] [ 17] };
[   2.529][d][vo/gpu/d3d11] [ 18] 
[   2.529][d][vo/gpu/d3d11] [ 19] void frag_main()
[   2.529][d][vo/gpu/d3d11] [ 20] {
[   2.529][d][vo/gpu/d3d11] [ 21]     float4 _105 = _31.Sample(__31_sampler, _35) * 1.0f;
[   2.529][d][vo/gpu/d3d11] [ 22]     float _136 = dot(float4(0.2989999949932098388671875f, 0.58700001239776611328125f, 0.114000000059604644775390625f, 0.0f), _105);
[   2.529][d][vo/gpu/d3d11] [ 23]     float4 _132 = _105 - (_136 - min(_136, (_48.Sample(__48_sampler, _35) * 1.0f).x)).xxxx;
[   2.529][d][vo/gpu/d3d11] [ 24]     _132.w = 1.0f;
[   2.529][d][vo/gpu/d3d11] [ 25]     _84 = _132;
[   2.529][d][vo/gpu/d3d11] [ 26] }
[   2.529][d][vo/gpu/d3d11] [ 27] 
[   2.529][d][vo/gpu/d3d11] [ 28] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.529][d][vo/gpu/d3d11] [ 29] {
[   2.529][d][vo/gpu/d3d11] [ 30]     _35 = stage_input._35;
[   2.529][d][vo/gpu/d3d11] [ 31]     frag_main();
[   2.529][d][vo/gpu/d3d11] [ 32]     SPIRV_Cross_Output stage_output;
[   2.529][d][vo/gpu/d3d11] [ 33]     stage_output._84 = _84;
[   2.529][d][vo/gpu/d3d11] [ 34]     return stage_output;
[   2.529][d][vo/gpu/d3d11] [ 35] }
[   2.529][d][vo/gpu] Resizing texture: 1920x800
[   2.531][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.532][v][vo/gpu/d3d11] Compiled a vertex shader in 3541us
[   2.532][v][vo/gpu/d3d11] shaderc: 1752us, SPIRV-Cross: 125us, D3DCompile: 1664us
[   2.532][d][vo/gpu/d3d11] GLSL source:
[   2.532][d][vo/gpu/d3d11] [  1] #version 450
[   2.532][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.532][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.532][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.532][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.532][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.532][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.532][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.532][d][vo/gpu/d3d11] [  9] void main() {
[   2.532][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.532][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   2.532][d][vo/gpu/d3d11] [ 12] }
[   2.532][d][vo/gpu/d3d11] HLSL source:
[   2.532][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.532][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.532][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.532][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.532][d][vo/gpu/d3d11] [  5] 
[   2.532][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   2.532][d][vo/gpu/d3d11] [  7] {
[   2.532][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   2.532][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   2.532][d][vo/gpu/d3d11] [ 10] };
[   2.532][d][vo/gpu/d3d11] [ 11] 
[   2.532][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   2.532][d][vo/gpu/d3d11] [ 13] {
[   2.532][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   2.532][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   2.532][d][vo/gpu/d3d11] [ 16] };
[   2.532][d][vo/gpu/d3d11] [ 17] 
[   2.533][d][vo/gpu/d3d11] [ 18] void vert_main()
[   2.533][d][vo/gpu/d3d11] [ 19] {
[   2.533][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.533][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   2.533][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   2.533][d][vo/gpu/d3d11] [ 23] }
[   2.533][d][vo/gpu/d3d11] [ 24] 
[   2.533][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.533][d][vo/gpu/d3d11] [ 26] {
[   2.533][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   2.533][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   2.533][d][vo/gpu/d3d11] [ 29]     vert_main();
[   2.533][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   2.533][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   2.533][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   2.533][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   2.533][d][vo/gpu/d3d11] [ 34] }
[   2.535][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.537][v][vo/gpu/d3d11] Compiled a fragment shader in 4436us
[   2.537][v][vo/gpu/d3d11] shaderc: 2143us, SPIRV-Cross: 155us, D3DCompile: 2138us
[   2.537][d][vo/gpu/d3d11] GLSL source:
[   2.537][d][vo/gpu/d3d11] [  1] #version 450
[   2.537][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.537][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.537][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.537][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.537][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.537][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.537][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   2.537][d][vo/gpu/d3d11] [  9] layout(offset=0) vec2 texture_size0;
[   2.537][d][vo/gpu/d3d11] [ 10] layout(offset=16) mat2 texture_rot0;
[   2.537][d][vo/gpu/d3d11] [ 11] layout(offset=48) vec2 texture_off0;
[   2.537][d][vo/gpu/d3d11] [ 12] layout(offset=56) vec2 pixel_size0;
[   2.537][d][vo/gpu/d3d11] [ 13] };
[   2.537][d][vo/gpu/d3d11] [ 14] layout(binding=0) uniform sampler2D texture0;
[   2.537][d][vo/gpu/d3d11] [ 15] void main() {
[   2.537][d][vo/gpu/d3d11] [ 16] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.537][d][vo/gpu/d3d11] [ 17] color.rgb = 1.000000 * vec4(texture(texture0, texcoord0)).rgb;
[   2.537][d][vo/gpu/d3d11] [ 18] // main scaling
[   2.537][d][vo/gpu/d3d11] [ 19] out_color = color;
[   2.537][d][vo/gpu/d3d11] [ 20] }
[   2.537][d][vo/gpu/d3d11] HLSL source:
[   2.537][d][vo/gpu/d3d11] [  1] Texture2D<float4> _16 : register(t0);
[   2.537][d][vo/gpu/d3d11] [  2] SamplerState __16_sampler : register(s0);
[   2.537][d][vo/gpu/d3d11] [  3] 
[   2.537][d][vo/gpu/d3d11] [  4] static float2 _20;
[   2.537][d][vo/gpu/d3d11] [  5] static float4 _43;
[   2.537][d][vo/gpu/d3d11] [  6] 
[   2.537][d][vo/gpu/d3d11] [  7] struct SPIRV_Cross_Input
[   2.537][d][vo/gpu/d3d11] [  8] {
[   2.537][d][vo/gpu/d3d11] [  9]     float2 _20 : TEXCOORD1;
[   2.537][d][vo/gpu/d3d11] [ 10] };
[   2.537][d][vo/gpu/d3d11] [ 11] 
[   2.537][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   2.537][d][vo/gpu/d3d11] [ 13] {
[   2.537][d][vo/gpu/d3d11] [ 14]     float4 _43 : SV_Target0;
[   2.537][d][vo/gpu/d3d11] [ 15] };
[   2.537][d][vo/gpu/d3d11] [ 16] 
[   2.537][d][vo/gpu/d3d11] [ 17] void frag_main()
[   2.537][d][vo/gpu/d3d11] [ 18] {
[   2.537][d][vo/gpu/d3d11] [ 19]     float3 _30 = _16.Sample(__16_sampler, _20).xyz * 1.0f;
[   2.537][d][vo/gpu/d3d11] [ 20]     float4 _50 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   2.537][d][vo/gpu/d3d11] [ 21]     _50.x = _30.x;
[   2.537][d][vo/gpu/d3d11] [ 22]     _50.y = _30.y;
[   2.537][d][vo/gpu/d3d11] [ 23]     _50.z = _30.z;
[   2.537][d][vo/gpu/d3d11] [ 24]     _43 = _50;
[   2.537][d][vo/gpu/d3d11] [ 25] }
[   2.537][d][vo/gpu/d3d11] [ 26] 
[   2.537][d][vo/gpu/d3d11] [ 27] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.537][d][vo/gpu/d3d11] [ 28] {
[   2.537][d][vo/gpu/d3d11] [ 29]     _20 = stage_input._20;
[   2.537][d][vo/gpu/d3d11] [ 30]     frag_main();
[   2.537][d][vo/gpu/d3d11] [ 31]     SPIRV_Cross_Output stage_output;
[   2.537][d][vo/gpu/d3d11] [ 32]     stage_output._43 = _43;
[   2.537][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   2.537][d][vo/gpu/d3d11] [ 34] }
[   2.537][v][vo/gpu] Dither to 8.
[   2.567][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.569][v][vo/gpu/d3d11] Compiled a vertex shader in 4548us
[   2.569][v][vo/gpu/d3d11] shaderc: 2279us, SPIRV-Cross: 135us, D3DCompile: 2134us
[   2.569][d][vo/gpu/d3d11] GLSL source:
[   2.569][d][vo/gpu/d3d11] [  1] #version 450
[   2.569][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.569][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.569][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.569][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.569][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.569][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.569][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.569][d][vo/gpu/d3d11] [  9] void main() {
[   2.569][d][vo/gpu/d3d11] [ 10] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.569][d][vo/gpu/d3d11] [ 11] texcoord0 = vertex_texcoord0;
[   2.569][d][vo/gpu/d3d11] [ 12] }
[   2.569][d][vo/gpu/d3d11] HLSL source:
[   2.569][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.569][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.569][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.569][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.569][d][vo/gpu/d3d11] [  5] 
[   2.569][d][vo/gpu/d3d11] [  6] struct SPIRV_Cross_Input
[   2.569][d][vo/gpu/d3d11] [  7] {
[   2.569][d][vo/gpu/d3d11] [  8]     float2 _18 : TEXCOORD0;
[   2.569][d][vo/gpu/d3d11] [  9]     float2 _28 : TEXCOORD1;
[   2.569][d][vo/gpu/d3d11] [ 10] };
[   2.569][d][vo/gpu/d3d11] [ 11] 
[   2.569][d][vo/gpu/d3d11] [ 12] struct SPIRV_Cross_Output
[   2.569][d][vo/gpu/d3d11] [ 13] {
[   2.569][d][vo/gpu/d3d11] [ 14]     float2 _27 : TEXCOORD1;
[   2.569][d][vo/gpu/d3d11] [ 15]     float4 gl_Position : SV_Position;
[   2.569][d][vo/gpu/d3d11] [ 16] };
[   2.569][d][vo/gpu/d3d11] [ 17] 
[   2.569][d][vo/gpu/d3d11] [ 18] void vert_main()
[   2.569][d][vo/gpu/d3d11] [ 19] {
[   2.569][d][vo/gpu/d3d11] [ 20]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.569][d][vo/gpu/d3d11] [ 21]     _27 = _28;
[   2.569][d][vo/gpu/d3d11] [ 22]     gl_Position.y = -gl_Position.y;
[   2.569][d][vo/gpu/d3d11] [ 23] }
[   2.569][d][vo/gpu/d3d11] [ 24] 
[   2.569][d][vo/gpu/d3d11] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.569][d][vo/gpu/d3d11] [ 26] {
[   2.569][d][vo/gpu/d3d11] [ 27]     _18 = stage_input._18;
[   2.569][d][vo/gpu/d3d11] [ 28]     _28 = stage_input._28;
[   2.569][d][vo/gpu/d3d11] [ 29]     vert_main();
[   2.569][d][vo/gpu/d3d11] [ 30]     SPIRV_Cross_Output stage_output;
[   2.569][d][vo/gpu/d3d11] [ 31]     stage_output.gl_Position = gl_Position;
[   2.569][d][vo/gpu/d3d11] [ 32]     stage_output._27 = _27;
[   2.569][d][vo/gpu/d3d11] [ 33]     return stage_output;
[   2.569][d][vo/gpu/d3d11] [ 34] }
[   2.573][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.577][v][vo/gpu/d3d11] Compiled a fragment shader in 8076us
[   2.577][v][vo/gpu/d3d11] shaderc: 3889us, SPIRV-Cross: 235us, D3DCompile: 3952us
[   2.577][d][vo/gpu/d3d11] GLSL source:
[   2.577][d][vo/gpu/d3d11] [  1] #version 450
[   2.577][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.577][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.577][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.577][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.577][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.577][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.577][d][vo/gpu/d3d11] [  8] layout(std140, binding=0) uniform UBO {
[   2.577][d][vo/gpu/d3d11] [  9] layout(offset=0) vec3 src_luma;
[   2.577][d][vo/gpu/d3d11] [ 10] layout(offset=16) vec3 dst_luma;
[   2.577][d][vo/gpu/d3d11] [ 11] layout(offset=32) vec2 texture_size0;
[   2.577][d][vo/gpu/d3d11] [ 12] layout(offset=48) mat2 texture_rot0;
[   2.577][d][vo/gpu/d3d11] [ 13] layout(offset=80) vec2 texture_off0;
[   2.577][d][vo/gpu/d3d11] [ 14] layout(offset=88) vec2 pixel_size0;
[   2.577][d][vo/gpu/d3d11] [ 15] };
[   2.577][d][vo/gpu/d3d11] [ 16] layout(binding=0) uniform sampler2D dither;
[   2.577][d][vo/gpu/d3d11] [ 17] layout(binding=1) uniform sampler2D texture0;
[   2.577][d][vo/gpu/d3d11] [ 18] void main() {
[   2.577][d][vo/gpu/d3d11] [ 19] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.577][d][vo/gpu/d3d11] [ 20] #undef tex
[   2.577][d][vo/gpu/d3d11] [ 21] #undef texmap
[   2.577][d][vo/gpu/d3d11] [ 22] #define tex texture0
[   2.577][d][vo/gpu/d3d11] [ 23] #define texmap texmap0
[   2.577][d][vo/gpu/d3d11] [ 24] vec2 pos = texcoord0;
[   2.577][d][vo/gpu/d3d11] [ 25] vec2 size = texture_size0;
[   2.577][d][vo/gpu/d3d11] [ 26] vec2 pt = pixel_size0;
[   2.577][d][vo/gpu/d3d11] [ 27] color = texture(tex, pos);
[   2.577][d][vo/gpu/d3d11] [ 28] color *= 1.000000;
[   2.577][d][vo/gpu/d3d11] [ 29] color.a = 1.000000;
[   2.577][d][vo/gpu/d3d11] [ 30] // scaler post-conversion
[   2.577][d][vo/gpu/d3d11] [ 31] // color mapping
[   2.577][d][vo/gpu/d3d11] [ 32] color.rgb *= vec3(1.000000);
[   2.577][d][vo/gpu/d3d11] [ 33] color.rgb *= vec3(1.000000);
[   2.577][d][vo/gpu/d3d11] [ 34] // dithering
[   2.577][d][vo/gpu/d3d11] [ 35] vec2 dither_pos = gl_FragCoord.xy * 1.0/64.0;
[   2.577][d][vo/gpu/d3d11] [ 36] float dither_value = texture(dither, dither_pos).r;
[   2.577][d][vo/gpu/d3d11] [ 37] color = floor(color * 255.0 + dither_value + 0.5 / 4096.0) * 1.0/255.0;
[   2.577][d][vo/gpu/d3d11] [ 38] out_color = color;
[   2.578][d][vo/gpu/d3d11] [ 39] }
[   2.578][d][vo/gpu/d3d11] HLSL source:
[   2.578][d][vo/gpu/d3d11] [  1] Texture2D<float4> _37 : register(t1);
[   2.578][d][vo/gpu/d3d11] [  2] SamplerState __37_sampler : register(s1);
[   2.578][d][vo/gpu/d3d11] [  3] Texture2D<float4> _79 : register(t0);
[   2.578][d][vo/gpu/d3d11] [  4] SamplerState __79_sampler : register(s0);
[   2.578][d][vo/gpu/d3d11] [  5] 
[   2.578][d][vo/gpu/d3d11] [  6] static float4 gl_FragCoord;
[   2.578][d][vo/gpu/d3d11] [  7] static float2 _17;
[   2.578][d][vo/gpu/d3d11] [  8] static float4 _98;
[   2.578][d][vo/gpu/d3d11] [  9] 
[   2.578][d][vo/gpu/d3d11] [ 10] struct SPIRV_Cross_Input
[   2.578][d][vo/gpu/d3d11] [ 11] {
[   2.578][d][vo/gpu/d3d11] [ 12]     float2 _17 : TEXCOORD1;
[   2.578][d][vo/gpu/d3d11] [ 13]     float4 gl_FragCoord : SV_Position;
[   2.578][d][vo/gpu/d3d11] [ 14] };
[   2.578][d][vo/gpu/d3d11] [ 15] 
[   2.578][d][vo/gpu/d3d11] [ 16] struct SPIRV_Cross_Output
[   2.578][d][vo/gpu/d3d11] [ 17] {
[   2.578][d][vo/gpu/d3d11] [ 18]     float4 _98 : SV_Target0;
[   2.578][d][vo/gpu/d3d11] [ 19] };
[   2.578][d][vo/gpu/d3d11] [ 20] 
[   2.578][d][vo/gpu/d3d11] [ 21] void frag_main()
[   2.578][d][vo/gpu/d3d11] [ 22] {
[   2.578][d][vo/gpu/d3d11] [ 23]     float4 _42 = _37.Sample(__37_sampler, _17) * 1.0f;
[   2.578][d][vo/gpu/d3d11] [ 24]     float _53 = _42.x;
[   2.578][d][vo/gpu/d3d11] [ 25]     float4 _117 = float4(_53, _42.yz, 1.0f);
[   2.578][d][vo/gpu/d3d11] [ 26]     _117.x = _53;
[   2.578][d][vo/gpu/d3d11] [ 27]     _117.y = _42.y;
[   2.578][d][vo/gpu/d3d11] [ 28]     _117.z = _42.z;
[   2.578][d][vo/gpu/d3d11] [ 29]     _98 = (floor(((_117 * 255.0f) + _79.Sample(__79_sampler, (gl_FragCoord.xy * 1.0f) * 0.015625f.xx).x.xxxx) + 0.0001220703125f.xxxx) * 1.0f) * 0.0039215688593685626983642578125f.xxxx;
[   2.578][d][vo/gpu/d3d11] [ 30] }
[   2.578][d][vo/gpu/d3d11] [ 31] 
[   2.578][d][vo/gpu/d3d11] [ 32] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.578][d][vo/gpu/d3d11] [ 33] {
[   2.578][d][vo/gpu/d3d11] [ 34]     gl_FragCoord = stage_input.gl_FragCoord;
[   2.578][d][vo/gpu/d3d11] [ 35]     gl_FragCoord.w = 1.0 / gl_FragCoord.w;
[   2.578][d][vo/gpu/d3d11] [ 36]     _17 = stage_input._17;
[   2.578][d][vo/gpu/d3d11] [ 37]     frag_main();
[   2.578][d][vo/gpu/d3d11] [ 38]     SPIRV_Cross_Output stage_output;
[   2.578][d][vo/gpu/d3d11] [ 39]     stage_output._98 = _98;
[   2.578][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.578][d][vo/gpu/d3d11] [ 41] }
[   2.580][v][cplayer] first video frame after restart shown
[   2.583][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.585][v][vo/gpu/d3d11] Compiled a vertex shader in 4336us
[   2.585][v][vo/gpu/d3d11] shaderc: 2370us, SPIRV-Cross: 152us, D3DCompile: 1814us
[   2.585][d][vo/gpu/d3d11] GLSL source:
[   2.585][d][vo/gpu/d3d11] [  1] #version 450
[   2.585][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.585][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.585][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.585][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.585][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[   2.585][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord0;
[   2.585][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord0;
[   2.585][d][vo/gpu/d3d11] [  9] layout(location=2) in vec2 vertex_texcoord1;
[   2.585][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec2 texcoord1;
[   2.585][d][vo/gpu/d3d11] [ 11] void main() {
[   2.585][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   2.585][d][vo/gpu/d3d11] [ 13] texcoord0 = vertex_texcoord0;
[   2.585][d][vo/gpu/d3d11] [ 14] texcoord1 = vertex_texcoord1;
[   2.585][d][vo/gpu/d3d11] [ 15] }
[   2.585][d][vo/gpu/d3d11] HLSL source:
[   2.585][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[   2.585][d][vo/gpu/d3d11] [  2] static float2 _18;
[   2.585][d][vo/gpu/d3d11] [  3] static float2 _27;
[   2.585][d][vo/gpu/d3d11] [  4] static float2 _28;
[   2.585][d][vo/gpu/d3d11] [  5] static float2 _30;
[   2.585][d][vo/gpu/d3d11] [  6] static float2 _31;
[   2.585][d][vo/gpu/d3d11] [  7] 
[   2.585][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[   2.585][d][vo/gpu/d3d11] [  9] {
[   2.585][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[   2.585][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[   2.585][d][vo/gpu/d3d11] [ 12]     float2 _31 : TEXCOORD2;
[   2.585][d][vo/gpu/d3d11] [ 13] };
[   2.585][d][vo/gpu/d3d11] [ 14] 
[   2.585][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[   2.585][d][vo/gpu/d3d11] [ 16] {
[   2.585][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[   2.585][d][vo/gpu/d3d11] [ 18]     float2 _30 : TEXCOORD2;
[   2.585][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[   2.585][d][vo/gpu/d3d11] [ 20] };
[   2.585][d][vo/gpu/d3d11] [ 21] 
[   2.585][d][vo/gpu/d3d11] [ 22] void vert_main()
[   2.585][d][vo/gpu/d3d11] [ 23] {
[   2.585][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[   2.585][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[   2.585][d][vo/gpu/d3d11] [ 26]     _30 = _31;
[   2.585][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[   2.585][d][vo/gpu/d3d11] [ 28] }
[   2.585][d][vo/gpu/d3d11] [ 29] 
[   2.585][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.585][d][vo/gpu/d3d11] [ 31] {
[   2.585][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[   2.585][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[   2.585][d][vo/gpu/d3d11] [ 34]     _31 = stage_input._31;
[   2.585][d][vo/gpu/d3d11] [ 35]     vert_main();
[   2.585][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[   2.585][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[   2.585][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[   2.585][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[   2.585][d][vo/gpu/d3d11] [ 40]     return stage_output;
[   2.585][d][vo/gpu/d3d11] [ 41] }
[   2.593][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.593][v][vo/gpu/d3d11] Compiled a fragment shader in 6605us
[   2.593][v][vo/gpu/d3d11] shaderc: 3648us, SPIRV-Cross: 155us, D3DCompile: 2802us
[   2.593][d][vo/gpu/d3d11] GLSL source:
[   2.593][d][vo/gpu/d3d11] [  1] #version 450
[   2.593][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[   2.593][d][vo/gpu/d3d11] [  3] #define tex1D texture
[   2.593][d][vo/gpu/d3d11] [  4] #define tex3D texture
[   2.593][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   2.593][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[   2.593][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord0;
[   2.593][d][vo/gpu/d3d11] [  8] layout(location=2) in vec2 texcoord1;
[   2.593][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[   2.593][d][vo/gpu/d3d11] [ 10] layout(offset=0) vec2 texture_size0;
[   2.593][d][vo/gpu/d3d11] [ 11] layout(offset=16) mat2 texture_rot0;
[   2.593][d][vo/gpu/d3d11] [ 12] layout(offset=48) vec2 texture_off0;
[   2.593][d][vo/gpu/d3d11] [ 13] layout(offset=56) vec2 pixel_size0;
[   2.593][d][vo/gpu/d3d11] [ 14] layout(offset=64) vec2 texture_size1;
[   2.593][d][vo/gpu/d3d11] [ 15] layout(offset=80) mat2 texture_rot1;
[   2.593][d][vo/gpu/d3d11] [ 16] layout(offset=112) vec2 texture_off1;
[   2.593][d][vo/gpu/d3d11] [ 17] layout(offset=120) vec2 pixel_size1;
[   2.593][d][vo/gpu/d3d11] [ 18] };
[   2.593][d][vo/gpu/d3d11] [ 19] layout(binding=0) uniform sampler2D texture0;
[   2.593][d][vo/gpu/d3d11] [ 20] layout(binding=1) uniform sampler2D texture1;
[   2.593][d][vo/gpu/d3d11] [ 21] void main() {
[   2.593][d][vo/gpu/d3d11] [ 22] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   2.593][d][vo/gpu/d3d11] [ 23] // merging plane 1 ...
[   2.593][d][vo/gpu/d3d11] [ 24] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   2.594][d][vo/gpu/d3d11] [ 25] // merging plane 2 ... into 1
[   2.594][d][vo/gpu/d3d11] [ 26] color.g = 1.000000 * vec4(texture(texture1, texcoord1)).r;
[   2.594][d][vo/gpu/d3d11] [ 27] out_color = color;
[   2.594][d][vo/gpu/d3d11] [ 28] }
[   2.594][d][vo/gpu/d3d11] HLSL source:
[   2.594][d][vo/gpu/d3d11] [  1] Texture2D<float4> _16 : register(t0);
[   2.594][d][vo/gpu/d3d11] [  2] SamplerState __16_sampler : register(s0);
[   2.594][d][vo/gpu/d3d11] [  3] Texture2D<float4> _34 : register(t1);
[   2.594][d][vo/gpu/d3d11] [  4] SamplerState __34_sampler : register(s1);
[   2.594][d][vo/gpu/d3d11] [  5] 
[   2.594][d][vo/gpu/d3d11] [  6] static float2 _20;
[   2.594][d][vo/gpu/d3d11] [  7] static float2 _36;
[   2.594][d][vo/gpu/d3d11] [  8] static float4 _49;
[   2.594][d][vo/gpu/d3d11] [  9] 
[   2.594][d][vo/gpu/d3d11] [ 10] struct SPIRV_Cross_Input
[   2.594][d][vo/gpu/d3d11] [ 11] {
[   2.594][d][vo/gpu/d3d11] [ 12]     float2 _20 : TEXCOORD1;
[   2.594][d][vo/gpu/d3d11] [ 13]     float2 _36 : TEXCOORD2;
[   2.594][d][vo/gpu/d3d11] [ 14] };
[   2.594][d][vo/gpu/d3d11] [ 15] 
[   2.594][d][vo/gpu/d3d11] [ 16] struct SPIRV_Cross_Output
[   2.594][d][vo/gpu/d3d11] [ 17] {
[   2.594][d][vo/gpu/d3d11] [ 18]     float4 _49 : SV_Target0;
[   2.594][d][vo/gpu/d3d11] [ 19] };
[   2.594][d][vo/gpu/d3d11] [ 20] 
[   2.594][d][vo/gpu/d3d11] [ 21] void frag_main()
[   2.594][d][vo/gpu/d3d11] [ 22] {
[   2.594][d][vo/gpu/d3d11] [ 23]     float4 _56 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   2.594][d][vo/gpu/d3d11] [ 24]     _56.x = _16.Sample(__16_sampler, _20).x;
[   2.594][d][vo/gpu/d3d11] [ 25]     _56.y = _34.Sample(__34_sampler, _36).x;
[   2.594][d][vo/gpu/d3d11] [ 26]     _49 = _56;
[   2.594][d][vo/gpu/d3d11] [ 27] }
[   2.594][d][vo/gpu/d3d11] [ 28] 
[   2.594][d][vo/gpu/d3d11] [ 29] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.594][d][vo/gpu/d3d11] [ 30] {
[   2.594][d][vo/gpu/d3d11] [ 31]     _20 = stage_input._20;
[   2.594][d][vo/gpu/d3d11] [ 32]     _36 = stage_input._36;
[   2.594][d][vo/gpu/d3d11] [ 33]     frag_main();
[   2.594][d][vo/gpu/d3d11] [ 34]     SPIRV_Cross_Output stage_output;
[   2.594][d][vo/gpu/d3d11] [ 35]     stage_output._49 = _49;
[   2.594][d][vo/gpu/d3d11] [ 36]     return stage_output;
[   2.594][d][vo/gpu/d3d11] [ 37] }
[   2.594][d][vo/gpu] Resizing texture: 1920x1080
[   2.706][v][af] [in] 48000Hz 5.1(side) 6ch floatp
[   2.706][v][af] [userspeed] 48000Hz 5.1(side) 6ch floatp
[   2.706][v][af] [userspeed] (disabled)
[   2.706][v][af] [convert] 48000Hz 5.1(side) 6ch floatp
[   2.708][v][ao] Trying audio driver 'wasapi'
[   2.708][v][ao/wasapi] requested format: 48000 Hz, 5.1(side) channels, floatp
[   2.708][d][ao/wasapi] Init wasapi
[   2.708][d][ao/wasapi] Find device ''
[   2.712][v][ao/wasapi] No device specified. Selecting default.
[   2.715][v][ao/wasapi] Selecting device '{1a658526-7ba6-434a-bd37-f1f229b59002}' (Realtek Digital Output (Realtek(R) Audio))
[   2.715][v][ao/wasapi] Monitoring changes in device {0.0.0.00000000}.{1a658526-7ba6-434a-bd37-f1f229b59002}
[   2.719][d][ao/wasapi] Init wasapi thread
[   2.719][d][ao/wasapi] Activating pAudioClient interface
[   2.722][d][ao/wasapi] Probing formats
[   2.730][v][ao/wasapi] Trying 5.1(side) float (32/32 bits) @ 48000hz (shared) -> ok
[   2.730][v][ao/wasapi] Accepted as 5.1(side) float @ 48000hz -> 5.1(side) float (32/32 bits) @ 48000hz (shared)
[   2.730][d][ao/wasapi] Fixing format
[   2.730][d][ao/wasapi] IAudioClient::GetDevicePeriod
[   2.731][v][ao/wasapi] Device period: 10 ms
[   2.731][d][ao/wasapi] IAudioClient::Initialize
[   2.784][d][ao/wasapi] IAudioClient::Initialize pRenderClient
[   2.784][d][ao/wasapi] IAudioClient::Initialize IAudioClient_SetEventHandle
[   2.784][d][ao/wasapi] IAudioClient::Initialize IAudioClient_GetBufferSize
[   2.784][v][ao/wasapi] Buffer frame count: 2400 (50 ms)
[   2.784][v][ao/wasapi] IAudioClock::GetFrequency gave a frequency of 1152000.
[   2.785][d][ao/wasapi] IAudioClient::Initialize pAudioVolume
[   2.785][d][ao/wasapi] Entering dispatch loop
[   2.785][d][ao/wasapi] Init wasapi done
[   2.785][v][ao/wasapi] device buffer: 2400 samples.
[   2.785][v][ao/wasapi] using soft-buffer of 9600 samples.
[   2.785][i][cplayer] AO: [wasapi] 48000Hz 5.1(side) 6ch float
[   2.785][v][cplayer] AO: Description: Windows WASAPI audio output (event mode)
[   2.786][v][autoconvert] inserting resampler
[   2.786][v][swresample] format change, reinitializing resampler
[   2.786][v][swresample] 48002Hz 5.1(side) floatp -> 48000Hz 5.1(side) float
[   2.786][v][af] [out] 48000Hz 5.1(side) 6ch float
[   2.787][v][cplayer] audio ready
[   2.787][d][cplayer] starting video playback
[   2.787][v][cplayer] delaying audio start 0.000002 vs. 0.000000, diff=0.000002
[   2.787][v][cplayer] playback restart complete @ 0.000000, audio=ready, video=playing
[   2.788][v][cplayer] starting audio playback
[   2.788][d][ao/wasapi] Thread Resume
[   2.788][d][ao/wasapi] Thread Reset
[   2.796][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   2.796][v][cplayer] Set property: shared-script-properties -> 1
[   2.796][d][osc] osc_init 
[   2.796][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   2.796][v][cplayer] Set property: shared-script-properties -> 1
[   2.804][v][cplayer] Change display sync audio drift: -1
[   2.909][v][cplayer] Change display sync audio drift: 1
[   3.769][v][ao/wasapi] OnPropertyValueChanged triggered on device {0.0.0.00000000}.{1a658526-7ba6-434a-bd37-f1f229b59002}
[   3.769][v][ao/wasapi] Changed property: {9855c4cd-df8c-449c-a181-8191b68bd06c},0
[   6.192][v][cplayer] Change display sync audio drift: 0
[   6.192][v][cplayer] Compensation factor: 0.999976
[  15.429][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[  15.429][v][cplayer] Set property: shared-script-properties -> 1
[  15.430][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[  15.453][v][osd/libass] fontselect: (sans-serif, 400, 0) -> ArialMT, 0, ArialMT
[  15.453][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> mpv-osd-symbols-Regular, 0, mpv-osd-symbols-Regular
[  15.455][v][vo/gpu] Reallocating OSD texture to 2048x256.
[  15.460][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[  15.465][v][vo/gpu/d3d11] Compiled a vertex shader in 8560us
[  15.465][v][vo/gpu/d3d11] shaderc: 3659us, SPIRV-Cross: 281us, D3DCompile: 4620us
[  15.465][d][vo/gpu/d3d11] GLSL source:
[  15.465][d][vo/gpu/d3d11] [  1] #version 450
[  15.465][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[  15.465][d][vo/gpu/d3d11] [  3] #define tex1D texture
[  15.465][d][vo/gpu/d3d11] [  4] #define tex3D texture
[  15.465][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[  15.465][d][vo/gpu/d3d11] [  6] layout(location=0) in vec2 vertex_position;
[  15.465][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 vertex_texcoord;
[  15.465][d][vo/gpu/d3d11] [  8] layout(location=1) out vec2 texcoord;
[  15.465][d][vo/gpu/d3d11] [  9] layout(location=2) in vec4 vertex_ass_color;
[  15.465][d][vo/gpu/d3d11] [ 10] layout(location=2) out vec4 ass_color;
[  15.465][d][vo/gpu/d3d11] [ 11] void main() {
[  15.465][d][vo/gpu/d3d11] [ 12] gl_Position = vec4(vertex_position, 1.0, 1.0);
[  15.465][d][vo/gpu/d3d11] [ 13] texcoord = vertex_texcoord;
[  15.465][d][vo/gpu/d3d11] [ 14] ass_color = vertex_ass_color;
[  15.465][d][vo/gpu/d3d11] [ 15] }
[  15.465][d][vo/gpu/d3d11] HLSL source:
[  15.465][d][vo/gpu/d3d11] [  1] static float4 gl_Position;
[  15.465][d][vo/gpu/d3d11] [  2] static float2 _18;
[  15.465][d][vo/gpu/d3d11] [  3] static float2 _27;
[  15.465][d][vo/gpu/d3d11] [  4] static float2 _28;
[  15.465][d][vo/gpu/d3d11] [  5] static float4 _30;
[  15.465][d][vo/gpu/d3d11] [  6] static float4 _32;
[  15.465][d][vo/gpu/d3d11] [  7] 
[  15.465][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[  15.465][d][vo/gpu/d3d11] [  9] {
[  15.465][d][vo/gpu/d3d11] [ 10]     float2 _18 : TEXCOORD0;
[  15.465][d][vo/gpu/d3d11] [ 11]     float2 _28 : TEXCOORD1;
[  15.465][d][vo/gpu/d3d11] [ 12]     float4 _32 : TEXCOORD2;
[  15.465][d][vo/gpu/d3d11] [ 13] };
[  15.465][d][vo/gpu/d3d11] [ 14] 
[  15.465][d][vo/gpu/d3d11] [ 15] struct SPIRV_Cross_Output
[  15.465][d][vo/gpu/d3d11] [ 16] {
[  15.465][d][vo/gpu/d3d11] [ 17]     float2 _27 : TEXCOORD1;
[  15.465][d][vo/gpu/d3d11] [ 18]     float4 _30 : TEXCOORD2;
[  15.465][d][vo/gpu/d3d11] [ 19]     float4 gl_Position : SV_Position;
[  15.466][d][vo/gpu/d3d11] [ 20] };
[  15.466][d][vo/gpu/d3d11] [ 21] 
[  15.466][d][vo/gpu/d3d11] [ 22] void vert_main()
[  15.466][d][vo/gpu/d3d11] [ 23] {
[  15.466][d][vo/gpu/d3d11] [ 24]     gl_Position = float4(_18, 1.0f, 1.0f);
[  15.466][d][vo/gpu/d3d11] [ 25]     _27 = _28;
[  15.466][d][vo/gpu/d3d11] [ 26]     _30 = _32;
[  15.466][d][vo/gpu/d3d11] [ 27]     gl_Position.y = -gl_Position.y;
[  15.466][d][vo/gpu/d3d11] [ 28] }
[  15.466][d][vo/gpu/d3d11] [ 29] 
[  15.466][d][vo/gpu/d3d11] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[  15.466][d][vo/gpu/d3d11] [ 31] {
[  15.466][d][vo/gpu/d3d11] [ 32]     _18 = stage_input._18;
[  15.466][d][vo/gpu/d3d11] [ 33]     _28 = stage_input._28;
[  15.466][d][vo/gpu/d3d11] [ 34]     _32 = stage_input._32;
[  15.466][d][vo/gpu/d3d11] [ 35]     vert_main();
[  15.466][d][vo/gpu/d3d11] [ 36]     SPIRV_Cross_Output stage_output;
[  15.466][d][vo/gpu/d3d11] [ 37]     stage_output.gl_Position = gl_Position;
[  15.466][d][vo/gpu/d3d11] [ 38]     stage_output._27 = _27;
[  15.466][d][vo/gpu/d3d11] [ 39]     stage_output._30 = _30;
[  15.466][d][vo/gpu/d3d11] [ 40]     return stage_output;
[  15.466][d][vo/gpu/d3d11] [ 41] }
[  15.470][v][vo/gpu/d3d11] shaderc compile status 'success' (0 errors, 0 warnings)
[  15.473][v][vo/gpu/d3d11] Compiled a fragment shader in 7954us
[  15.474][v][vo/gpu/d3d11] shaderc: 4832us, SPIRV-Cross: 215us, D3DCompile: 2907us
[  15.474][d][vo/gpu/d3d11] GLSL source:
[  15.474][d][vo/gpu/d3d11] [  1] #version 450
[  15.474][d][vo/gpu/d3d11] [  2] #extension GL_ARB_shader_image_load_store : enable
[  15.474][d][vo/gpu/d3d11] [  3] #define tex1D texture
[  15.474][d][vo/gpu/d3d11] [  4] #define tex3D texture
[  15.474][d][vo/gpu/d3d11] [  5] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[  15.474][d][vo/gpu/d3d11] [  6] layout(location=0) out vec4 out_color;
[  15.474][d][vo/gpu/d3d11] [  7] layout(location=1) in vec2 texcoord;
[  15.474][d][vo/gpu/d3d11] [  8] layout(location=2) in vec4 ass_color;
[  15.474][d][vo/gpu/d3d11] [  9] layout(std140, binding=0) uniform UBO {
[  15.474][d][vo/gpu/d3d11] [ 10] layout(offset=0) vec3 src_luma;
[  15.474][d][vo/gpu/d3d11] [ 11] layout(offset=16) vec3 dst_luma;
[  15.474][d][vo/gpu/d3d11] [ 12] };
[  15.474][d][vo/gpu/d3d11] [ 13] layout(binding=0) uniform sampler2D osdtex;
[  15.474][d][vo/gpu/d3d11] [ 14] void main() {
[  15.474][d][vo/gpu/d3d11] [ 15] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[  15.474][d][vo/gpu/d3d11] [ 16] color = vec4(ass_color.rgb, ass_color.a * texture(osdtex, texcoord).r);
[  15.474][d][vo/gpu/d3d11] [ 17] // color mapping
[  15.474][d][vo/gpu/d3d11] [ 18] color.rgb *= vec3(1.000000);
[  15.474][d][vo/gpu/d3d11] [ 19] color.rgb *= vec3(1.000000);
[  15.474][d][vo/gpu/d3d11] [ 20] out_color = color;
[  15.474][d][vo/gpu/d3d11] [ 21] }
[  15.474][d][vo/gpu/d3d11] HLSL source:
[  15.474][d][vo/gpu/d3d11] [  1] Texture2D<float4> _26 : register(t0);
[  15.474][d][vo/gpu/d3d11] [  2] SamplerState __26_sampler : register(s0);
[  15.474][d][vo/gpu/d3d11] [  3] 
[  15.474][d][vo/gpu/d3d11] [  4] static float4 _14;
[  15.474][d][vo/gpu/d3d11] [  5] static float2 _30;
[  15.474][d][vo/gpu/d3d11] [  6] static float4 _63;
[  15.474][d][vo/gpu/d3d11] [  7] 
[  15.474][d][vo/gpu/d3d11] [  8] struct SPIRV_Cross_Input
[  15.474][d][vo/gpu/d3d11] [  9] {
[  15.474][d][vo/gpu/d3d11] [ 10]     float2 _30 : TEXCOORD1;
[  15.474][d][vo/gpu/d3d11] [ 11]     float4 _14 : TEXCOORD2;
[  15.474][d][vo/gpu/d3d11] [ 12] };
[  15.474][d][vo/gpu/d3d11] [ 13] 
[  15.474][d][vo/gpu/d3d11] [ 14] struct SPIRV_Cross_Output
[  15.474][d][vo/gpu/d3d11] [ 15] {
[  15.474][d][vo/gpu/d3d11] [ 16]     float4 _63 : SV_Target0;
[  15.474][d][vo/gpu/d3d11] [ 17] };
[  15.474][d][vo/gpu/d3d11] [ 18] 
[  15.474][d][vo/gpu/d3d11] [ 19] void frag_main()
[  15.474][d][vo/gpu/d3d11] [ 20] {
[  15.474][d][vo/gpu/d3d11] [ 21]     float4 _39 = float4(_14.xyz, _14.w * _26.Sample(__26_sampler, _30).x);
[  15.474][d][vo/gpu/d3d11] [ 22]     _39.x = _14.x;
[  15.474][d][vo/gpu/d3d11] [ 23]     _39.y = _14.y;
[  15.474][d][vo/gpu/d3d11] [ 24]     _39.z = _14.z;
[  15.474][d][vo/gpu/d3d11] [ 25]     _63 = _39;
[  15.474][d][vo/gpu/d3d11] [ 26] }
[  15.474][d][vo/gpu/d3d11] [ 27] 
[  15.474][d][vo/gpu/d3d11] [ 28] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[  15.474][d][vo/gpu/d3d11] [ 29] {
[  15.474][d][vo/gpu/d3d11] [ 30]     _14 = stage_input._14;
[  15.474][d][vo/gpu/d3d11] [ 31]     _30 = stage_input._30;
[  15.474][d][vo/gpu/d3d11] [ 32]     frag_main();
[  15.474][d][vo/gpu/d3d11] [ 33]     SPIRV_Cross_Output stage_output;
[  15.474][d][vo/gpu/d3d11] [ 34]     stage_output._63 = _63;
[  15.474][d][vo/gpu/d3d11] [ 35]     return stage_output;
[  15.474][d][vo/gpu/d3d11] [ 36] }
[  15.919][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[  16.126][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[  16.126][v][cplayer] Set property: shared-script-properties -> 1
[  16.126][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[  18.874][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding2"]
[  19.179][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[  20.893][v][cplayer] Change display sync audio drift: 1
[  28.148][v][sub/ass] fontselect: (sans-serif, 400, 0) -> ArialMT, 0, ArialMT
[  28.151][v][vo/gpu] Reallocating OSD texture to 1024x512.
[  30.294][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[  30.294][v][cplayer] Set property: shared-script-properties -> 1
[  30.301][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[  30.938][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding7"]
[  31.013][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding7"]
[  31.020][d][cplayer] Run command: set, flags=64, args=[name="sub", value="no"]
[  31.022][v][mkv] deselect track 2
[  31.022][i][cplayer] Track switched:
[  31.022][i][cplayer]  (+) Video --vid=1 (*) (h264 1920x800 24.000fps)
[  31.022][i][cplayer]  (+) Audio --aid=1 --alang=eng (*) (eac3 6ch 48000Hz)
[  31.022][i][cplayer]      Subs  --sid=1 --slang=eng 'English' (subrip)
[  31.022][i][cplayer]      Subs  --sid=2 --slang=eng 'English [SDH]' (subrip)
[  31.022][v][cplayer] Set property: sid="no" -> 1
[  31.022][v][cplayer] Set property: sub=no -> 1
[  31.030][v][vo/gpu] Reallocating OSD texture to 2048x512.
[  31.055][d][osc] osc_init 
[  31.056][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[  31.056][v][cplayer] Set property: shared-script-properties -> 1
[  31.301][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[  31.536][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[  31.537][v][cplayer] Set property: shared-script-properties -> 1
[  31.537][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[  35.228][v][cplayer] Change display sync audio drift: 0
[  35.228][v][cplayer] Compensation factor: 0.999958
[ 118.494][v][cplayer] Change display sync audio drift: 1
[ 271.397][d][mkv] stream 0: resize index to 256
[ 286.268][d][mkv] stream 1: resize index to 512
[ 349.163][v][cplayer] Change display sync audio drift: -1
[ 349.363][v][cplayer] Change display sync audio drift: 0
[ 349.363][v][cplayer] Compensation factor: 1.009828
[ 349.913][v][cplayer] Change display sync audio drift: 1
[ 660.797][v][cplayer] Change display sync audio drift: 0
[ 660.797][v][cplayer] Compensation factor: 0.999992
[ 660.898][v][cplayer] Change display sync audio drift: 1
[ 725.648][v][cplayer] Change display sync audio drift: -1
[ 727.265][v][cplayer] Change display sync audio drift: 0
[ 727.265][v][cplayer] Compensation factor: 1.002484
[ 727.431][v][cplayer] Change display sync audio drift: 1
[1030.417][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1030.417][v][cplayer] Set property: shared-script-properties -> 1
[1030.441][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1031.773][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1031.773][v][cplayer] Set property: shared-script-properties -> 1
[1031.774][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1032.326][d][cplayer] Run command: seek, flags=73, args=[target="-5.000000", flags="relative", legacy="unused"]
[1032.326][v][mkv] queuing seek to 1023.450000
[1032.326][v][mkv] cached range 0: 964.000000 <-> 1239.958000 (bof=0, eof=0)
[1032.326][v][mkv] ...using this range for in-cache seek.
[1032.326][v][mkv] adjust seek target 1023.450000 -> 1022.000000
[1032.326][v][mkv] seeking stream 0 (video) to packet 1022.000000/-9223372036854775808.000000
[1032.326][v][mkv] seeking stream 1 (audio) to packet 1021.984000/-9223372036854775808.000000
[1032.326][v][mkv] seeking stream 2 (sub) to nothing
[1032.326][v][mkv] seeking stream 3 (sub) to nothing
[1032.326][d][ao/wasapi] Thread Reset
[1032.337][d][vapoursynth] destroying VS filters
[1032.337][d][vapoursynth] returning error on reset/uninit
[1032.339][d][global] config path: 'fonts' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts'
[1032.339][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts'
[1032.339][d][global] config path: 'fonts' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts'
[1032.339][d][osd/libass] ASS library version: 0x1600000 (runtime 0x1600000)
[1032.339][v][osd/libass] libass API version: 0x1600000
[1032.339][v][osd/libass] libass source: commit: a2b39cde4ecb74d5e6fccab4a5f7d8ad52b2b1a4
[1032.340][v][osd/libass] Shaper: FriBidi 1.0.12 (SIMPLE) HarfBuzz-ng 4.4.1 (COMPLEX)
[1032.340][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/subfont.ttf'
[1032.340][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/subfont.ttf'
[1032.340][d][global] config path: 'subfont.ttf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/mpv/subfont.ttf'
[1032.341][d][global] config path: 'fonts.conf' -/-> 'C:\Users\khaosmaou\AppData\Roaming/mpv/fonts.conf'
[1032.341][d][global] config path: 'fonts.conf' -/-> 'D:/ProgramFiles/git/mpv-x86_64/fonts.conf'
[1032.341][d][global] config path: 'fonts.conf' -> 'D:/ProgramFiles/git/mpv-x86_64/mpv/fonts.conf'
[1032.341][v][osd/libass] Setting up fonts...
[1032.342][v][osd/libass] Using font provider directwrite (with GDI)
[1032.342][v][osd/libass] Done.
[1032.346][v][osd/libass] fontselect: (sans-serif, 400, 0) -> ArialMT, 0, ArialMT
[1032.347][v][vo/gpu] Reallocating OSD texture to 2048x128.
[1032.350][d][vapoursynth] all requests terminated
[1032.400][d][vapoursynth] uninitialized.
[1032.400][d][ffmpeg/video] h264: Reinit context to 1920x800, pix_fmt: yuv420p
[1032.412][v][vd] Decoder format: 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/auto CL=mpeg2/4/h264
[1032.412][v][vd] Using container aspect ratio.
[1032.413][d][vapoursynth] initializing...
[1032.421][w][vapoursynth] Frame requested during init! This is unsupported.
[1032.421][w][vapoursynth] Returning black dummy frame with 0 duration.
[1032.429][w][vapoursynth] Frame requested during init! This is unsupported.
[1032.429][w][vapoursynth] Returning black dummy frame with 0 duration.
[1032.438][d][vapoursynth] initialized.
[1032.671][v][cplayer] first video frame after restart shown
[1032.671][v][cplayer] audio ready
[1032.671][d][cplayer] starting video playback
[1032.671][v][cplayer] starting audio playback
[1032.671][d][ao/wasapi] Thread Resume
[1032.671][d][ao/wasapi] Thread Reset
[1032.671][v][cplayer] playback restart complete @ 1022.000000, audio=playing, video=playing
[1032.672][v][cplayer] Change display sync audio drift: -1
[1032.684][v][cplayer] Change display sync audio drift: 1
[1032.716][v][cplayer] Change display sync audio drift: 0
[1033.608][d][cplayer] Run command: seek, flags=73, args=[target="-5.000000", flags="relative", legacy="unused"]
[1033.608][v][mkv] queuing seek to 1017.983333
[1033.608][v][mkv] cached range 0: 964.000000 <-> 1239.958000 (bof=0, eof=0)
[1033.608][v][mkv] ...using this range for in-cache seek.
[1033.608][v][mkv] adjust seek target 1017.983333 -> 1016.000000
[1033.608][v][mkv] seeking stream 0 (video) to packet 1016.000000/-9223372036854775808.000000
[1033.608][v][mkv] seeking stream 1 (audio) to packet 1016.000000/-9223372036854775808.000000
[1033.608][v][mkv] seeking stream 2 (sub) to nothing
[1033.608][v][mkv] seeking stream 3 (sub) to nothing
[1033.608][d][ao/wasapi] Thread Reset
[1033.617][d][vapoursynth] destroying VS filters
[1033.657][d][vapoursynth] all requests terminated
[1033.699][d][vapoursynth] uninitialized.
[1033.699][d][ffmpeg/video] h264: Reinit context to 1920x800, pix_fmt: yuv420p
[1033.715][v][vd] Decoder format: 1920x800 yuv420p bt.709/bt.709/bt.1886/limited/auto CL=mpeg2/4/h264
[1033.715][v][vd] Using container aspect ratio.
[1033.715][d][vapoursynth] initializing...
[1033.724][w][vapoursynth] Frame requested during init! This is unsupported.
[1033.724][w][vapoursynth] Returning black dummy frame with 0 duration.
[1033.732][w][vapoursynth] Frame requested during init! This is unsupported.
[1033.732][w][vapoursynth] Returning black dummy frame with 0 duration.
[1033.740][d][vapoursynth] initialized.
[1034.002][v][cplayer] first video frame after restart shown
[1034.002][v][cplayer] audio ready
[1034.002][d][cplayer] starting video playback
[1034.002][v][cplayer] delaying audio start 1016.000001 vs. 1016.000000, diff=0.000001
[1034.002][v][cplayer] playback restart complete @ 1016.000000, audio=ready, video=playing
[1034.002][v][cplayer] starting audio playback
[1034.002][d][ao/wasapi] Thread Resume
[1034.002][d][ao/wasapi] Thread Reset
[1034.002][v][cplayer] Change display sync audio drift: -1
[1034.016][v][cplayer] Change display sync audio drift: 1
[1042.167][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1042.167][v][cplayer] Set property: shared-script-properties -> 1
[1042.170][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1042.682][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1042.930][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1042.930][v][cplayer] Set property: shared-script-properties -> 1
[1042.930][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1186.578][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding2"]
[1198.629][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1205.087][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1205.087][v][cplayer] Set property: shared-script-properties -> 1
[1205.091][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1208.126][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1208.366][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1208.367][v][cplayer] Set property: shared-script-properties -> 1
[1208.367][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1502.594][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1502.594][v][cplayer] Set property: shared-script-properties -> 1
[1502.594][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1503.708][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1503.708][v][cplayer] Set property: shared-script-properties -> 1
[1503.708][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1504.134][d][cplayer] Run command: cycle, flags=73, args=[name="pause", value="1.000000"]
[1504.134][d][ao/wasapi] Thread Reset
[1504.134][v][cplayer] Set property: pause -> 1
[1504.306][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1504.306][v][cplayer] Set property: shared-script-properties -> 1
[1504.306][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1504.534][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1504.765][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1504.765][v][cplayer] Set property: shared-script-properties -> 1
[1504.765][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1557.385][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1557.385][v][cplayer] Set property: shared-script-properties -> 1
[1557.385][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1558.687][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding5"]
[1558.729][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding5"]
[1558.729][d][cplayer] Run command: cycle, flags=64, args=[name="pause", value="1.000000"]
[1558.729][d][ao/wasapi] Thread Resume
[1558.729][d][ao/wasapi] Thread Reset
[1558.729][v][cplayer] Set property: pause -> 1
[1558.729][v][cplayer] Change display sync audio drift: 0
[1558.729][v][cplayer] Compensation factor: 0.999973
[1558.730][v][cplayer] Change display sync audio drift: -1
[1559.051][v][cplayer] Change display sync audio drift: 1
[1560.194][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1560.194][v][cplayer] Set property: shared-script-properties -> 1
[1560.194][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1560.368][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1560.368][v][cplayer] Set property: shared-script-properties -> 1
[1560.385][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1560.485][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1560.728][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1560.728][v][cplayer] Set property: shared-script-properties -> 1
[1560.728][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1567.255][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1567.256][v][cplayer] Set property: shared-script-properties -> 1
[1567.256][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1568.183][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1568.183][v][cplayer] Set property: shared-script-properties -> 1
[1568.183][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1578.268][v][cplayer] Change display sync audio drift: 0
[1578.268][v][cplayer] Compensation factor: 0.999953
[1644.502][v][cplayer] Change display sync audio drift: 1
[1658.252][v][cplayer] Change display sync audio drift: 0
[1658.252][v][cplayer] Compensation factor: 0.999956
[1671.003][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1671.003][v][cplayer] Set property: shared-script-properties -> 1
[1671.010][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[1671.193][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[1671.413][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[1671.413][v][cplayer] Set property: shared-script-properties -> 1
[1671.413][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[1673.436][v][cplayer] Change display sync audio drift: 1
[1728.769][v][cplayer] Change display sync audio drift: 0
[1728.769][v][cplayer] Compensation factor: 0.999966
[1730.102][v][cplayer] Change display sync audio drift: 1
[1743.969][v][cplayer] Change display sync audio drift: 0
[1743.969][v][cplayer] Compensation factor: 0.999960
[1745.188][v][cplayer] Change display sync audio drift: 1
[1790.369][v][cplayer] Change display sync audio drift: 0
[1790.369][v][cplayer] Compensation factor: 0.998947
[1791.769][v][cplayer] Change display sync audio drift: 1
[2015.670][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding2"]
[2015.824][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[2091.104][v][cplayer] Change display sync audio drift: 0
[2091.104][v][cplayer] Compensation factor: 0.999958
[2091.988][v][cplayer] Change display sync audio drift: 1
[2202.588][v][cplayer] Change display sync audio drift: 0
[2202.588][v][cplayer] Compensation factor: 0.999956
[2202.738][v][cplayer] Change display sync audio drift: 1
[2490.041][v][mkv] EOF reached.
[2603.540][v][cplayer] Change display sync audio drift: 0
[2603.540][v][cplayer] Compensation factor: 0.999976
[2609.174][v][cplayer] Change display sync audio drift: 1
[2623.125][v][cplayer] Change display sync audio drift: 0
[2623.125][v][cplayer] Compensation factor: 0.999939
[2623.257][v][cplayer] Change display sync audio drift: 1
[2696.857][v][cplayer] Change display sync audio drift: 0
[2696.857][v][cplayer] Compensation factor: 0.998815
[2697.057][v][cplayer] Change display sync audio drift: 1
[2775.241][v][cplayer] Change display sync audio drift: 0
[2775.241][v][cplayer] Compensation factor: 0.999968
[2776.774][v][cplayer] Change display sync audio drift: 1
[2819.577][v][vf] filter input EOF
[2819.599][v][vapoursynth] initiate EOF
[2819.599][d][vapoursynth] returning error on EOF/reinit
[2819.612][d][vapoursynth] returning error on EOF/reinit
[2819.626][d][vapoursynth] returning error on EOF/reinit
[2819.626][d][vapoursynth] returning error on EOF/reinit
[2819.662][d][vapoursynth] returning error on EOF/reinit
[2819.662][d][vapoursynth] returning error on EOF/reinit
[2819.662][d][vapoursynth] returning error on EOF/reinit
[2819.691][d][vapoursynth] returning error on EOF/reinit
[2819.721][d][vapoursynth] returning error on EOF/reinit
[2819.721][d][vapoursynth] returning error on EOF/reinit
[2819.721][d][vapoursynth] returning error on EOF/reinit
[2819.722][d][vapoursynth] returning error on EOF/reinit
[2819.722][d][vapoursynth] returning error on EOF/reinit
[2819.757][d][vapoursynth] returning error on EOF/reinit
[2819.757][d][vapoursynth] returning error on EOF/reinit
[2819.757][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.758][d][vapoursynth] returning error on EOF/reinit
[2819.791][d][vapoursynth] returning error on EOF/reinit
[2819.821][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.822][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.841][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.842][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.874][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.907][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.925][d][vapoursynth] returning error on EOF/reinit
[2819.951][d][vapoursynth] returning error on EOF/reinit
[2819.951][d][vapoursynth] returning error on EOF/reinit
[2819.951][d][vapoursynth] returning error on EOF/reinit
[2819.951][d][vapoursynth] returning error on EOF/reinit
[2819.951][d][vapoursynth] returning error on EOF/reinit
[2819.952][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.974][d][vapoursynth] returning error on EOF/reinit
[2819.975][d][vapoursynth] returning error on EOF/reinit
[2819.975][d][vapoursynth] returning error on EOF/reinit
[2819.981][v][af] filter input EOF
[2819.981][v][af] filter output EOF
[2819.981][v][cplayer] audio filter EOF
[2819.981][v][cplayer] audio draining
[2819.981][v][cplayer] audio EOF reached
[2820.007][d][vapoursynth] returning error on EOF/reinit
[2820.007][d][vapoursynth] returning error on EOF/reinit
[2820.007][d][vapoursynth] returning error on EOF/reinit
[2820.007][d][vapoursynth] returning error on EOF/reinit
[2820.008][d][vapoursynth] returning error on EOF/reinit
[2820.008][d][vapoursynth] returning error on EOF/reinit
[2820.008][d][vapoursynth] returning error on EOF/reinit
[2820.041][d][vapoursynth] returning error on EOF/reinit
[2820.041][d][vapoursynth] returning error on EOF/reinit
[2820.041][d][vapoursynth] returning error on EOF/reinit
[2820.041][d][vapoursynth] returning error on EOF/reinit
[2820.041][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.074][d][vapoursynth] returning error on EOF/reinit
[2820.081][d][vapoursynth] returning error on EOF/reinit
[2820.108][d][vapoursynth] returning error on EOF/reinit
[2820.108][d][vapoursynth] returning error on EOF/reinit
[2820.108][d][vapoursynth] returning error on EOF/reinit
[2820.108][d][vapoursynth] returning error on EOF/reinit
[2820.108][v][vapoursynth] finishing up
[2820.108][d][vapoursynth] destroying VS filters
[2820.108][d][vapoursynth] returning error on reset/uninit
[2820.108][d][vapoursynth] returning error on reset/uninit
[2820.108][d][vapoursynth] all requests terminated
[2820.132][d][vapoursynth] uninitialized.
[2820.132][v][vapoursynth] return EOF
[2820.132][v][vf] filter output EOF
[2820.141][v][cplayer] EOF code: 1  
[2820.141][d][ad] Uninit decoder.
[2820.142][d][vd] Uninit decoder.
[2820.185][d][cplayer] Terminating demuxers...
[2820.258][d][cplayer] Done terminating demuxers.
[2820.258][v][cplayer] finished playback, success (reason 0)
[2820.258][i][cplayer] 
[2820.258][i][cplayer] Exiting... (End of file)
[2820.258][d][ytdl_hook] Exiting...
[2820.258][d][console] Exiting...
[2820.258][d][stats] Exiting...
[2820.259][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="remove", value="osc-margins"]
[2820.259][v][cplayer] Set property: shared-script-properties -> 1
[2820.260][d][osc] Exiting...
[2820.264][d][ao/wasapi] Uninit wasapi
[2820.264][d][ao/wasapi] Thread Reset
[2820.264][d][ao/wasapi] Thread shutdown
[2820.266][d][ao/wasapi] Thread uninit done
[2820.266][d][ao/wasapi] Thread return
[2820.266][d][ao/wasapi] Uninit wasapi done
[2820.267][d][vo/gpu] flushing shader cache
[2820.276][v][vo/gpu/win32] uninit
